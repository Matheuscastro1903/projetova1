import sys
import json
import time
import re
import random
# RESOLVER EMAIL
# LOGIN
# ATUALIZAR
# DELETAR


with open(r"D:/github/PER√çODO 1/projetova1/projetova1/banco_dados.JSON", "r", encoding="utf-8") as arquivo:
    # quando usa json.load o arquivo json √© transformado em dicion√°rio python
    arquivo_lido = json.load(arquivo)
    dados_conta = arquivo_lido["senha"]
    dados_familia = arquivo_lido["familia"]
    dados_quantidade = arquivo_lido["membros"]
    dados_pontos = arquivo_lido["pontos"]
    dados_apartamento = arquivo_lido["apartamento"]
    dados_codigov = arquivo_lido["verificador"]


mensagens_agua = [
    "üíß Cada gota conta. Economize √°gua!",
    "üöø Banhos curtos, planeta mais saud√°vel.",
    "üåç √Ågua √© vida. Preserve cada gota.",
    "üßº Feche a torneira ao escovar os dentes.",
    "üí¶ Pequenas atitudes salvam grandes recursos.",
    "üîß Torneiras pingando desperdi√ßam litros por dia!",
    "üå± Use a √°gua da chuva para regar plantas.",
    "‚ùå √Ågua n√£o √© infinita. Use com consci√™ncia.",
    "ü™£ Reutilize a √°gua sempre que puder.",
    "üê≥ Preserve os rios, lagos e oceanos.",
    "üìâ Menos desperd√≠cio, mais futuro.",
    "üßΩ Economize √°gua ao lavar lou√ßa ou roupa.",
    "üè° Sua casa tamb√©m pode ser sustent√°vel.",
    "üë∂ Ensine as crian√ßas a cuidar da √°gua.",
    "üíô √Ågua limpa √© direito de todos. Preserve!"
]



def login():
    with open(r"D:/github/PER√çODO 1/projetova1/projetova1/banco_dados.JSON", "r", encoding="utf-8") as arquivo:
        # quando usa json.load o arquivo json √© transformado em dicion√°rio python
        arquivo_lido = json.load(arquivo)

        print("Bem vindo a tela de Login ECODROPüíß.")
        #print(random.choice(mensagens_agua))
        time.sleep(1)
        email = input("Digite seu email(ex:nome123@gmail.com):")
        # "joao.silva@email.com": "48291" dados para teste
        senha = input("Digite sua senha:")
        if email in dados_conta:
            if dados_conta[email] == senha:
                menu()
            else:
                print("EMAIL OU SENHA INCORRETO.")
                tentativas = 2
                while tentativas != 0:
                    email = input("Digite seu email(nome123@gmail.com):")
                    senha = input("Digite sua senha:")
                    if dados_conta[email] == senha:
                        menu()
                        # return serve para interromper a fun√ß√£o login de continuar rodando e deixar apenas a fun√ß√£o menu
                        return
                    else:
                        print("SENHA OU EMAIL INCORRETO.")
                        tentativas -= 1
                        print(f"Tentativas restantes {tentativas}")
                else:
                    print(
                        "N√öMERO DE TENTATIVAS EXTRAPOLADAS.TENTE NOVAMENTE MAIS TARDE.")
                    question1 = input(
                        "Deseja tentar entrar usando c√≥digo verificador ??(sim/n√£o)")
                    if question1 in ["sim", "si", "yes", "codigo", "c√≥digo verificador", "verificador", "c√≥digo"]:
                        tryverificador = input(
                            "Digite seu c√≥digo verificador(Voc√™ ter√° apenas 1 chance):")
                        if dados_codigov[email] == tryverificador:
                            print(
                                "Voc√™ conseguiu o acesso.Mude imediatamente sua senha,visando n√£o ter problemas futuros.")
                            menu()
                            return
                        else:
                            print("Voc√™ errou o c√≥digo verificador.")
                            print(
                                "Tente novamente mais tarde.Use esse tempo para tentar relembrar seus dados.")
                            sys.exit()
                    if question1 in ["n√£o", "no", "nao", "sair", "sai"]:
                        print("Tenha um bom dia.")
                        sys.exit

        else:
            print("EMAIL N√ÉO CADASTRADO.")
            opcao = input(
                "Deseja ir para tela de cadastro ou sair do sistema ??(cadastro/sair)").strip().lower()
            if opcao in ["cadastro", "cadastrar", "criar conta", "novo cadastro"]:
                cadastro_novo = Cadastro()
            elif opcao in ["sair", "sair sistema", "quitar", "sai"]:
                print("Tenha um bom dia!!")
                sys.exit()
            else:
                print("Op√ß√£o inv√°lida")
                tentativas3 = 2
                while tentativas3 != 0:
                    opcao = input(
                        "Deseja ir para tela de cadastro ou sair do sistema ??(cadastro/sair)").strip().lower()
                    if opcao in ["cadastro", "cadastrar", "criar conta", "novo cadastro"]:
                        cadastro_novo = Cadastro()
                    elif opcao in ["sair", "sair sistema", "quitar", "sai"]:
                        print("Tenha um bom dia!!")
                        sys.exit()
                    else:
                        print("Op√ß√£o inv√°lida")
                        print(f"Tentativas restantes {tentativas3}")
                        tentativas3 -= 1

                print("N√öMERO DE TENTATIVAS EXTRAPOLADAS.TENTE NOVAMENTE MAIS TARDE.")
                sys.exit()
#######


def atualizar():
    print("Bem-vindo √† tela de atualiza√ß√£o do ECODROP.")
    tentativas = 3

    while tentativas > 0:
        question1 = input(
            "O que voc√™ deseja atualizar na sua conta? (dados conta / dados pessoais): ").strip().lower()

        if question1 in ["dados conta", "conta", "dados da conta", "conta dados"]:
            atualizar_conta()
            return

        elif question1 in ["dados pessoais", "pessoais", "informa√ß√µes pessoais", "info pessoais"]:
            atualizar_pessoais()
            return

        else:
            print("Op√ß√£o inv√°lida.")
            tentativas -= 1
            print(f"Tentativas restantes: {tentativas}")

    print("Limite de tentativas atingido. Encerrando o processo de atualiza√ß√£o.")

    pass


def atualizar_pessoais():
    import json
import sys

def atualizar_pessoais():
    # Carregar os dados do arquivo
    with open(r"D:/github/PER√çODO 1/projetova1/projetova1/banco_dados.JSON", "r", encoding="utf-8") as arquivo:
        dados = json.load(arquivo)

    while True:
        try:
            membros_novos = int(input("Digite a quantidade de membros na fam√≠lia (Quantidade em numeral):"))
            break
        except ValueError:
            print("Valor inv√°lido. Digite apenas n√∫meros inteiros.")
    
    nome_novo = input("Digite o nome da sua fam√≠lia (Ficar√° registrado no ranking da forma que voc√™ escrever):")
    print(f"Dados atualizados:\nQuantidade de pessoas na fam√≠lia: {membros_novos}\nNome da fam√≠lia: {nome_novo}")
    
    confirmar = input("Deseja confirmar a atualiza√ß√£o dos dados? (sim/n√£o): ").strip().lower()
    if confirmar in ["sim", "si", "confirmar", "confirma", "confirmo"]:
        print("DIGITE SEUS DADOS NOVAMENTE PARA A SEGURAN√áA DA SUA CONTA")
        email = input("Digite seu e-mail (ex:nome123@gmail.com): ")
        senha = input("Digite sua senha: ")
        
        # Verifica se o e-mail existe e se a senha est√° correta
        if email in dados["senha"]:
            if dados["senha"][email] == senha:
                # Atualiza os dados
                dados["familia"][email] = nome_novo
                dados["membros"][email] = membros_novos
                print("Dados atualizados com sucesso!")
                
                # Salva os dados modificados no arquivo
                with open(r"D:/github/PER√çODO 1/projetova1/projetova1/banco_dados.JSON", "w", encoding="utf-8") as arquivo:
                    json.dump({
                        "senha": dados["senha"],
                        "familia": dados["familia"],
                        "membros": dados["membros"],
                        "pontos": dados["pontos"],
                        "apartamento": dados["apartamento"],
                        "verificador": dados["verificador"]
                    }, arquivo, indent=4, ensure_ascii=False)
                return
            else:
                print("E-mail ou senha incorretos.")
                tentativas = 2
                while tentativas > 0:
                    email = input("Digite seu e-mail (nome123@gmail.com): ")
                    senha = input("Digite sua senha: ")
                    if dados["senha"].get(email) == senha:
                        dados["familia"][email] = nome_novo
                        dados["membros"][email] = membros_novos
                        print("Dados atualizados com sucesso!")
                        # Salva os dados modificados no arquivo
                        with open(r"D:/github/PER√çODO 1/projetova1/projetova1/banco_dados.JSON", "w", encoding="utf-8") as arquivo:
                            json.dump({
                                "senha": dados["senha"],
                                "familia": dados["familia"],
                                "membros": dados["membros"],
                                "pontos": dados["pontos"],
                                "apartamento": dados["apartamento"],
                                "verificador": dados["verificador"]
                            }, arquivo, indent=4, ensure_ascii=False)
                        return
                    else:
                        print("E-mail ou senha incorretos.")
                        tentativas -= 1
                        print(f"Tentativas restantes: {tentativas}")
                print("N√∫mero de tentativas excedido. Tente novamente mais tarde.")
                sys.exit()
        else:
            print("E-mail n√£o encontrado no banco de dados.")
            sys.exit()

    elif confirmar in ["n√£o", "nao", "cancelar", "cancelo", "cancela"]:
        print("Cancelando opera√ß√£o... Voltando para o menu inicial.")
        menu()  # Substitua com sua fun√ß√£o de menu, caso necess√°rio
    else:
        print("Op√ß√£o inv√°lida. Cancelando opera√ß√£o.")
        menu()

# Exemplo de chamada da fun√ß√£o
#atualizar_pessoais()



def atualizar_conta():
    pass


def deletar():
    # usar arquivo csv para guardar as poss√≠veis reclama√ß√µes
    # usar a biblioteca time para capturar a data
    # usu√°rio e motivo
    pass


def feedback():
    print("======Sistema de avalia√ß√£o"========")

    print("O que voc√™ achou do nosso servi√ßo?")
    nome = input("Digite seu nome: ")
    nota = float(input("Qual sua nota (0 a 10)? "))
    
    # Verifica se a nota est√° dentro do intervalo permitido
    if nota < 0 or nota > 10:
        print("Nota inv√°lida. Por favor, digite uma nota entre 0 e 10.")
        return
    
    comentario = input("Deixe seu coment√°rio: ")
    
    # Armazenar o feedback como um dicion√°rio
    feedback = {
        "nome": nome,
        "nota": nota,
        "comentario": comentario
    }
    
    feedbacks.append(feedback)
    print("\n‚úÖ Feedback registrado com sucesso!\n")

# Fun√ß√£o para exibir todos os feedbacks
def exibir_feedbacks():
    if not feedbacks:
        print("Ainda n√£o h√° feedbacks registrados.\n")
        return
    
    print("\nüìã Lista de Feedbacks Recebidos:")
    for i, f in enumerate(feedbacks, start=1):
        print(f"\n{i} - Nome: {f['nome']}")
        print(f"Nota: {f['nota']}/10")
        print(f"Coment√°rio: {f['comentario']}")



def ranking():
    import json

    # L√™ os dados do arquivo JSON
    with open('dados_usuarios.json', 'r', encoding='utf-8') as arquivo:
        dados = json.load(arquivo)

    # Extrai os pontos
        pontos = dados['pontos']

    # Gera uma lista de tuplas com email e pontos
        ranking = sorted(pontos.items(), key=lambda item: item[1], reverse=True)

    # Mostra o ranking com outros dados (nome da fam√≠lia e apartamento)
        print("üèÜ RANKING DOS USU√ÅRIOS POR PONTOS:\n")
        for posicao, (email, ponto) in enumerate(ranking, start=1):
            familia = dados['familia'].get(email, 'Desconhecido')
            ap = dados['apartamento'].get(email, '???')
            print(f"{posicao}¬∫ lugar: Fam√≠lia {familia} (Apt {ap}) - {ponto} pontos")
pass


def resgatar():
    def resgatar_premio(litros_economizados):
    if litros_economizados >= 1000:
        premio = "Viagem para uma reserva ecol√≥gica por 1 final de semana"
    elif litros_economizados >= 500:
        premio = "Assinatura de um servi√ßo de streaming por 3 meses"
    elif litros_economizados >= 200:
        premio = "Desconto em um produto de limpeza ecol√≥gico"
    elif litros_economizados >= 100:
        premio = "Cart√£o presente de R$50"
    elif litros_economizados >= 50:
        premio = "Garrafa d'√°gua ecol√≥gica"
    else:
        premio = "Voc√™ ainda n√£o tem pontos suficientes para resgatar pr√™mios."

    print("\nüéÅ Resgate de Pr√™mios:")
    print(f"Voc√™ pode resgatar: {premio}")

 if pontos >= 200:
        recompensa = recompensas[200]
    elif pontos >= 100:
        recompensa = recompensas[100]
    elif pontos >= 50:
        recompensa = recompensas[50]
    elif pontos >= 20:
        recompensa = recompensas[20]
    else:
        recompensa = "Voc√™ n√£o tem pontos suficientes para resgatar recompensas."
    
    print(f"Voc√™ pode resgatar: {recompensa}")

pass


def calculo():
    # Fun√ß√£o para calcular os pontos com base na economia de √°gua em litros
def calcular_pontos_por_litros(litros_economizados):
    # Definir uma rela√ß√£o entre litros economizados e pontos
    pontos_por_litro = 0.5  # Cada litro economizado gera 0.5 ponto
    pontos_totais = litros_economizados * pontos_por_litro
    return pontos_totais

# Fun√ß√£o para exibir a pontua√ß√£o final
def exibir_resultado(pontos):
    print("\nüèÖ Resultado da Economia de √Ågua:")
    print(f"Voc√™ economizou {pontos/0.5} litros de √°gua e acumulou {pontos:.2f} pontos!")
    return pontos

pass

def menu():
    tentativas = 3
    print("BEM VINDO AO MENU PRINCIPAL DO ECODROPüíß.")
    #mensagem estilo minecraft
    print(random.choice(mensagens_agua))
    time.sleep(1)
    while tentativas != 0:
        resposta2 = input(
            "Qual tipo de fun√ß√£o voc√™ deseja ?? (Ranking/Calcular pontos/Atualizar conta/Deletar conta/Feedback/Resgatar recompensas) ").strip().lower()

        if resposta2 in ["ver ranking", "ranking"]:
            ranking()
            return

        elif resposta2 in ["calcular pontos", "calcular", "calculo", "pontos"]:
            calculo()
            return

        elif resposta2 in ["atualizar", "atualiza√ß√£o", "atualizar conta", "atualiza conta"]:
            atualizar()
            return

        elif resposta2 in ["deletar", "deletar conta", "excluir", "excluir conta", "apagar conta"]:
            deletar()
            return

        elif resposta2 in ["feedback", "enviar feedback", "sugestao", "sugest√£o", "critica", "cr√≠tica"]:
            feedback()
            return
        elif resposta2 in ["resgatar", "recompensa", "resgatar recompensa", "pr√™mios", "premio"]:
            resgatar()
            return

        else:
            print("Resposta inv√°lida")
            tentativas -= 1

    else:
        print("Limite de tentativas atingido. Reinicie o programa.")


class Cadastro:
    def __init__(self):
        self.email = input(
            "Digite o email que voc√™ gostaria de vincular sua conta:")
        self.quantidade = int(
            input("Informe a quantidade de pessoas na sua resid√™ncia:"))
        self.senha = input("Digite sua senha(Coloque uma senha forte):")
        self.nome_familia = input(
            "Digite o nome que ficar√° cadastrado sua fam√≠lia(COLOQUE 1 OU DOIS SOBRENOMES):")
        self.pontos = 0
        self.apartamento = int(input("Digite o n√∫mero do seu apartamento:"))
        self.verificador = input("Digite seu c√≥digo verificador:\n"
                                 "ATEN√á√ÉO,GUARDE ESSE C√ìDIGO DE UMA FORMA SEGURA,CASO VOC√ä ESQUE√áA A SENHA ELE √â A √öNICA FORMA DE CONSEGUIR ACESSAR A CONTA:")
        self.email_valido()

    # precisa passar o self como par√¢metro para conseguir pegar as info do init

    def email_valido(self):
        dominios_validos = [
            'gmail.com', 'outlook.com', 'hotmail.com',
            'yahoo.com', 'icloud.com'
        ]

        tentativas_email = 3
        while tentativas_email != 0:
            # VERIFICA SE O FORMATO DO EMAIL EST√Å ESCRITO CORRETAMENTE
            if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', self.email):
                print("FORMATO DE EMAIL INV√ÅLIDO, UTILIZE UM DOM√çNIO V√ÅLIDO")
                self.email = input("Digite novamente seu email: ").strip()
                tentativas_email -= 1
                print(f"Tentativas restantes: {tentativas_email}")

                continue  # volta pro in√≠cio do while para validar de novo,caso esteja correto,ir√° passar pelo verificador

            # VERIFICA APENAS O DOM√çNIO,SEPARA TODO O RESTO E PEGA APENAS A PARTE DO DOM√çNIO
            dominio = self.email.split('@')[1].lower()
            if dominio not in dominios_validos:
                print("Dom√≠nio n√£o aceito. Use: Gmail, Outlook, Yahoo, iCloud, etc.")
                self.email = input("Digite novamente seu email: ").strip()
                tentativas_email -= 1
                print(f"Tentativas restantes: {tentativas_email}")

                # continuar o loop sem parar
                continue

        # Se chegou aqui, formato e dom√≠nio est√£o corretos
            break

        else:
            print("Limite de tentativas atingido. Encerrando o processo de cadastro.")
            return

        self.conferir_email()

    # Agora verifica se email j√° est√° cadastrado
    def conferir_email(self):
        if self.email in dados_conta:
            print("EMAIL J√Å POSSUI UMA CONTA.")
            tentativas = 3
            while tentativas != 0:
                resposta1 = input(
                    "Deseja tentar refazer a conta ou ir para tela de login caso j√° possua conta? (refazer/login) ").strip().lower()
                if resposta1 in ["login", "tela de login", "logi"]:
                    login()
                    return
                elif resposta1 in ["refazer", "retentar", "conta", "refazer conta"]:
                    self.email = input("Digite novamente seu email: ").strip()
                    self.conferir_email()
                    return
                else:
                    print("Resposta inv√°lida")
                    tentativas -= 1
                    print(f"Tentativas restantes {tentativas}")
            else:
                print(
                    "Limite de tentativas atingido. Encerrando o processo de cadastro.")
                return
        else:
            self.conferir_ap()  # Continua o processo normalmente

    def conferir_ap(self):
        # dessa forma oq estar√° sendo analisado ser√° o valor e n√£o a chave
        if self.apartamento in dados_apartamento.values():
            print("APARTAMENTO J√Å CADASTRADO.")
            tentativas = 3
            while tentativas != 0:
                resposta1 = input(
                    "Deseja tentar refazer a conta ou ir para tela de login caso j√° possua conta ??(refazer/login)").strip().lower()
                if resposta1 in ["login", "tela de login", "logi"]:
                    login()
                    return
                elif resposta1 in ["refazer", "retentar", "conta", "refazer conta"]:
                    Cadastro()
                    return
                else:
                    print("Resposta inv√°lida")
                    tentativas -= 1
                    print(f"Tentativas restantes {tentativas}")
            else:  # ‚úÖ S√≥ imprime quando zerar tentativas
                print(
                    "Limite de tentativas atingido. Encerrando o processo de cadastro.")
        else:
            self.cadastrar_conta()

    def cadastrar_conta(self):
        # print("Bem vindo ao projeto ECODROP do condom√≠nio Village")

        dados_conta[self.email] = self.senha
        dados_familia[self.email] = self.nome_familia
        dados_quantidade[self.email] = self.quantidade
        dados_pontos[self.email] = self.pontos
        dados_apartamento[self.email] = self.apartamento
        dados_codigov[self.email] = self.verificador

        # PARA ARQUIVO TIPO JSON √â MELHOR USAR "w" pois qualquer errinho de formata√ß√£o pode quebrar o sistema
        with open(r"D:/github/PER√çODO 1/projetova1/projetova1/banco_dados.JSON", "w", encoding="utf-8") as arquivo:
            # Aqui, estamos criando um dicion√°rio com duas chaves:
            json.dump({"senha": dados_conta, "familia": dados_familia, "membros": dados_quantidade, "pontos": dados_pontos,
                       "apartamento": dados_apartamento, "verificador": dados_codigov}, arquivo, indent=4, ensure_ascii=False)
        menu()


 # Essa parte que vai realmente come√ßar o c√≥digo
 # Esse c√≥digo tem que ser escrito de cima pra baixo,mas para puxar ele tem que ser l√° embaixo,pois s√≥ assim para o c√≥digo
 # conseguir usar todas as fun√ß√µes
 #
print("OL√Å,BEM VINDO AO SISTEMA ECODROPüíß do condom√≠nio Village")

tentativas = 3  # Por exemplo, 3 tentativas permitidas
while tentativas != 0:
    tipo_servico = input(
        "QUAL TIPO DE SERVI√áO VOC√ä DESEJA ?? (LOGIN/CADASTRO) ").strip().lower()

    if tipo_servico in ["login", "entrar", "acessar", "fazer login"]:
        login()
        break  # Sai do loop se o servi√ßo for v√°lido

    elif tipo_servico in ["cadastro", "cadastrar", "criar conta", "novo cadastro"]:
        novo_cadastro = Cadastro()
        break  # Sai do loop se o servi√ßo for v√°lido

    else:
        print("Servi√ßo inv√°lido. Por favor, tente novamente.")
        tentativas -= 1
        print(f"Tentativas restantes {tentativas}")

else:
    print("Limite de tentativas atingido. Reinicie o programa.")
