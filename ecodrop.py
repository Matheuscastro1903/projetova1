# main_app.py
import customtkinter as ctk
import json
import time
import re
import random
import os
import sys
import datetime
import csv # Importado para a fun√ß√£o de salvar feedback em CSV
from tkinter import messagebox # Import messagebox for GUI alerts
import pyfiglet # Para o banner ASCII

# ==================================================================================================
# --- Configura√ß√µes Iniciais CustomTkinter e Vari√°veis Globais ---
# ==================================================================================================
ctk.set_appearance_mode("System")  # Modes: "System" (default), "Dark", "Light"
ctk.set_default_color_theme("blue")  # Themes: "blue" (default), "dark-blue", "green"

# Nomes de arquivos JSON e CSV
NOME_ARQUIVO_BANCO_DADOS = "banco_dados.JSON"
NOME_ARQUIVO_DADOS_USUARIOS = "dados_usuarios.json"
NOME_ARQUIVO_FEEDBACK_CSV = "feedback.csv"
NOME_ARQUIVO_QUESTOES_QUIZ = "questoes_agua.json"

# Mensagens di√°rias de economia de √°gua (usadas no menu)
mensagens_agua = [
    "üíß Cada gota conta. Economize √°gua!",
    "üöø Banhos curtos, planeta mais saud√°vel.",
    "üåç √Ågua √© vida. Preserve cada gota.",
    "üßº Feche a torneira ao escovar os dentes.",
    "üí¶ Pequenas atitudes salvam grandes recursos.",
    "üîß Torneiras pingando desperdi√ßam litros por dia!",
    "üå± Use a √°gua da chuva para regar plantas.",
    "‚ùå √Ågua n√£o √© infinita. Use com consci√™ncia.",
    "ü™£ Reutilize a √°gua sempre que puder.",
    "üê≥ Preserve os rios, lagos e oceanos.",
    "üìâ Menos desperd√≠cio, mais futuro.",
    "üßΩ Economize √°gua ao lavar lou√ßa ou roupa.",
    "üè° Sua casa tamb√©m pode ser sustent√°vel.",
    "üë∂ Ensine as crian√ßas a cuidar da √°gua.",
    "üíô √Ågua limpa √© direito de todos. Preserve!"
]

# ==================================================================================================
# --- Fun√ß√µes Auxiliares Comuns ---
# ==================================================================================================

def limpar_tela():
    """
    Fun√ß√£o para simular a limpeza de tela em um ambiente de terminal.
    Em uma GUI, esta fun√ß√£o n√£o √© diretamente utilizada para limpar o console,
    mas pode ser adaptada para atualizar o conte√∫do da interface, se necess√°rio.
    """
    # os.system('cls' if os.name == 'nt' else 'clear') # Descomente se quiser limpar o console real
    pass # N√£o faz nada na GUI, pois a interface √© gerenciada por frames

def barra_progresso():
    """
    Simula uma barra de progresso. Em uma GUI, idealmente seria substitu√≠da por
    um widget CTkProgressBar ou feedback visual similar.
    """
    # Em uma GUI real, voc√™ animaria um CTkProgressBar aqui.
    # Por simplicidade e para manter a compatibilidade com a ideia original, apenas uma pausa.
    time.sleep(0.5)

def gerar_codigo_resgate():
    """
    Gera um c√≥digo de resgate alfanum√©rico e o exibe em uma caixa de mensagem.
    """
    letras = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=3))
    numeros = ''.join(random.choices('0123456789', k=4))
    codigo = f"{letras}-{numeros}"
    messagebox.showinfo("C√≥digo de Resgate", f"Seu c√≥digo para resgatar a recompensa:\n{codigo}")
    return codigo

def carregar_json(filepath):
    """
    Carrega dados de um arquivo JSON. Lida com FileNotFoundError e JSONDecodeError.
    """
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        messagebox.showerror("Erro de Arquivo", f"Arquivo '{filepath}' n√£o encontrado. Por favor, crie-o ou verifique o caminho.")
        return {}
    except json.JSONDecodeError:
        messagebox.showerror("Erro de Leitura", f"Erro ao ler JSON de '{filepath}'. O arquivo pode estar corrompido ou vazio.")
        return {}
    except Exception as e:
        messagebox.showerror("Erro Desconhecido", f"Ocorreu um erro inesperado ao carregar '{filepath}': {e}")
        return {}

def salvar_json(data, filepath):
    """
    Salva dados em um arquivo JSON. Inclui uma barra de progresso simulada.
    """
    try:
        with open(filepath, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        barra_progresso() # Pode ser substitu√≠da por uma barra de progresso visual
        return True
    except Exception as e:
        messagebox.showerror("Erro de Escrita", f"N√£o foi poss√≠vel salvar em '{filepath}': {e}")
        return False

# ==================================================================================================
# --- Classe Principal do Aplicativo (Gerenciamento de Telas) ---
# ==================================================================================================

class App(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("ECODROP - Condom√≠nio Village")
        self.geometry("800x700") # Tamanho da janela principal
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        self.email_logado = None
        # self.senha_logada = None # Guardar a senha em mem√≥ria n√£o √© ideal por seguran√ßa, mas mantido para compatibilidade com fun√ß√µes existentes

        self._carregar_todos_dados() # Carrega todos os dados necess√°rios ao iniciar o app

        self._configurar_tela_inicial() # Configura a tela inicial (login/cadastro)

    def _carregar_todos_dados(self):
        """Carrega todos os dados de arquivos JSON e garante que as estruturas existam."""
        self.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS)
        self.dados_usuarios = carregar_json(NOME_ARQUIVO_DADOS_USUARIOS)

        # Inicializa se√ß√µes que podem faltar no banco_dados.JSON
        if "senha" not in self.banco_dados: self.banco_dados["senha"] = {}
        if "familia" not in self.banco_dados: self.banco_dados["familia"] = {}
        if "membros" not in self.banco_dados: self.banco_dados["membros"] = {}
        if "pontos" not in self.banco_dados: self.banco_dados["pontos"] = {}
        if "apartamento" not in self.banco_dados: self.banco_dados["apartamento"] = {}
        if "verificador" not in self.banco_dados: self.banco_dados["verificador"] = {}
        if "feedback" not in self.banco_dados: self.banco_dados["feedback"] = []
        if "usuarios" not in self.banco_dados: self.banco_dados["usuarios"] = {}

        # Inicializa se√ß√µes que podem faltar no dados_usuarios.json
        if "consumo" not in self.dados_usuarios: self.dados_usuarios["consumo"] = {}
        if "calculo_realizado" not in self.dados_usuarios: self.dados_usuarios["calculo_realizado"] = {}

    def _configurar_tela_inicial(self):
        """Cria e exibe a tela de boas-vindas com op√ß√µes de Login/Cadastro."""
        self.frame_boas_vindas = ctk.CTkFrame(self)
        self.frame_boas_vindas.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
        self.frame_boas_vindas.grid_rowconfigure((0,1,2,3), weight=1)
        self.frame_boas_vindas.grid_columnconfigure(0, weight=1)

        ascii_banner = pyfiglet.figlet_format("ECODROP")
        ctk.CTkLabel(self.frame_boas_vindas, text=ascii_banner, font=("Courier New", 24, "bold")).grid(row=0, column=0, pady=(20,0))
        ctk.CTkLabel(self.frame_boas_vindas, text="OL√Å, BEM VINDO AO SISTEMA ECODROPüíß do condom√≠nio Village", font=("Arial", 18)).grid(row=1, column=0, pady=10)

        ctk.CTkButton(self.frame_boas_vindas, text="Login", command=self._mostrar_tela_login, font=("Arial", 16)).grid(row=2, column=0, pady=10)
        ctk.CTkButton(self.frame_boas_vindas, text="Cadastre-se", command=self._mostrar_tela_cadastro, font=("Arial", 16)).grid(row=3, column=0, pady=10)

    def _mostrar_tela_login(self):
        """Simula a tela de login e redireciona para o menu se bem-sucedido."""
        # TODO: Implementar a l√≥gica de login real aqui, com valida√ß√£o de credenciais
        # Por simplicidade, vamos direto para o menu com um usu√°rio de teste fixo.
        email_teste = "teste@email.com"
        # Adicionar um usu√°rio de teste ao banco_dados se n√£o existir
        if email_teste not in self.banco_dados["senha"]:
            self.banco_dados["senha"][email_teste] = "senha123"
            self.banco_dados["familia"][email_teste] = "Fam√≠lia Teste"
            self.banco_dados["membros"][email_teste] = 3
            self.banco_dados["pontos"][email_teste] = 100
            self.banco_dados["apartamento"][email_teste] = 101
            self.banco_dados["verificador"][email_teste] = "VERIF"
            salvar_json(self.banco_dados, NOME_ARQUIVO_BANCO_DADOS)

        if email_teste in self.banco_dados["senha"]:
            self.email_logado = email_teste
            # self.senha_logada = self.banco_dados["senha"].get(email_teste) # Em um app real, n√£o armazenar√≠amos a senha assim.
            messagebox.showinfo("Login", f"Login bem-sucedido como {self.email_logado} (usu√°rio de teste).")
            self._mostrar_tela_menu()
        else:
            messagebox.showerror("Erro de Login", "Usu√°rio de teste 'teste@email.com' n√£o encontrado no banco de dados. Verifique 'banco_dados.JSON' ou crie uma conta.")
            # Poderia abrir uma tela de login real aqui.

    def _mostrar_tela_cadastro(self):
        """Simula a tela de cadastro e redireciona para o menu ap√≥s 'cadastro'."""
        # TODO: Implementar a l√≥gica de cadastro real aqui.
        messagebox.showinfo("Cadastro", "Simulando Cadastro. Redirecionando para o menu principal ap√≥s 'cadastro'.")
        self._mostrar_tela_menu() # Para fins de demonstra√ß√£o

    def _mostrar_tela_menu(self):
        """Exibe o menu principal do aplicativo, escondendo a tela anterior."""
        # Destruir todos os widgets da tela anterior
        for widget in self.winfo_children():
            widget.destroy()

        self.frame_menu = ctk.CTkFrame(self)
        self.frame_menu.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
        # Configurar grid para alinhar bot√µes
        self.frame_menu.grid_rowconfigure(list(range(12)), weight=1) # Ajuste o n√∫mero de linhas conforme necess√°rio
        self.frame_menu.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(self.frame_menu, text="BEM VINDO AO MENU PRINCIPAL DO ECODROPüíß.", font=("Arial", 20, "bold")).grid(row=0, column=0, pady=(20,10))
        ctk.CTkLabel(self.frame_menu, text=random.choice(mensagens_agua), font=("Arial", 14), wraplength=500).grid(row=1, column=0, pady=10)

        # Bot√µes do Menu (cada um chama um m√©todo para exibir sua tela espec√≠fica)
        ctk.CTkButton(self.frame_menu, text="1. Ver Ranking üèÜ", command=self._mostrar_tela_ranking, font=("Arial", 16)).grid(row=2, column=0, pady=5, sticky="ew", padx=50)
        ctk.CTkButton(self.frame_menu, text="2. Calcular Pontos üíß", command=self._mostrar_tela_calculo_pontos, font=("Arial", 16)).grid(row=3, column=0, pady=5, sticky="ew", padx=50)
        ctk.CTkButton(self.frame_menu, text="3. Atualizar Dados üîÑ", command=self._mostrar_tela_atualizar_dados, font=("Arial", 16)).grid(row=4, column=0, pady=5, sticky="ew", padx=50)
        ctk.CTkButton(self.frame_menu, text="4. Deletar Conta ‚ùå", command=self._mostrar_tela_deletar_conta, font=("Arial", 16)).grid(row=5, column=0, pady=5, sticky="ew", padx=50)
        ctk.CTkButton(self.frame_menu, text="5. Enviar Feedback ‚úâÔ∏è", command=self._mostrar_tela_feedback, font=("Arial", 16)).grid(row=6, column=0, pady=5, sticky="ew", padx=50)
        ctk.CTkButton(self.frame_menu, text="6. Resgatar Recompensas üéÅ", command=self._mostrar_tela_resgatar_pontos, font=("Arial", 16)).grid(row=7, column=0, pady=5, sticky="ew", padx=50)
        ctk.CTkButton(self.frame_menu, text="7. Visualizar Dados üìä", command=self._mostrar_tela_visualizar_dados, font=("Arial", 16)).grid(row=8, column=0, pady=5, sticky="ew", padx=50)
        ctk.CTkButton(self.frame_menu, text="8. Jogar Quiz Semanal üí°", command=self._mostrar_tela_quiz, font=("Arial", 16)).grid(row=9, column=0, pady=5, sticky="ew", padx=50)
        ctk.CTkButton(self.frame_menu, text="9. Sair do Sistema üö™", command=self.encerrar_app, font=("Arial", 16), fg_color="darkred", hover_color="red").grid(row=10, column=0, pady=5, sticky="ew", padx=50)

    # M√©todos para exibir as telas modulares (instanciam e empacotam o CTkFrame)
    def _mostrar_tela_ranking(self):
        """Exibe a tela de Ranking."""
        self.frame_menu.destroy()
        TelaRanking(self, self.email_logado).pack(expand=True, fill="both")

    def _mostrar_tela_calculo_pontos(self):
        """Exibe a tela de C√°lculo de Pontos."""
        self.frame_menu.destroy()
        TelaCalculoPontos(self, self.email_logado).pack(expand=True, fill="both")

    def _mostrar_tela_atualizar_dados(self):
        """Exibe a tela de Atualizar Dados."""
        self.frame_menu.destroy()
        TelaAtualizarDados(self, self.email_logado).pack(expand=True, fill="both")

    def _mostrar_tela_deletar_conta(self):
        """Exibe a tela de Dele√ß√£o de Conta."""
        self.frame_menu.destroy()
        TelaDeletarConta(self, self.email_logado).pack(expand=True, fill="both")

    def _mostrar_tela_feedback(self):
        """Exibe a tela de Enviar Feedback."""
        self.frame_menu.destroy()
        TelaFeedback(self, self.email_logado).pack(expand=True, fill="both")

    def _mostrar_tela_resgatar_pontos(self):
        """Exibe a tela de Resgate de Recompensas."""
        self.frame_menu.destroy()
        TelaResgatePontos(self, self.email_logado).pack(expand=True, fill="both")

    def _mostrar_tela_visualizar_dados(self):
        """Exibe a tela de Visualizar Dados."""
        self.frame_menu.destroy()
        TelaVisualizarDados(self, self.email_logado).pack(expand=True, fill="both")

    def _mostrar_tela_quiz(self):
        """Exibe a tela do Quiz Semanal."""
        self.frame_menu.destroy()
        # N√£o precisa passar senha_logada para o Quiz, apenas o email
        TelaQuiz(self, self.email_logado, NOME_ARQUIVO_QUESTOES_QUIZ).pack(expand=True, fill="both")

    def encerrar_app(self):
        """Pergunta ao usu√°rio se deseja sair e encerra o aplicativo se confirmado."""
        if messagebox.askyesno("Sair", "Tem certeza que deseja sair do sistema?"):
            self.destroy()
            sys.exit()

# ==================================================================================================
# --- Classes Modulares para as Funcionalidades do Menu ---
# ==================================================================================================

# --------------------------------------------------------------------------------------------------
# RANKING (Fun√ß√£o 'ranking' original)
# --------------------------------------------------------------------------------------------------
class TelaRanking(ctk.CTkFrame):
    """
    Interface para exibir o ranking de pontos dos usu√°rios.
    """
    def __init__(self, parent, email_login):
        super().__init__(parent)
        self.parent = parent
        self.email_login = email_login

        self.grid_rowconfigure((0, 1, 2, 3), weight=1)
        self.grid_columnconfigure(0, weight=1)

        self._mostrar_ranking()

    def _mostrar_ranking(self):
        """Cria e exibe os widgets da tela de ranking."""
        self._limpar_frame() # Limpa widgets existentes

        ctk.CTkLabel(self, text="üèÜ RANKING DE PONTOS üèÜ", font=("Arial", 24, "bold")).grid(row=0, column=0, pady=20)

        dia_do_mes = datetime.datetime.now().strftime("%d")

        # Ajustado para usar a condi√ß√£o real do dia 28, mas deixado 'True' para testes
        if dia_do_mes == "28": # Altere para 'True' para testar a qualquer dia
            self.parent.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS) # Recarrega para ter dados mais recentes
            pontos_dict = self.parent.banco_dados.get("pontos", {})
            ranking_ordenado = sorted(pontos_dict.items(), key=lambda item: item[1], reverse=True)

            # Frame rol√°vel para exibir a tabela do ranking
            frame_rolavel = ctk.CTkScrollableFrame(self, width=450, height=300)
            frame_rolavel.grid(row=1, column=0, pady=10, padx=20, sticky="nsew")
            frame_rolavel.grid_columnconfigure(0, weight=1)

            # Cabe√ßalho da tabela
            ctk.CTkLabel(frame_rolavel, text=f"{'#':<3} | {'Email':<25} | {'Pontos':>8}", font=("Arial", 14, "bold")).pack(pady=5, anchor="w", padx=10)
            ctk.CTkLabel(frame_rolavel, text="-"*45, font=("Arial", 10)).pack(anchor="w", padx=10)

            # Linhas da tabela
            for i, (email, pts) in enumerate(ranking_ordenado, start=1):
                email_display = (email[:22] + '...') if len(email) > 25 else email.ljust(25)
                ctk.CTkLabel(frame_rolavel, text=f"{str(i).ljust(3)} | {email_display} | {str(pts).rjust(8)}", font=("Arial", 12)).pack(pady=2, anchor="w", padx=10)

        else:
            ctk.CTkLabel(self, text=f"üìÖ O Ranking √© atualizado e visualizado apenas no dia 28 de cada m√™s.", font=("Arial", 16)).grid(row=1, column=0, pady=20)
            ctk.CTkLabel(self, text=f"Hoje √© {datetime.datetime.now().strftime('%d')}.", font=("Arial", 14)).grid(row=2, column=0, pady=10)

        ctk.CTkButton(self, text="Voltar ao Menu", command=self._voltar_ao_menu).grid(row=3, column=0, pady=20)

    def _voltar_ao_menu(self):
        """Retorna √† tela do menu principal."""
        self.destroy()
        self.parent._mostrar_tela_menu()

    def _limpar_frame(self):
        """Destr√≥i todos os widgets filhos deste frame."""
        for widget in self.winfo_children():
            widget.destroy()

# --------------------------------------------------------------------------------------------------
# C√ÅLCULO DE PONTOS (Fun√ß√£o 'calculo' original)
# --------------------------------------------------------------------------------------------------
class TelaCalculoPontos(ctk.CTkFrame):
    """
    Interface para calcular os pontos de economia de √°gua do usu√°rio.
    """
    def __init__(self, parent, email_login):
        super().__init__(parent)
        self.parent = parent
        self.email_login = email_login

        self.grid_rowconfigure((0, 1, 2, 3, 4, 5), weight=1)
        self.grid_columnconfigure(0, weight=1)

        self._mostrar_calculo_pontos()

    def _mostrar_calculo_pontos(self):
        """Cria e exibe os widgets da tela de c√°lculo de pontos."""
        self._limpar_frame()

        ctk.CTkLabel(self, text="üíß C√ÅLCULO DE ECONOMIA DE √ÅGUA", font=("Arial", 24, "bold")).grid(row=0, column=0, pady=20)

        dia_do_mes = datetime.datetime.now().strftime("%d")

        # Ajustado para usar a condi√ß√£o real do dia 27, mas deixado 'True' para testes
        if dia_do_mes == "27": # Altere para 'True' para testar a qualquer dia
            self.parent.dados_usuarios = carregar_json(NOME_ARQUIVO_DADOS_USUARIOS)
            self.parent.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS)

            gasto_real = self.parent.dados_usuarios["consumo"].get(self.email_login)
            verificar_calculo = self.parent.dados_usuarios["calculo_realizado"].get(self.email_login, False)
            quantidade_membros = self.parent.banco_dados["membros"].get(self.email_login, 0)

            if verificar_calculo:
                ctk.CTkLabel(self, text="Voc√™ j√° realizou o c√°lculo mensal.", font=("Arial", 16), text_color="blue").grid(row=1, column=0, pady=10)
            elif gasto_real is None:
                ctk.CTkLabel(self, text="‚ùå Gasto de √°gua n√£o registrado para este e-mail.", font=("Arial", 16), text_color="red").grid(row=1, column=0, pady=10)
                ctk.CTkLabel(self, text="Pe√ßa ao seu s√≠ndico a atualiza√ß√£o do banco de dados.", font=("Arial", 14)).grid(row=2, column=0, pady=5)
            else:
                gasto_estimado = quantidade_membros * 150 * 30 # Gasto m√©dio por pessoa: 150 litros/dia

                ctk.CTkLabel(self, text=f"Membros na resid√™ncia: {quantidade_membros}", font=("Arial", 14)).grid(row=1, column=0, pady=5, sticky="w", padx=50)
                ctk.CTkLabel(self, text=f"Gasto estimado (litros): {gasto_estimado}", font=("Arial", 14)).grid(row=2, column=0, pady=5, sticky="w", padx=50)
                ctk.CTkLabel(self, text=f"Gasto real (litros): {gasto_real}", font=("Arial", 14)).grid(row=3, column=0, pady=5, sticky="w", padx=50)

                if gasto_real < gasto_estimado:
                    ctk.CTkLabel(self, text="üéâ Parab√©ns, voc√™ economizou √°gua e ganhou pontos!", font=("Arial", 16, "bold"), text_color="green").grid(row=4, column=0, pady=10)
                    pontos_ganhos = 50
                else:
                    ctk.CTkLabel(self, text="üö´ Voc√™ n√£o economizou esse m√™s. Continue tentando!", font=("Arial", 16, "bold"), text_color="red").grid(row=4, column=0, pady=10)
                    pontos_ganhos = 0 # Ajuste se quiser dar 0 pontos para n√£o economia

                # Atualiza pontos no banco_dados.JSON
                self.parent.banco_dados["pontos"][self.email_login] = self.parent.banco_dados["pontos"].get(self.email_login, 0) + pontos_ganhos
                salvar_json(self.parent.banco_dados, NOME_ARQUIVO_BANCO_DADOS)

                # Marca o c√°lculo como realizado em dados_usuarios.json
                self.parent.dados_usuarios["calculo_realizado"][self.email_login] = True
                salvar_json(self.parent.dados_usuarios, NOME_ARQUIVO_DADOS_USUARIOS)
        else:
            ctk.CTkLabel(self, text=f"üìÖ Hoje n√£o √© dia 27, o c√°lculo de economia est√° indispon√≠vel.", font=("Arial", 16)).grid(row=1, column=0, pady=20)
            ctk.CTkLabel(self, text=f"O c√°lculo √© liberado no dia 27 de cada m√™s. Hoje √© {datetime.datetime.now().strftime('%d')}.", font=("Arial", 14)).grid(row=2, column=0, pady=10)

        ctk.CTkButton(self, text="Voltar ao Menu", command=self._voltar_ao_menu).grid(row=5, column=0, pady=20)

    def _voltar_ao_menu(self):
        """Retorna √† tela do menu principal."""
        self.destroy()
        self.parent._mostrar_tela_menu()

    def _limpar_frame(self):
        """Destr√≥i todos os widgets filhos deste frame."""
        for widget in self.winfo_children():
            widget.destroy()

# --------------------------------------------------------------------------------------------------
# ATUALIZAR DADOS (Fun√ß√£o 'atualizar' original e suas sub-fun√ß√µes)
# --------------------------------------------------------------------------------------------------
class TelaAtualizarDados(ctk.CTkFrame):
    """
    Interface para o processo de atualiza√ß√£o de dados do usu√°rio (pessoais ou da conta).
    """
    def __init__(self, parent, email_login):
        super().__init__(parent)
        self.parent = parent
        self.email_login = email_login

        self.grid_rowconfigure((0, 1, 2, 3), weight=1)
        self.grid_columnconfigure(0, weight=1)

        self._mostrar_opcoes_atualizacao()

    def _mostrar_opcoes_atualizacao(self):
        """Cria e exibe os widgets para as op√ß√µes de atualiza√ß√£o."""
        self._limpar_frame()

        ctk.CTkLabel(self, text="üîÑ ATUALIZA√á√ÉO DE DADOS üîÑ", font=("Arial", 24, "bold")).grid(row=0, column=0, pady=20)
        ctk.CTkLabel(self, text="O que voc√™ deseja atualizar?", font=("Arial", 16)).grid(row=1, column=0, pady=10)

        ctk.CTkButton(self, text="Dados da Conta (E-mail/Senha)", command=self._mostrar_tela_atualizar_conta, font=("Arial", 16)).grid(row=2, column=0, pady=10, sticky="ew", padx=100)
        ctk.CTkButton(self, text="Dados Pessoais (Membros/Fam√≠lia)", command=self._mostrar_tela_atualizar_pessoais, font=("Arial", 16)).grid(row=3, column=0, pady=10, sticky="ew", padx=100)
        ctk.CTkButton(self, text="Voltar ao Menu", command=self._voltar_ao_menu).grid(row=4, column=0, pady=30)

    def _mostrar_tela_atualizar_pessoais(self):
        """Interface para atualizar membros e nome da fam√≠lia."""
        self._limpar_frame()

        ctk.CTkLabel(self, text="ATUALIZAR DADOS PESSOAIS", font=("Arial", 20, "bold")).grid(row=0, column=0, pady=20)

        ctk.CTkLabel(self, text="Quantidade de membros na fam√≠lia:", font=("Arial", 14)).grid(row=1, column=0, pady=5)
        self.entry_membros = ctk.CTkEntry(self, placeholder_text="Ex: 3", width=200)
        self.entry_membros.grid(row=2, column=0, pady=5)

        ctk.CTkLabel(self, text="Nome da sua fam√≠lia:", font=("Arial", 14)).grid(row=3, column=0, pady=5)
        self.entry_familia = ctk.CTkEntry(self, placeholder_text="Ex: Fam√≠lia Silva", width=200)
        self.entry_familia.grid(row=4, column=0, pady=5)

        ctk.CTkButton(self, text="Confirmar Atualiza√ß√£o", command=self._processar_atualizar_pessoais, font=("Arial", 16)).grid(row=5, column=0, pady=20)
        ctk.CTkButton(self, text="Voltar", command=self._mostrar_opcoes_atualizacao).grid(row=6, column=0, pady=10)

    def _processar_atualizar_pessoais(self):
        """Processa a atualiza√ß√£o dos dados pessoais."""
        try:
            membros_novos = int(self.entry_membros.get())
            nome_novo = self.entry_familia.get().strip()

            if not (1 <= membros_novos <= 20): # Exemplo de valida√ß√£o
                messagebox.showwarning("Entrada Inv√°lida", "A quantidade de membros deve ser um n√∫mero entre 1 e 20.")
                return
            if not nome_novo:
                messagebox.showwarning("Entrada Inv√°lida", "O nome da fam√≠lia n√£o pode estar vazio.")
                return

            if messagebox.askyesno("Confirmar Atualiza√ß√£o", "Tem certeza que deseja atualizar seus dados pessoais?"):
                self.parent.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS) # Recarregar para garantir que √© o mais recente
                self.parent.banco_dados["membros"][self.email_login] = membros_novos
                self.parent.banco_dados["familia"][self.email_login] = nome_novo

                if salvar_json(self.parent.banco_dados, NOME_ARQUIVO_BANCO_DADOS):
                    messagebox.showinfo("Sucesso", "Dados pessoais atualizados com sucesso!")
                    self._voltar_ao_menu()
                else:
                    messagebox.showerror("Erro", "N√£o foi poss√≠vel salvar os dados atualizados.")
        except ValueError:
            messagebox.showerror("Erro de Entrada", "A quantidade de membros deve ser um n√∫mero inteiro.")
        except Exception as e:
            messagebox.showerror("Erro", f"Ocorreu um erro: {e}")

    def _mostrar_tela_atualizar_conta(self):
        """Interface para atualizar e-mail e/ou senha."""
        self._limpar_frame()

        ctk.CTkLabel(self, text="ATUALIZAR DADOS DA CONTA", font=("Arial", 20, "bold")).grid(row=0, column=0, pady=20)

        ctk.CTkLabel(self, text="Novo E-mail (deixe em branco para n√£o alterar):", font=("Arial", 14)).grid(row=1, column=0, pady=5)
        self.entry_novo_email = ctk.CTkEntry(self, placeholder_text="seu.novo.email@exemplo.com", width=300)
        self.entry_novo_email.grid(row=2, column=0, pady=5)

        ctk.CTkLabel(self, text="Nova Senha (deixe em branco para n√£o alterar):", font=("Arial", 14)).grid(row=3, column=0, pady=5)
        self.entry_nova_senha = ctk.CTkEntry(self, placeholder_text="**** (4 a 20 caracteres)", show="*", width=300)
        self.entry_nova_senha.grid(row=4, column=0, pady=5)

        ctk.CTkButton(self, text="Confirmar Atualiza√ß√£o", command=self._processar_atualizar_conta, font=("Arial", 16)).grid(row=5, column=0, pady=20)
        ctk.CTkButton(self, text="Voltar", command=self._mostrar_opcoes_atualizacao).grid(row=6, column=0, pady=10)

    def _processar_atualizar_conta(self):
        """Processa a atualiza√ß√£o do e-mail e/ou senha."""
        novo_email = self.entry_novo_email.get().strip()
        nova_senha = self.entry_nova_senha.get().strip()

        # Valida√ß√µes baseadas no c√≥digo de console
        if novo_email and not self._email_valido_formato(novo_email):
            messagebox.showwarning("Erro de E-mail", "Formato de e-mail inv√°lido ou dom√≠nio n√£o aceito.")
            return
        if novo_email and self._email_ja_existe(novo_email) and novo_email != self.email_login:
            messagebox.showwarning("Erro de E-mail", "Este e-mail j√° est√° cadastrado por outro usu√°rio.")
            return

        if nova_senha and not (4 <= len(nova_senha) <= 20):
            messagebox.showwarning("Erro de Senha", "A senha deve ter entre 4 e 20 caracteres.")
            return

        if not novo_email and not nova_senha:
            messagebox.showinfo("Nenhuma Altera√ß√£o", "Nenhum dado de conta foi inserido para atualiza√ß√£o.")
            return

        if messagebox.askyesno("Confirmar Atualiza√ß√£o", "Tem certeza que deseja atualizar os dados da sua conta? Esta a√ß√£o pode ser irrevers√≠vel."):
            self.parent.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS)

            email_antigo = self.email_login
            senha_antiga = self.parent.banco_dados["senha"].get(email_antigo)

            email_para_usar = novo_email if novo_email else email_antigo
            senha_para_usar = nova_senha if nova_senha else senha_antiga

            # Se o email foi alterado, precisamos mover todos os dados para a nova chave de email
            if novo_email and novo_email != email_antigo:
                # Copia os dados do email antigo para o novo email
                self.parent.banco_dados["senha"][email_para_usar] = senha_para_usar
                self.parent.banco_dados["familia"][email_para_usar] = self.parent.banco_dados["familia"].get(email_antigo)
                self.parent.banco_dados["membros"][email_para_usar] = self.parent.banco_dados["membros"].get(email_antigo)
                self.parent.banco_dados["pontos"][email_para_usar] = self.parent.banco_dados["pontos"].get(email_antigo)
                self.parent.banco_dados["apartamento"][email_para_usar] = self.parent.banco_dados["apartamento"].get(email_antigo)
                self.parent.banco_dados["verificador"][email_para_usar] = self.parent.banco_dados["verificador"].get(email_antigo)
                # Adiciona suporte para pontos do quiz (se existirem)
                if email_antigo in self.parent.banco_dados.get("usuarios", {}):
                    self.parent.banco_dados["usuarios"][email_para_usar] = self.parent.banco_dados["usuarios"][email_antigo]

                # Remove os dados do email antigo
                del self.parent.banco_dados["senha"][email_antigo]
                del self.parent.banco_dados["familia"][email_antigo]
                del self.parent.banco_dados["membros"][email_antigo]
                del self.parent.banco_dados["pontos"][email_antigo]
                del self.parent.banco_dados["apartamento"][email_antigo]
                del self.parent.banco_dados["verificador"][email_antigo]
                if email_antigo in self.parent.banco_dados.get("usuarios", {}):
                    del self.parent.banco_dados["usuarios"][email_antigo]

                # Atualiza o email logado na App principal
                self.parent.email_logado = email_para_usar
                messagebox.showinfo("Sucesso", f"E-mail e/ou senha atualizados com sucesso! Seu novo e-mail de login √©: {email_para_usar}")

            else: # Apenas a senha ou nenhum dos dois (mas a senha pode ter sido alterada)
                self.parent.banco_dados["senha"][email_para_usar] = senha_para_usar
                messagebox.showinfo("Sucesso", "Senha atualizada com sucesso!" if nova_senha else "Nenhuma altera√ß√£o feita na conta.")

            if salvar_json(self.parent.banco_dados, NOME_ARQUIVO_BANCO_DADOS):
                self._voltar_ao_menu()
            else:
                messagebox.showerror("Erro", "N√£o foi poss√≠vel salvar as altera√ß√µes da conta.")

    def _email_valido_formato(self, email):
        """Valida o formato e dom√≠nio do e-mail."""
        dominios_validos = ['gmail.com', 'outlook.com', 'hotmail.com', 'yahoo.com', 'icloud.com']
        if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
            return False
        dominio = email.split('@')[1].lower()
        if dominio not in dominios_validos:
            return False
        return True

    def _email_ja_existe(self, email):
        """Verifica se o e-mail j√° existe no banco de dados (excluindo o email_logado atual)."""
        self.parent.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS)
        return email in self.parent.banco_dados["senha"] and email != self.email_login

    def _voltar_ao_menu(self):
        """Retorna √† tela do menu principal."""
        self.destroy()
        self.parent._mostrar_tela_menu()

    def _limpar_frame(self):
        """Destr√≥i todos os widgets filhos deste frame."""
        for widget in self.winfo_children():
            widget.destroy()

# --------------------------------------------------------------------------------------------------
# DELETAR CONTA (Fun√ß√£o 'deletar' original)
# --------------------------------------------------------------------------------------------------
class TelaDeletarConta(ctk.CTkFrame):
    """
    Interface para o processo de dele√ß√£o de conta do usu√°rio.
    """
    def __init__(self, parent, email_login):
        super().__init__(parent)
        self.parent = parent
        self.email_login = email_login

        self.grid_rowconfigure((0, 1, 2, 3, 4), weight=1)
        self.grid_columnconfigure(0, weight=1)

        self._mostrar_confirmacao_delecao()

    def _mostrar_confirmacao_delecao(self):
        """Cria e exibe os widgets para a confirma√ß√£o de dele√ß√£o."""
        self._limpar_frame()

        ctk.CTkLabel(self, text="‚ö†Ô∏è ATEN√á√ÉO IMPORTANTE ‚ö†Ô∏è", font=("Arial", 24, "bold"), text_color="red").grid(row=0, column=0, pady=20)
        ctk.CTkLabel(self, text="Voc√™ est√° na aba de dele√ß√£o de conta.", font=("Arial", 16)).grid(row=1, column=0, pady=5)
        ctk.CTkLabel(self, text="Tome cuidado para n√£o realizar uma a√ß√£o indesejada!", font=("Arial", 16)).grid(row=2, column=0, pady=5)

        ctk.CTkLabel(self, text=f"Deseja deletar sua conta ({self.email_login}) do sistema ECODROP condom√≠nio Village?", font=("Arial", 16)).grid(row=3, column=0, pady=20)

        frame_botoes = ctk.CTkFrame(self, fg_color="transparent")
        frame_botoes.grid(row=4, column=0, pady=10)
        frame_botoes.grid_columnconfigure((0,1), weight=1)

        ctk.CTkButton(frame_botoes, text="Sim, Deletar Conta", command=self._confirmar_e_deletar, fg_color="red", hover_color="darkred", font=("Arial", 16)).grid(row=0, column=0, padx=10)
        ctk.CTkButton(frame_botoes, text="N√£o, Voltar ao Menu", command=self._voltar_ao_menu, font=("Arial", 16)).grid(row=0, column=1, padx=10)

    def _confirmar_e_deletar(self):
        """Processa a dele√ß√£o da conta ap√≥s a confirma√ß√£o."""
        if messagebox.askyesno("Confirmar Dele√ß√£o", "Tem certeza ABSOLUTA que deseja deletar sua conta? Esta a√ß√£o √© irrevers√≠vel!"):
            self.parent.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS)

            email_para_deletar = self.email_login
            if email_para_deletar in self.parent.banco_dados["senha"]:
                # Remove os dados do usu√°rio de todas as se√ß√µes
                # Verificando a exist√™ncia antes de deletar para evitar KeyError se a chave n√£o existir
                if email_para_deletar in self.parent.banco_dados.get("senha", {}): del self.parent.banco_dados["senha"][email_para_deletar]
                if email_para_deletar in self.parent.banco_dados.get("familia", {}): del self.parent.banco_dados["familia"][email_para_deletar]
                if email_para_deletar in self.parent.banco_dados.get("membros", {}): del self.parent.banco_dados["membros"][email_para_deletar]
                if email_para_deletar in self.parent.banco_dados.get("pontos", {}): del self.parent.banco_dados["pontos"][email_para_deletar]
                if email_para_deletar in self.parent.banco_dados.get("apartamento", {}): del self.parent.banco_dados["apartamento"][email_para_deletar]
                if email_para_deletar in self.parent.banco_dados.get("verificador", {}): del self.parent.banco_dados["verificador"][email_para_deletar]
                if email_para_deletar in self.parent.banco_dados.get("usuarios", {}): # Para dados do quiz
                    del self.parent.banco_dados["usuarios"][email_para_deletar]

                # Salva o banco de dados atualizado
                if salvar_json(self.parent.banco_dados, NOME_ARQUIVO_BANCO_DADOS):
                    messagebox.showinfo("Dele√ß√£o Conclu√≠da", "Sua conta foi deletada com sucesso. Tenha um bom dia!")
                    self.parent.destroy() # Fecha o aplicativo inteiro
                    sys.exit()
                else:
                    messagebox.showerror("Erro", "N√£o foi poss√≠vel salvar as altera√ß√µes ap√≥s a dele√ß√£o.")
            else:
                messagebox.showwarning("Erro", "Conta n√£o encontrada para dele√ß√£o.")
        else:
            messagebox.showinfo("Cancelado", "Dele√ß√£o de conta cancelada.")
            self._voltar_ao_menu()

    def _voltar_ao_menu(self):
        """Retorna √† tela do menu principal."""
        self.destroy()
        self.parent._mostrar_tela_menu()

    def _limpar_frame(self):
        """Destr√≥i todos os widgets filhos deste frame."""
        for widget in self.winfo_children():
            widget.destroy()

# --------------------------------------------------------------------------------------------------
# FEEDBACK (Fun√ß√£o 'feedback' original)
# --------------------------------------------------------------------------------------------------
class TelaFeedback(ctk.CTkFrame):
    """
    Interface para o sistema de avalia√ß√£o de servi√ßo (feedback).
    Permite ao usu√°rio deixar um coment√°rio e uma nota.
    """
    def __init__(self, parent, email_login):
        super().__init__(parent)
        self.parent = parent
        self.email_login = email_login

        self.grid_rowconfigure((0,1,2,3,4,5,6,7,8), weight=1)
        self.grid_columnconfigure(0, weight=1)

        self._criar_widgets()

    def _criar_widgets(self):
        """Cria e posiciona os elementos da interface de feedback."""
        ctk.CTkLabel(self, text="üìù SISTEMA DE AVALIA√á√ÉO DE SERVI√áO", font=("Arial", 20, "bold")).grid(row=0, column=0, pady=20)
        ctk.CTkLabel(self, text="Deixe seu coment√°rio (at√© 140 caracteres):", font=("Arial", 14)).grid(row=1, column=0, pady=5)

        self.caixa_texto_comentario = ctk.CTkTextbox(self, width=400, height=100, font=("Arial", 12))
        self.caixa_texto_comentario.grid(row=2, column=0, pady=10)
        self.caixa_texto_comentario.bind("<KeyRelease>", self._validar_comprimento_comentario)
        self.label_contador_caracteres = ctk.CTkLabel(self, text="0/140 caracteres", font=("Arial", 10), text_color="gray")
        self.label_contador_caracteres.grid(row=3, column=0, sticky="e", padx=50)

        ctk.CTkLabel(self, text="Qual nota voc√™ nos d√° (0 a 10)?", font=("Arial", 14)).grid(row=4, column=0, pady=(20, 5))

        self.slider_nota = ctk.CTkSlider(self, from_=0, to=10, number_of_steps=20, command=self._atualizar_label_nota)
        self.slider_nota.set(5.0) # Valor inicial do slider
        self.slider_nota.grid(row=5, column=0, pady=10, sticky="ew", padx=50)

        self.label_exibir_nota = ctk.CTkLabel(self, text="Nota: 5.0", font=("Arial", 14, "bold"))
        self.label_exibir_nota.grid(row=6, column=0, pady=5)

        frame_botoes = ctk.CTkFrame(self, fg_color="transparent")
        frame_botoes.grid(row=7, column=0, pady=30)
        frame_botoes.grid_columnconfigure((0,1), weight=1)

        ctk.CTkButton(frame_botoes, text="Enviar Feedback", command=self._enviar_feedback, font=("Arial", 16, "bold")).grid(row=0, column=0, padx=10)
        ctk.CTkButton(frame_botoes, text="Voltar ao Menu", command=self._voltar_ao_menu, font=("Arial", 16)).grid(row=0, column=1, padx=10)
        ctk.CTkButton(self, text="Sair do Sistema", command=self._sair_do_sistema, fg_color="red", hover_color="darkred", font=("Arial", 16)).grid(row=8, column=0, pady=5)

    def _validar_comprimento_comentario(self, event=None):
        """Valida o comprimento do coment√°rio e atualiza o contador de caracteres."""
        comentario = self.caixa_texto_comentario.get("1.0", "end-1c") # Pega todo o texto, exceto a √∫ltima quebra de linha
        tamanho = len(comentario)
        self.label_contador_caracteres.configure(text=f"{tamanho}/140 caracteres")
        if tamanho > 140:
            self.caixa_texto_comentario.configure(border_color="red", border_width=2)
            self.label_contador_caracteres.configure(text_color="red")
        else:
            self.caixa_texto_comentario.configure(border_color="gray", border_width=1)
            self.label_contador_caracteres.configure(text_color="gray")

    def _atualizar_label_nota(self, valor):
        """Atualiza o label exibindo a nota selecionada pelo slider."""
        self.label_exibir_nota.configure(text=f"Nota: {valor:.1f}")

    def _enviar_feedback(self):
        """Coleta os dados do formul√°rio, valida e salva o feedback."""
        comentario = self.caixa_texto_comentario.get("1.0", "end-1c").strip()
        nota = round(self.slider_nota.get(), 1) # Arredonda a nota para uma casa decimal

        # Valida√ß√£o do coment√°rio
        if not (0 < len(comentario) <= 140):
            messagebox.showwarning("Erro de Coment√°rio", "Por favor, digite um coment√°rio entre 1 e 140 caracteres.")
            self.caixa_texto_comentario.focus_set()
            return

        # Valida√ß√£o da nota (o slider j√° garante 0-10, mas uma valida√ß√£o extra √© segura)
        if not (0 <= nota <= 10):
            messagebox.showwarning("Erro de Nota", "A nota deve estar entre 0 e 10.")
            return

        # Salva o feedback no arquivo CSV
        try:
            with open(NOME_ARQUIVO_FEEDBACK_CSV, mode="a", newline="", encoding="utf-8") as arquivo:
                escritor = csv.writer(arquivo)
                escritor.writerow([self.email_login, comentario, nota])
            messagebox.showinfo("Sucesso", "Feedback salvo com sucesso! Obrigado pela sua avalia√ß√£o.")
            self._limpar_campos() # Limpa os campos ap√≥s o envio
        except Exception as e:
            messagebox.showerror("Erro ao Salvar", f"N√£o foi poss√≠vel salvar o feedback: {e}")

    def _limpar_campos(self):
        """Limpa os campos do formul√°rio de feedback."""
        self.caixa_texto_comentario.delete("1.0", "end")
        self.slider_nota.set(5.0)
        self._atualizar_label_nota(5.0)
        self.label_contador_caracteres.configure(text="0/140 caracteres", text_color="gray")
        self.caixa_texto_comentario.configure(border_color="gray", border_width=1)

    def _voltar_ao_menu(self):
        """Retorna √† tela do menu principal."""
        self.destroy()
        self.parent._mostrar_tela_menu()

    def _sair_do_sistema(self):
        """Encerra o aplicativo ap√≥s confirma√ß√£o."""
        if messagebox.askyesno("Sair", "Tem certeza que deseja sair do sistema?"):
            self.parent.destroy()
            sys.exit()

# --------------------------------------------------------------------------------------------------
# RESGATAR RECOMPENSAS (Fun√ß√£o 'resgatar' original)
# --------------------------------------------------------------------------------------------------
class TelaResgatePontos(ctk.CTkFrame):
    """
    Interface para resgate de recompensas utilizando pontos.
    """
    def __init__(self, parent, email_login):
        super().__init__(parent)
        self.parent = parent
        self.email_login = email_login

        self.grid_rowconfigure((0,1,2,3), weight=1)
        self.grid_columnconfigure(0, weight=1)

        self.dados_recompensas = {
            "1": {"nome": "Milhas", "custo": 150},
            "2": {"nome": "Desconto no condom√≠nio", "custo": 100},
            "3": {"nome": "Voucher", "custo": 80},
            "4": {"nome": "Cupons", "custo": 60},
            "5": {"nome": "Descontos", "custo": 50},
            "6": {"nome": "Cr√©ditos de celular", "custo": 40}
        }
        self._criar_widgets()
        self._atualizar_exibicao_pontos() # Exibe o saldo inicial de pontos

    def _criar_widgets(self):
        """Cria e posiciona os elementos da interface de resgate."""
        ctk.CTkLabel(self, text="üéÅ TABELA DE RECOMPENSAS üéÅ", font=("Arial", 24, "bold")).grid(row=0, column=0, pady=20)

        self.label_pontos = ctk.CTkLabel(self, text="Seus pontos: --", font=("Arial", 16, "bold"), text_color="blue")
        self.label_pontos.grid(row=1, column=0, pady=10)

        frame_recompensas = ctk.CTkFrame(self)
        frame_recompensas.grid(row=2, column=0, pady=20, padx=20, sticky="ew")
        frame_recompensas.grid_columnconfigure(0, weight=1)

        for i, (num, recompensa) in enumerate(self.dados_recompensas.items()):
            texto_recompensa = f"{recompensa['nome']} ({recompensa['custo']} pts)"
            ctk.CTkButton(
                frame_recompensas,
                text=texto_recompensa,
                command=lambda n=num: self._resgatar_recompensa(n),
                font=("Arial", 14)
            ).grid(row=i, column=0, pady=5, padx=10, sticky="ew")

        ctk.CTkButton(self, text="Voltar ao Menu", command=self._voltar_ao_menu).grid(row=3, column=0, pady=20)
        ctk.CTkButton(self, text="Sair do Sistema", command=self._sair_do_sistema, fg_color="red", hover_color="darkred").grid(row=4, column=0, pady=5)

    def _atualizar_exibicao_pontos(self):
        """Atualiza o texto do saldo de pontos na interface."""
        self.parent.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS) # Sempre busca a vers√£o mais recente
        pontos = self.parent.banco_dados["pontos"].get(self.email_login, 0)
        self.label_pontos.configure(text=f"Seus pontos: {pontos}")

    def _resgatar_recompensa(self, opcao_escolhida):
        """Processa o resgate de uma recompensa, deduzindo pontos."""
        info_recompensa = self.dados_recompensas.get(opcao_escolhida)
        if not info_recompensa:
            messagebox.showwarning("Op√ß√£o Inv√°lida", "Por favor, selecione uma recompensa v√°lida.")
            return

        custo = info_recompensa['custo']
        nome = info_recompensa['nome']
        pontos_atuais = self.parent.banco_dados["pontos"].get(self.email_login, 0)

        if pontos_atuais >= custo:
            self.parent.banco_dados["pontos"][self.email_login] = pontos_atuais - custo
            if salvar_json(self.parent.banco_dados, NOME_ARQUIVO_BANCO_DADOS):
                self._atualizar_exibicao_pontos() # Atualiza o display de pontos imediatamente
                messagebox.showinfo("Resgate Realizado", f"üéâ Voc√™ resgatou: {nome}\n‚úÖ Seu novo saldo de pontos √©: {self.parent.banco_dados['pontos'][self.email_login]}")
                gerar_codigo_resgate() # Exibe o c√≥digo de resgate em outra caixa de mensagem
            else:
                messagebox.showerror("Erro ao Salvar", "N√£o foi poss√≠vel atualizar seu saldo de pontos.")
        else:
            messagebox.showwarning("Saldo Insuficiente", f"‚ö†Ô∏è Voc√™ n√£o possui saldo suficiente para resgatar {nome}. Pontos necess√°rios: {custo}")

    def _voltar_ao_menu(self):
        """Retorna √† tela do menu principal."""
        self.destroy()
        self.parent._mostrar_tela_menu()

    def _sair_do_sistema(self):
        """Encerra o aplicativo ap√≥s confirma√ß√£o."""
        if messagebox.askyesno("Sair", "Tem certeza que deseja sair do sistema?"):
            self.parent.destroy()
            sys.exit()

# --------------------------------------------------------------------------------------------------
# VISUALIZAR DADOS (Fun√ß√£o 'mostrar_dados' original)
# --------------------------------------------------------------------------------------------------
class TelaVisualizarDados(ctk.CTkFrame):
    """
    Interface para exibir os dados do usu√°rio.
    """
    def __init__(self, parent, email_login):
        super().__init__(parent)
        self.parent = parent
        self.email_login = email_login

        self.grid_rowconfigure((0, 1, 2, 3, 4, 5, 6, 7), weight=1)
        self.grid_columnconfigure(0, weight=1)

        self._mostrar_dados_usuario()

    def _mostrar_dados_usuario(self):
        """Cria e exibe os widgets com os dados do usu√°rio."""
        self._limpar_frame()

        ctk.CTkLabel(self, text="üìä SEUS DADOS DA CONTA üìä", font=("Arial", 24, "bold")).grid(row=0, column=0, pady=20)

        self.parent.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS) # Recarrega para ter os dados mais recentes

        email = self.email_login
        membros = self.parent.banco_dados["membros"].get(email, "N√£o dispon√≠vel")
        pontos = self.parent.banco_dados["pontos"].get(email, "N√£o dispon√≠vel")
        apartamento = self.parent.banco_dados["apartamento"].get(email, "N√£o dispon√≠vel")
        familia = self.parent.banco_dados["familia"].get(email, "N√£o dispon√≠vel")
        pontos_quiz = self.parent.banco_dados.get("usuarios", {}).get(email, {}).get("pontos_quiz", 0)


        ctk.CTkLabel(self, text=f"‚Ä¢ E-mail Cadastrado: {email}", font=("Arial", 16)).grid(row=1, column=0, pady=5, sticky="w", padx=50)
        ctk.CTkLabel(self, text=f"‚Ä¢ Quantidade de Membros: {membros}", font=("Arial", 16)).grid(row=2, column=0, pady=5, sticky="w", padx=50)
        ctk.CTkLabel(self, text=f"‚Ä¢ Pontos Acumulados (Economia): {pontos}", font=("Arial", 16)).grid(row=3, column=0, pady=5, sticky="w", padx=50)
        ctk.CTkLabel(self, text=f"‚Ä¢ Pontos Acumulados (Quiz): {pontos_quiz}", font=("Arial", 16)).grid(row=4, column=0, pady=5, sticky="w", padx=50)
        ctk.CTkLabel(self, text=f"‚Ä¢ Apartamento: {apartamento}", font=("Arial", 16)).grid(row=5, column=0, pady=5, sticky="w", padx=50)
        ctk.CTkLabel(self, text=f"‚Ä¢ Nome da Fam√≠lia: {familia}", font=("Arial", 16)).grid(row=6, column=0, pady=5, sticky="w", padx=50)

        ctk.CTkButton(self, text="Voltar ao Menu", command=self._voltar_ao_menu).grid(row=7, column=0, pady=30)

    def _voltar_ao_menu(self):
        """Retorna √† tela do menu principal."""
        self.destroy()
        self.parent._mostrar_tela_menu()

    def _limpar_frame(self):
        """Destr√≥i todos os widgets filhos deste frame."""
        for widget in self.winfo_children():
            widget.destroy()

# --------------------------------------------------------------------------------------------------
# QUIZ SEMANAL (Classe 'Quiz' original, adaptada para CustomTkinter)
# --------------------------------------------------------------------------------------------------
class TelaQuiz(ctk.CTkFrame):
    """
    Interface para o Quiz Semanal sobre o uso da √°gua.
    """
    def __init__(self, parent, email_login, caminho_arquivo_questoes):
        super().__init__(parent)
        self.parent = parent
        self.email_login = email_login
        self.caminho_arquivo = caminho_arquivo_questoes
        self.questoes = [] # Inicializado vazio, carregado em _iniciar_fluxo_quiz
        self.pontuacao_atual = 0
        self.indice_questao_atual = 0
        self.questoes_selecionadas = []
        self.opcoes_embaralhadas = []
        self.num_questoes_desejadas = 5 # N√∫mero fixo de quest√µes no quiz

        self.grid_rowconfigure((0, 1, 2, 3, 4, 5, 6), weight=1)
        self.grid_columnconfigure(0, weight=1)

        self._iniciar_fluxo_quiz()

    def _carregar_questoes(self):
        """Carrega as quest√µes do arquivo JSON especificado."""
        try:
            with open(self.caminho_arquivo, 'r', encoding='utf-8') as f:
                questoes_carregadas = json.load(f)
            # messagebox.showinfo("Quiz", f"‚úÖ Quest√µes carregadas com sucesso! Total: {len(questoes_carregadas)}")
            return questoes_carregadas
        except FileNotFoundError:
            messagebox.showerror("Erro Quiz", f"Arquivo de quest√µes '{self.caminho_arquivo}' n√£o encontrado.")
            return None
        except json.JSONDecodeError:
            messagebox.showerror("Erro Quiz", f"Erro ao ler JSON de '{self.caminho_arquivo}'. O arquivo pode estar corrompido ou vazio.")
            return None
        except Exception as e:
            messagebox.showerror("Erro Quiz", f"Ocorreu um erro inesperado ao carregar '{self.caminho_arquivo}': {e}")
            return None

    def _iniciar_fluxo_quiz(self):
        """Inicia o fluxo do quiz, verificando a data e carregando quest√µes."""
        self._limpar_frame()

        ctk.CTkLabel(self, text="üí° Quiz Semanal - Gasto Consciente", font=("Arial", 24, "bold")).grid(row=0, column=0, pady=20)

        hoje = datetime.datetime.now()
        # Verificar se √© segunda-feira (0 = segunda-feira)
        if hoje.weekday() == 0: # 0 √© Segunda-feira
            self.questoes = self._carregar_questoes() # Carrega as quest√µes quando o quiz √© iniciado

            if not self.questoes:
                ctk.CTkLabel(self, text="‚ö†Ô∏è Nenhuma quest√£o carregada. Verifique o arquivo JSON.", font=("Arial", 16)).grid(row=1, column=0, pady=10)
                ctk.CTkButton(self, text="Voltar ao Menu", command=self._voltar_ao_menu).grid(row=2, column=0, pady=20)
                return

            if len(self.questoes) < self.num_questoes_desejadas:
                messagebox.showwarning("Aten√ß√£o Quiz", f"Apenas {len(self.questoes)} quest√£o(√µes) dispon√≠vel(is) no arquivo. O quiz ter√° menos quest√µes.")
                self.num_questoes_desejadas = len(self.questoes) # Ajusta o n√∫mero de quest√µes se n√£o houver o suficiente

            self.questoes_selecionadas = random.sample(self.questoes, self.num_questoes_desejadas)
            self._exibir_questao() # Inicia a exibi√ß√£o da primeira quest√£o
        else:
            ctk.CTkLabel(self, text=f"üïí O Quiz Semanal est√° dispon√≠vel apenas √†s **segundas-feiras**.", font=("Arial", 16)).grid(row=1, column=0, pady=10)
            ctk.CTkLabel(self, text=f"Hoje √© **{hoje.strftime('%A')}**.", font=("Arial", 14)).grid(row=2, column=0, pady=5)
            ctk.CTkButton(self, text="Voltar ao Menu", command=self._voltar_ao_menu).grid(row=3, column=0, pady=20)

    def _exibir_questao(self):
        """Exibe a quest√£o atual e as op√ß√µes de resposta."""
        self._limpar_frame()

        if self.indice_questao_atual < len(self.questoes_selecionadas):
            questao = self.questoes_selecionadas[self.indice_questao_atual]

            ctk.CTkLabel(self, text=f"Quest√£o {self.indice_questao_atual + 1}/{self.num_questoes_desejadas}:", font=("Arial", 16, "bold")).grid(row=0, column=0, pady=(20, 5), sticky="w", padx=20)
            ctk.CTkLabel(self, text=questao['pergunta'], font=("Arial", 14), wraplength=700).grid(row=1, column=0, pady=(0, 20), sticky="w", padx=20)

            self.opcoes_embaralhadas = random.sample(questao['opcoes'], len(questao['opcoes']))
            self.variavel_radio = ctk.StringVar(value="") # Vari√°vel para armazenar a op√ß√£o selecionada

            # Cria os bot√µes de r√°dio para as op√ß√µes
            for i, opcao in enumerate(self.opcoes_embaralhadas):
                radio_button = ctk.CTkRadioButton(self, text=opcao, variable=self.variavel_radio, value=opcao, font=("Arial", 14))
                radio_button.grid(row=2 + i, column=0, pady=5, sticky="w", padx=40)

            ctk.CTkButton(self, text="Confirmar Resposta", command=self._verificar_resposta, font=("Arial", 16)).grid(row=2 + len(self.opcoes_embaralhadas), column=0, pady=30)
        else:
            self._finalizar_quiz() # Se todas as quest√µes foram respondidas, finaliza o quiz

    def _verificar_resposta(self):
        """Verifica a resposta selecionada e atualiza a pontua√ß√£o."""
        resposta_selecionada = self.variavel_radio.get()
        if not resposta_selecionada:
            messagebox.showwarning("Aten√ß√£o", "Por favor, selecione uma op√ß√£o antes de confirmar.")
            return

        questao = self.questoes_selecionadas[self.indice_questao_atual]

        if resposta_selecionada == questao['resposta_correta']:
            self.pontuacao_atual += 1
            messagebox.showinfo("Resultado", "‚úÖ Correto!")
        else:
            messagebox.showinfo("Resultado", f"‚ùå Errado. A resposta correta era: {questao['resposta_correta']}")

        self.indice_questao_atual += 1
        # Pequeno atraso antes de exibir a pr√≥xima quest√£o ou finalizar
        self.after(500, self._exibir_questao)

    def _finalizar_quiz(self):
        """Exibe a pontua√ß√£o final do quiz e atualiza os pontos do usu√°rio."""
        self._limpar_frame()
        ctk.CTkLabel(self, text="üéâ FIM DO QUIZ üéâ", font=("Arial", 28, "bold")).grid(row=0, column=0, pady=20)
        ctk.CTkLabel(self, text=f"Sua pontua√ß√£o final foi: {self.pontuacao_atual} de {self.num_questoes_desejadas}", font=("Arial", 18)).grid(row=1, column=0, pady=10)
        ctk.CTkLabel(self, text="üí° Continue aprendendo e economizando √°gua!", font=("Arial", 14)).grid(row=2, column=0, pady=10)

        # Atualiza a pontua√ß√£o do usu√°rio no banco de dados principal
        self._atualizar_pontuacao_usuario(self.email_login, self.pontuacao_atual)

        ctk.CTkButton(self, text="Voltar ao Menu", command=self._voltar_ao_menu).grid(row=3, column=0, pady=30)

    def _atualizar_pontuacao_usuario(self, email_usuario, pontos_ganhos):
        """Adiciona os pontos ganhos no quiz √† pontua√ß√£o total do usu√°rio no banco de dados."""
        # Recarrega o banco de dados para garantir que est√° atualizado
        self.parent.banco_dados = carregar_json(NOME_ARQUIVO_BANCO_DADOS)

        # Garante que as estruturas 'usuarios' e 'pontos_quiz' existam
        if "usuarios" not in self.parent.banco_dados:
            self.parent.banco_dados["usuarios"] = {}
        if email_usuario not in self.parent.banco_dados["usuarios"]:
            self.parent.banco_dados["usuarios"][email_usuario] = {"pontos_quiz": 0}
        if "pontos_quiz" not in self.parent.banco_dados["usuarios"][email_usuario]:
             self.parent.banco_dados["usuarios"][email_usuario]["pontos_quiz"] = 0

        self.parent.banco_dados["usuarios"][email_usuario]["pontos_quiz"] += pontos_ganhos

        if salvar_json(self.parent.banco_dados, NOME_ARQUIVO_BANCO_DADOS):
            messagebox.showinfo("Pontos Atualizados", f"‚ú® Voc√™ ganhou {pontos_ganhos} pontos no quiz!\nTotal de pontos do quiz: {self.parent.banco_dados['usuarios'][email_usuario]['pontos_quiz']}")
        else:
            messagebox.showerror("Erro ao Salvar Pontos", "N√£o foi poss√≠vel atualizar sua pontua√ß√£o no banco de dados.")

    def _voltar_ao_menu(self):
        """Retorna √† tela do menu principal."""
        self.destroy()
        self.parent._mostrar_tela_menu()

    def _limpar_frame(self):
        """Destr√≥i todos os widgets filhos deste frame."""
        for widget in self.winfo_children():
            widget.destroy()


# ==================================================================================================
# --- Fun√ß√µes e Classes de Console (Mantidas como Placeholders) ---
# ==================================================================================================
# Estas s√£o as fun√ß√µes e classes originais do seu c√≥digo que ainda operam via console.
# No contexto da GUI, elas n√£o s√£o chamadas diretamente pelos bot√µes do menu.
# Foram mantidas aqui como placeholders para compatibilidade com partes do seu c√≥digo que as referenciam.

# Carrega os dados para as fun√ß√µes de console no in√≠cio do script.
# Em um sistema GUI completo, esses dados seriam gerenciados pela classe principal 'App'.
# Mover este bloco para dentro da classe App ou remover se as fun√ß√µes de console n√£o forem mais usadas.
# Fora da classe App, essas vari√°veis globais de console n√£o ser√£o as mesmas que as vari√°veis internas do App.
# Por simplicidade, vou manter o App como a fonte da verdade para os dados.
# As fun√ß√µes de console (login, menu, etc.) que est√£o abaixo foram movidas para placeholders
# para n√£o conflitar com a l√≥gica da GUI.

# Removi o bloco de leitura inicial do banco_dados.JSON, pois a classe App j√° faz isso.

def login():
    """Placeholder para a fun√ß√£o de login original (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'login' original do console n√£o √© usada diretamente na interface gr√°fica. Use a tela de Login da GUI.")
    pass

def menu(email_login, senha_login):
    """Placeholder para a fun√ß√£o de menu original (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'menu' original do console n√£o √© usada diretamente na interface gr√°fica. Use a tela de Menu da GUI.")
    pass

def atualizar(email_login, senha_login):
    """Placeholder para a fun√ß√£o de atualizar dados (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'atualizar' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def atualizar_pessoais(email_login, senha_login):
    """Placeholder para a fun√ß√£o de atualizar dados pessoais (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'atualizar_pessoais' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def tipo_atualizacao(email_login, senha_login):
    """Placeholder para a fun√ß√£o de tipo de atualiza√ß√£o (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'tipo_atualizacao' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def email_valido(email_login, senha_login):
    """Placeholder para a fun√ß√£o de valida√ß√£o de email (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'email_valido' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def conferir_email(email_novo, email_login, senha_login):
    """Placeholder para a fun√ß√£o de conferir email (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'conferir_email' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def conferir_senha(email_novo, email_login, senha_login):
    """Placeholder para a fun√ß√£o de conferir senha (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'conferir_senha' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def atualizar_conta(email_novo, senha_nova, email_login, senha_login):
    """Placeholder para a fun√ß√£o de atualizar conta (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'atualizar_conta' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def valido_apenas_email(email_login, senha_login):
    """Placeholder para a fun√ß√£o de valida√ß√£o de apenas email (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'valido_apenas_email' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def conferir_apenas_email(email_novo, email_login, senha_login):
    """Placeholder para a fun√ß√£o de conferir apenas email (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'conferir_apenas_email' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def atualizar_apenas_email(email_novo, email_login, senha_login):
    """Placeholder para a fun√ß√£o de atualizar apenas email (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'atualizar_apenas_email' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def valido_apenas_senha(email_login):
    """Placeholder para a fun√ß√£o de valida√ß√£o de apenas senha (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'valido_apenas_senha' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def atualizar_apenas_senha(senha_nova, email_login):
    """Placeholder para a fun√ß√£o de atualizar apenas senha (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'atualizar_apenas_senha' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

def mostrar_dados(email_login, senha_login):
    """Placeholder para a fun√ß√£o de mostrar dados (console)."""
    messagebox.showinfo("Info", "A fun√ß√£o 'mostrar_dados' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

class Cadastro:
    """Placeholder para a classe de Cadastro original (console)."""
    def __init__(self):
        messagebox.showinfo("Info", "A classe 'Cadastro' original do console n√£o √© usada diretamente na interface gr√°fica. Use a tela de Cadastro da GUI.")
    # M√©todos como conferir_codigo, conferir_senha, email_valido, conferir_email, conferir_ap, cadastrar_conta
    # precisariam ser reescritos ou adaptados para uma vers√£o GUI.
    pass

class Condominio:
    """Placeholder para a classe de Condominio original (console)."""
    def __init__(self):
        messagebox.showinfo("Info", "A classe 'Condominio' original do console n√£o √© usada diretamente na interface gr√°fica.")
    pass

# Estas fun√ß√µes de console (ranking, resgatar, calculo, feedback, deletar) foram substitu√≠das pelas classes da GUI.
# Mantenho as defini√ß√µes para evitar NameErrors se alguma parte do c√≥digo antigo ainda as referenciar por engano,
# mas elas n√£o ser√£o chamadas pela interface gr√°fica principal.
def ranking(email_login, senha_login):
    messagebox.showinfo("Info", "A fun√ß√£o 'ranking' original do console n√£o √© usada diretamente na interface gr√°fica. Use a tela de Ranking da GUI.")
def resgatar(email_login, senha_login):
    messagebox.showinfo("Info", "A fun√ß√£o 'resgatar' original do console n√£o √© usada diretamente na interface gr√°fica. Use a tela de Resgate de Pontos da GUI.")
def calculo(email_login, senha_login):
    messagebox.showinfo("Info", "A fun√ß√£o 'calculo' original do console n√£o √© usada diretamente na interface gr√°fica. Use a tela de C√°lculo de Pontos da GUI.")
def feedback(email_login, senha_login):
    messagebox.showinfo("Info", "A fun√ß√£o 'feedback' original do console n√£o √© usada diretamente na interface gr√°fica. Use a tela de Feedback da GUI.")
import csv # Re-importar para a fun√ß√£o salvar_feedback, se ela ainda for usada em algum lugar.
def salvar_feedback(email, senha, comentario, nota):
    messagebox.showinfo("Info", "A fun√ß√£o 'salvar_feedback' original do console n√£o √© usada diretamente na interface gr√°fica. O salvamento √© feito na classe TelaFeedback.")
def deletar(email_login, senha_login):
    messagebox.showinfo("Info", "A fun√ß√£o 'deletar' original do console n√£o √© usada diretamente na interface gr√°fica. Use a tela de Deletar Conta da GUI.")


# ==================================================================================================
# --- Execu√ß√£o Principal do Aplicativo ---
# ==================================================================================================
if __name__ == "__main__":
    # Garante que os arquivos JSON/CSV necess√°rios existam ou s√£o criados com estruturas b√°sicas.
    # Isso evita FileNotFoundError no primeiro uso.
    print("Verificando arquivos de dados...")
    for filename in [NOME_ARQUIVO_BANCO_DADOS, NOME_ARQUIVO_DADOS_USUARIOS, NOME_ARQUIVO_QUESTOES_QUIZ]:
        if not os.path.exists(filename) or os.path.getsize(filename) == 0:
            print(f"Criando/inicializando arquivo: {filename}")
            with open(filename, 'w', encoding='utf-8') as f:
                if filename == NOME_ARQUIVO_BANCO_DADOS:
                    json.dump({"senha": {}, "familia": {}, "membros": {}, "pontos": {}, "apartamento": {}, "verificador": {}, "feedback": [], "usuarios": {}}, f, indent=4)
                elif filename == NOME_ARQUIVO_DADOS_USUARIOS:
                    json.dump({"consumo": {}, "calculo_realizado": {}}, f, indent=4)
                elif filename == NOME_ARQUIVO_QUESTOES_QUIZ:
                    # Adiciona uma quest√£o de exemplo se o arquivo estiver vazio
                    json.dump([
                        {"pergunta": "Qual a principal fonte de √°gua pot√°vel do planeta?", "opcoes": ["Oceanos", "Rios e Lagos", "Glaciares e calotas polares", "√Ågua subterr√¢nea"], "resposta_correta": "Glaciares e calotas polares"},
                        {"pergunta": "Quanto tempo dura um banho ideal para economizar √°gua?", "opcoes": ["15 minutos", "10 minutos", "5 minutos", "Mais de 20 minutos"], "resposta_correta": "5 minutos"},
                        {"pergunta": "O que voc√™ deve fazer ao escovar os dentes para economizar √°gua?", "opcoes": ["Deixar a torneira aberta", "Usar um copo de √°gua e fechar a torneira", "Escovar os dentes no chuveiro", "Lavar a boca diretamente na torneira"], "resposta_correta": "Usar um copo de √°gua e fechar a torneira"},
                        {"pergunta": "Qual a melhor forma de lavar a lou√ßa para economizar √°gua?", "opcoes": ["Lavar com a torneira sempre aberta", "Enxaguar tudo de uma vez ap√≥s ensaboar", "Usar m√°quina de lavar lou√ßa para poucas pe√ßas", "Lavar cada pe√ßa individualmente"], "resposta_correta": "Enxaguar tudo de uma vez ap√≥s ensaboar"},
                        {"pergunta": "Qual o papel do descarte correto de lixo no combate √† polui√ß√£o da √°gua?", "opcoes": ["N√£o tem rela√ß√£o", "Ajuda a poluir rios", "Impede que o lixo contamine rios e oceanos", "Apenas contribui para o entupimento de bueiros"], "resposta_correta": "Impede que o lixo contamine rios e oceanos"},
                        {"pergunta": "Quanto de √°gua √© desperdi√ßado por uma torneira pingando por dia?", "opcoes": ["1 litro", "10 litros", "Mais de 40 litros", "Menos de 1 litro"], "resposta_correta": "Mais de 40 litros"}
                    ], f, indent=4)
            print(f"Arquivo '{filename}' criado/inicializado com sucesso.")
        else:
            print(f"Arquivo '{filename}' j√° existe e n√£o est√° vazio.")

    # Cria o arquivo CSV para feedback se n√£o existir ou estiver vazio
    if not os.path.exists(NOME_ARQUIVO_FEEDBACK_CSV) or os.path.getsize(NOME_ARQUIVO_FEEDBACK_CSV) == 0:
        print(f"Criando/inicializando arquivo: {NOME_ARQUIVO_FEEDBACK_CSV}")
        with open(NOME_ARQUIVO_FEEDBACK_CSV, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['email', 'comentario', 'nota']) # Escreve o cabe√ßalho
        print(f"Arquivo '{NOME_ARQUIVO_FEEDBACK_CSV}' criado/inicializado com sucesso.")
    else:
        print(f"Arquivo '{NOME_ARQUIVO_FEEDBACK_CSV}' j√° existe e n√£o est√° vazio.")

    # Inicia a aplica√ß√£o CustomTkinter
    app = App()
    app.mainloop()