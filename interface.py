import customtkinter as ctk
from PIL import Image
import json
import csv
import time
import re
import random
from datetime import datetime, timedelta

mensagens_agua = [
    "üíß Cada gota conta. Economize √°gua!",
    "üöø Banhos curtos, planeta mais saud√°vel.",
    "üåç √Ågua √© vida. Preserve cada gota.",
    "üßº Feche a torneira ao escovar os dentes.",
    "üí¶ Pequenas atitudes salvam grandes recursos.",
    "üîß Torneiras pingando desperdi√ßam litros por dia!",
    "üå± Use a √°gua da chuva para regar plantas.",
    "‚ùå √Ågua n√£o √© infinita. Use com consci√™ncia.",
    "ü™£ Reutilize a √°gua sempre que puder.",
    "üê≥ Preserve os rios, lagos e oceanos.",
    "üìâ Menos desperd√≠cio, mais futuro.",
    "üßΩ Economize √°gua ao lavar lou√ßa ou roupa.",
    "üè° Sua casa tamb√©m pode ser sustent√°vel.",
    "üë∂ Ensine as crian√ßas a cuidar da √°gua.",
    "üíô √Ågua limpa √© direito de todos. Preserve!"
]

# Lista de pr√™mios dispon√≠veis (pode ser carregada de um JSON ou CSV tamb√©m)
premios_disponiveis = [
    {"nome": "Voucher de R$20 em delivery", "custo": 200},
    {"nome": "Desconto de 10% na conta de √°gua", "custo": 500},
    {"nome": "Kit de sementes para horta caseira", "custo": 150},
    {"nome": "E-book sobre sustentabilidade", "custo": 100},
    {"nome": "Doa√ß√£o de 50L de √°gua para causas sociais", "custo": 250},
    {"nome": "Copo reutiliz√°vel EcoDrop", "custo": 300}
]

# Inicializa as estruturas de dados globais
dados_conta = {}
dados_familia = {}
dados_quantidade = {}
dados_pontos = {}
dados_apartamento = {}
dados_codigov = {}
dados_questoes_quiz = []
dados_ultimo_quiz = {}


# Tenta carregar os dados do arquivo JSON
try:
    with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
        # Quando json.load √© usado, o arquivo JSON √© transformado em um dicion√°rio Python
        """
        O objetivo desta parte do c√≥digo √© abrir o arquivo JSON e salvar os dicion√°rios em Python, facilitando a manipula√ß√£o.
        """
        arquivo_lido = json.load(arquivo)
        dados_conta = arquivo_lido.get("senha", {})
        dados_familia = arquivo_lido.get("familia", {})
        dados_quantidade = arquivo_lido.get("membros", {})
        dados_pontos = arquivo_lido.get("pontos", {})
        dados_apartamento = arquivo_lido.get("apartamento", {})
        dados_codigov = arquivo_lido.get("verificador", {})
        dados_questoes_quiz = arquivo_lido.get("questoes_quiz", [])
        dados_ultimo_quiz = arquivo_lido.get("ultimo_quiz", {})

except FileNotFoundError:
    # Se o arquivo n√£o existir, cria um com a estrutura b√°sica
    print("WARNING: banco_dados.JSON n√£o encontrado. Criando novo arquivo.")
    with open(r"banco_dados.JSON", "w", encoding="utf-8") as arquivo:
        json.dump({"senha": {}, "familia": {}, "membros": {}, "pontos": {}, "apartamento": {}, "verificador": {}, "questoes_quiz": [], "ultimo_quiz": {}}, arquivo, indent=4, ensure_ascii=False)
except json.JSONDecodeError:
    # Se o arquivo JSON estiver vazio ou malformado, inicializa com dados vazios
    print("WARNING: banco_dados.JSON est√° vazio ou malformado. Inicializando com dados vazios.")
    with open(r"banco_dados.JSON", "w", encoding="utf-8") as arquivo:
        json.dump({"senha": {}, "familia": {}, "membros": {}, "pontos": {}, "apartamento": {}, "verificador": {}, "questoes_quiz": [], "ultimo_quiz": {}}, arquivo, indent=4, ensure_ascii=False)


# Fun√ß√£o para permitir apenas a digita√ß√£o de n√∫meros
def validar_numeros(novo_texto):
    """Fun√ß√£o utilizada para permitir que o usu√°rio digite apenas n√∫meros, melhorando o tratamento de erros."""
    return novo_texto.isdigit() or novo_texto == ""

# Fun√ß√£o para permitir apenas a digita√ß√£o de letras e espa√ßos
def validar_letras_espacos(novo_texto):
    """Fun√ß√£o utilizada para permitir que o usu√°rio digite apenas letras e espa√ßos, melhorando o tratamento de erros."""
    return all(c.isalpha() or c.isspace() for c in novo_texto) or novo_texto == ""

def aviso_sistema():
    """Fun√ß√£o utilizada para exibir o frame_aviso, que aparecer√° apenas se o cadastro for conclu√≠do com sucesso."""
    frame_cadastro.pack_forget()
    frame_aviso.pack(fill="both", expand=True)

def voltar_inicial():
    """Fun√ß√£o utilizada para retornar √† tela inicial, caso o usu√°rio tenha entrado na op√ß√£o errada."""
    # Oculta todos os frames de funcionalidade
    frame_cadastro.pack_forget()
    frame_login.pack_forget()
    frame_adm.pack_forget()
    frame_sobrenos.pack_forget()
    frame_aviso.pack_forget()

    # Reexibe os frames iniciais
    frame_topo.pack(fill="x")
    frame_conteudo.pack(fill="both", expand=True)
    frame_lateral.pack(side="left", fill="y")
    frame_principal.pack(side="right", fill="both", expand=True, padx=30, pady=30)
    frame_rodape.pack(fill="x", side="bottom")


def mostrar_login():
    """Fun√ß√£o utilizada para exibir o frame de login."""
    frame_topo.pack_forget()
    frame_conteudo.pack_forget()
    frame_lateral.pack_forget()
    frame_principal.pack_forget()
    frame_rodape.pack_forget()
    frame_aviso.pack_forget() # Oculta o frame de aviso se estiver vis√≠vel
    frame_login.pack(fill="both", expand=True)
    label_avisologin.configure(text=" ", text_color="blue") # Limpa mensagens anteriores
    entrada_emaillogin.delete(0, ctk.END) # Limpa o campo de email
    entrada_senhalogin.delete(0, ctk.END) # Limpa o campo de senha


def conferir_logar(entrada_emaillogin, entrada_senhalogin):
    """Fun√ß√£o utilizada para verificar se h√° campos em branco ao clicar no bot√£o de login."""
    email = entrada_emaillogin.get().strip()
    senha = entrada_senhalogin.get().strip()
    if email == "" or senha == "":
        label_avisologin.configure(text="Preencha todos os campos.", text_color="red")
        return

    login(email, senha, label_avisologin)

def login(email, senha, label_avisologin):
    """Fun√ß√£o utilizada para verificar se o email e a senha est√£o corretos, e ent√£o navegar para o menu principal."""
    global dados_conta # Garante acesso global aos dados atualizados

    try:
        with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
            arquivo_lido = json.load(arquivo)
            dados_conta = arquivo_lido.get("senha", {})
    except Exception as e:
        label_avisologin.configure(text=f"Erro ao carregar dados: {e}", text_color="red")
        return

    if email in dados_conta:
        if dados_conta[email] == senha:
            mostrar_menu(email, senha)
            return
        else:
            label_avisologin.configure(text="EMAIL OU SENHA INCORRETO.\nContate o suporte para recuperar sua senha", text_color="red")
            return
    else:
        label_avisologin.configure(text="EMAIL N√ÉO CADASTRADO.\nV√° para a tela de cadastro", text_color="red")
        return

def mostrar_cadastro():
    """Fun√ß√£o utilizada para exibir o frame de cadastro."""
    # Oculta os frames principais
    frame_topo.pack_forget()
    frame_conteudo.pack_forget()
    frame_lateral.pack_forget()
    frame_principal.pack_forget()
    frame_rodape.pack_forget()
    frame_aviso.pack_forget() # Oculta o frame de aviso se estiver vis√≠vel

    frame_cadastro.pack(fill="both", expand=True)
    label_aviso.configure(text=" ", text_color="blue") # Limpa mensagens anteriores
    # Limpa os campos de entrada
    entrada_email.delete(0, ctk.END)
    entrada_nome.delete(0, ctk.END)
    entrada_senha.delete(0, ctk.END)
    entrada_qmembros.delete(0, ctk.END)
    entrada_numeroap.delete(0, ctk.END)
    entrada_verificador.delete(0, ctk.END)


def conferir_cadastrar(entrada_email_widget, entrada_nome_widget, entrada_senha_widget,
                        entrada_qmembros_widget, entrada_numeroap_widget, entrada_verificador_widget, label_aviso_widget):
    """
    Esta fun√ß√£o verifica se os campos de entrada est√£o preenchidos corretamente
    e chama a classe Cadastro para registrar a conta.
    """
    email = entrada_email_widget.get().strip()
    nome_familia = entrada_nome_widget.get().strip()
    senha = entrada_senha_widget.get().strip()
    quantidade_pessoas_str = entrada_qmembros_widget.get().strip()
    apartamento_str = entrada_numeroap_widget.get().strip()
    verificador = entrada_verificador_widget.get().strip()

    # Verifica√ß√£o inicial para campos vazios
    if not email or not nome_familia or not senha or not quantidade_pessoas_str or not apartamento_str or not verificador:
        label_aviso_widget.configure(text="Todos os campos devem ser preenchidos.", text_color="red")
        return

    try:
        quantidade_pessoas = int(quantidade_pessoas_str)
        apartamento = int(apartamento_str)
    except ValueError:
        label_aviso_widget.configure(text="Quantidade de membros e Apartamento devem ser n√∫meros.", text_color="red")
        return

    # Valida√ß√£o do comprimento da senha
    if not (4 <= len(senha) <= 20):
        label_aviso_widget.configure(text="A senha deve ter entre 4 e 20 caracteres.", text_color="red")
        return

    # Valida√ß√£o do comprimento do c√≥digo verificador
    if not (4 <= len(verificador) <= 20):
        label_aviso_widget.configure(text="O c√≥digo verificador deve ter entre 4 e 20 caracteres.", text_color="red")
        return

    # Cria o objeto Cadastro, que lida com valida√ß√µes adicionais e salvamento
    Cadastro(email, quantidade_pessoas, senha, nome_familia, apartamento, verificador, label_aviso_widget)


def modo_adm():
    """Fun√ß√£o utilizada para exibir o frame_adm, quando o usu√°rio desejar entrar no modo administrador."""
    frame_topo.pack_forget()
    frame_conteudo.pack_forget()
    frame_lateral.pack_forget()
    frame_principal.pack_forget()
    frame_rodape.pack_forget()
    frame_adm.pack(fill="both", expand=True)


def entrar_modoadm():
    """L√≥gica para entrar no modo administrador. A ser implementada."""
    print("Entrar modo ADM - L√≥gica a ser implementada")
    pass


def sobre_nos():
    """Fun√ß√£o utilizada para exibir o frame_sobrenos (Contando a hist√≥ria do projeto EcoDrop)."""
    frame_topo.pack_forget()
    frame_conteudo.pack_forget()
    frame_lateral.pack_forget()
    frame_principal.pack_forget()
    frame_rodape.pack_forget()
    frame_sobrenos.pack(fill="both", expand=True)


def mostrar_menu(email, senha):
    """Fun√ß√£o utilizada para exibir o frame_menu, onde o usu√°rio ver√° as funcionalidades dispon√≠veis do programa."""
    # Destr√≥i todos os widgets da janela principal para recriar o menu
    for widget in janela.winfo_children():
        widget.destroy()

    # Frame principal que envolve o menu lateral e o conte√∫do din√¢mico
    frame_menu = ctk.CTkFrame(janela, fg_color="#ffffff")

    # Topo do sistema com t√≠tulo
    frame_topo_menu = ctk.CTkFrame(frame_menu, fg_color="#1A73E8", height=80)
    frame_topo_menu.pack(fill="x")

    titulo = ctk.CTkLabel(frame_topo_menu, text="EcoDrop", fg_color="#1A73E8", text_color="white",
                              font=("Arial", 24, "bold"))
    titulo.pack(pady=20)

    # Menu lateral
    frame_lateral_menu = ctk.CTkFrame(frame_menu, fg_color="white", width=200)
    frame_lateral_menu.pack(side="left", fill="y")

    # Frame de conte√∫do principal (onde as funcionalidades ser√£o exibidas)
    frame_conteudo_menu = ctk.CTkFrame(frame_menu, fg_color="#f0f2f5")
    frame_conteudo_menu.pack(fill="both", expand=True)

    # Frame principal para o conte√∫do din√¢mico do menu
    frame_principalmenu = ctk.CTkFrame(frame_conteudo_menu, fg_color="#ffffff")
    frame_principalmenu.pack(fill="both", expand=True, padx=30, pady=30)

    # Fun√ß√£o auxiliar para redefinir o conte√∫do do frame principal do menu para a vista padr√£o de boas-vindas
    def reset_principal_menu_content():
        for widget in frame_principalmenu.winfo_children():
            widget.destroy()

        texto_bem_vindo = ctk.CTkLabel(frame_principalmenu, text="Bem-vindo ao EcoDrop",
                                         fg_color="#ffffff", text_color="#202124", font=("Arial", 18, "bold"))
        texto_bem_vindo.pack(pady=(0, 20))

        texto_instrucao = ctk.CTkLabel(frame_principalmenu,
                                         text=random.choice(mensagens_agua),
                                         fg_color="#ffffff", text_color="#5f6368",
                                         wraplength=500, justify="left", font=("Arial", 12))
        texto_instrucao.pack()

        imagem_menu_principal = Image.open("fotos/mascoteprincipall.png")
        ctk_imagem_menu_principal = ctk.CTkImage(light_image=imagem_menu_principal, dark_image=imagem_menu_principal, size=(400, 400))

        label_menu_principal_image = ctk.CTkLabel(frame_principalmenu, image=ctk_imagem_menu_principal, text="")
        label_menu_principal_image.pack()


    # ---- Bot√µes do Menu Lateral ----
    # Cada bot√£o chama sua respectiva fun√ß√£o, passando o frame_principalmenu e a fun√ß√£o de reset como callback
    botao1 = ctk.CTkButton(frame_lateral_menu, text="üèÜ Ranking mensal", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: mostrar_ranking(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao1.pack(fill="x", pady=(20, 10), padx=20)

    botao2 = ctk.CTkButton(frame_lateral_menu, text="üéÅ Resgatar pr√™mios", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: resgatar_premio(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao2.pack(fill="x", pady=10, padx=20)

    botao3 = ctk.CTkButton(frame_lateral_menu, text="üßÆ C√°lculo de pontos", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: calculo_pontuacao(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao3.pack(fill="x", pady=10, padx=20)

    botao4 = ctk.CTkButton(frame_lateral_menu, text="üß† Quiz semanal", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: quiz_semanal(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao4.pack(fill="x", pady=10, padx=20)

    botao5 = ctk.CTkButton(frame_lateral_menu, text="üìò √Årea educativa", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: area_educativa(email, senha, frame_menu), cursor="hand2")
    botao5.pack(fill="x", pady=10, padx=20)

    botao6 = ctk.CTkButton(frame_lateral_menu, text="üìä Mostrar dados", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: mostrar_dados(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao6.pack(fill="x", pady=10, padx=20)

    botao7 = ctk.CTkButton(frame_lateral_menu, text="üîÑ Atualizar dados", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: atualizar_dados(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao7.pack(fill="x", pady=10, padx=20)

    botao8 = ctk.CTkButton(frame_lateral_menu, text="üóë Deletar conta", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: deletar_conta(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao8.pack(fill="x", pady=10, padx=20)

    botao9 = ctk.CTkButton(frame_lateral_menu, text="‚úçÔ∏è Enviar feedback", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: feedback(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao9.pack(fill="x", pady=10, padx=20)

    # Conte√∫do inicial para o frame_principalmenu
    reset_principal_menu_content()

    # Frame do rodap√©
    frame_rodape_menu = ctk.CTkFrame(frame_menu, fg_color="#f0f0f0", height=30)
    frame_rodape_menu.pack(fill="x", side="bottom")

    texto_rodape_menu = ctk.CTkLabel(
    frame_rodape_menu, text="Vers√£o 2.0 ‚Ä¢ Suporte: ecodropsuporte@gmail.com", text_color="#5f6368", font=("Arial", 10))
    texto_rodape_menu.pack()

    frame_menu.pack(fill="both", expand=True)


def mostrar_dados(email, senha, frame_principalmenu, reset_callback):
    """
    üìä Fun√ß√£o: Mostrar Dados
    Exibe os principais dados da conta do usu√°rio (exceto senha e c√≥digo verificador por seguran√ßa).
    Utilizada para que o usu√°rio possa revisar as informa√ß√µes do seu cadastro.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üìä Seus Dados",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    global dados_familia, dados_quantidade, dados_pontos, dados_apartamento # Acessa dados globais

    user_family = dados_familia.get(email, "N/A")
    user_members = dados_quantidade.get(email, "N/A")
    user_points = dados_pontos.get(email, "N/A")
    user_apartment = dados_apartamento.get(email, "N/A")

    data_text = f"""
    Email: {email}
    Nome da Fam√≠lia: {user_family}
    Membros da Fam√≠lia: {user_members}
    Pontos Acumulados: {user_points}
    N√∫mero do Apartamento: {user_apartment}
    """
    ctk.CTkLabel(frame_principalmenu, text=data_text,
                 font=("Arial", 14), text_color="#333333", justify="left").pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def atualizar_dados(email, senha, frame_principalmenu, reset_callback):
    """
    üîÑ Fun√ß√£o: Atualizar Dados
    Permite ao usu√°rio atualizar o nome da fam√≠lia, quantidade de membros e senha.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üîÑ Atualizar Dados",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    # Carrega dados atuais
    global dados_familia, dados_quantidade, dados_conta
    nome_atual = dados_familia.get(email, "")
    membros_atuais = dados_quantidade.get(email, "")

    ctk.CTkLabel(frame_principalmenu, text="Preencha os campos que deseja atualizar:",
                 font=("Arial", 14), text_color="#333333").pack(pady=(0, 10))

    # Campo Nome da Fam√≠lia
    label_nome_familia = ctk.CTkLabel(frame_principalmenu, text="Nome da Fam√≠lia:",
                                       font=("Arial", 12, "bold"), text_color="#5f6368", anchor="w")
    label_nome_familia.pack(fill="x", padx=50, pady=(10, 0))
    entrada_nome_familia = ctk.CTkEntry(frame_principalmenu, width=300)
    entrada_nome_familia.insert(0, nome_atual)
    entrada_nome_familia.pack(padx=50, pady=(0, 10))

    # Campo Quantidade de Membros
    label_membros = ctk.CTkLabel(frame_principalmenu, text="Quantidade de Membros:",
                                  font=("Arial", 12, "bold"), text_color="#5f6368", anchor="w")
    label_membros.pack(fill="x", padx=50, pady=(10, 0))
    entrada_membros = ctk.CTkEntry(frame_principalmenu, width=300, validate="key",
                                   validatecommand=(janela.register(validar_numeros), "%P"))
    entrada_membros.insert(0, str(membros_atuais))
    entrada_membros.pack(padx=50, pady=(0, 10))

    # Campo Nova Senha (opcional)
    label_nova_senha = ctk.CTkLabel(frame_principalmenu, text="Nova Senha (deixe em branco para n√£o alterar):",
                                     font=("Arial", 12, "bold"), text_color="#5f6368", anchor="w")
    label_nova_senha.pack(fill="x", padx=50, pady=(10, 0))
    entrada_nova_senha = ctk.CTkEntry(frame_principalmenu, width=300, show="*")
    entrada_nova_senha.pack(padx=50, pady=(0, 10))

    label_mensagem_atualizar = ctk.CTkLabel(frame_principalmenu, text="", text_color="red", font=("Arial", 12))
    label_mensagem_atualizar.pack(pady=(0, 10))

    def salvar_atualizacao_acao():
        novo_nome = entrada_nome_familia.get().strip()
        nova_qtde_membros_str = entrada_membros.get().strip()
        nova_senha = entrada_nova_senha.get().strip()

        if not novo_nome or not nova_qtde_membros_str:
            label_mensagem_atualizar.configure(text="Nome da fam√≠lia e quantidade de membros s√£o obrigat√≥rios.", text_color="red")
            return

        try:
            nova_qtde_membros = int(nova_qtde_membros_str)
            if nova_qtde_membros <= 0:
                label_mensagem_atualizar.configure(text="Quantidade de membros deve ser maior que zero.", text_color="red")
                return
        except ValueError:
            label_mensagem_atualizar.configure(text="Quantidade de membros deve ser um n√∫mero v√°lido.", text_color="red")
            return

        if nova_senha and not (4 <= len(nova_senha) <= 20):
            label_mensagem_atualizar.configure(text="A nova senha deve ter entre 4 e 20 caracteres.", text_color="red")
            return

        try:
            with open(r"banco_dados.JSON", "r+", encoding="utf-8") as f:
                data = json.load(f)

                data["familia"][email] = novo_nome
                data["membros"][email] = nova_qtde_membros
                if nova_senha: # S√≥ atualiza a senha se um novo valor for fornecido
                    data["senha"][email] = nova_senha

                # Atualiza as vari√°veis globais
                dados_familia[email] = novo_nome
                dados_quantidade[email] = nova_qtde_membros
                if nova_senha:
                    dados_conta[email] = nova_senha

                f.seek(0)
                json.dump(data, f, indent=4, ensure_ascii=False)
                f.truncate()
            label_mensagem_atualizar.configure(text="Dados atualizados com sucesso!", text_color="green")
            entrada_nova_senha.delete(0, ctk.END) # Limpa o campo da senha ap√≥s a atualiza√ß√£o
        except Exception as e:
            label_mensagem_atualizar.configure(text=f"Erro ao atualizar dados: {e}", text_color="red")

    botao_salvar = ctk.CTkButton(frame_principalmenu, text="Salvar Atualiza√ß√µes",
                                 fg_color="#1A73E8", text_color="white",
                                 command=salvar_atualizacao_acao)
    botao_salvar.pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def deletar_conta(email, senha, frame_principalmenu, reset_callback):
    """
    üóë Fun√ß√£o: Deletar Conta
    Permite ao usu√°rio excluir sua conta permanentemente do sistema.
    Ap√≥s a confirma√ß√£o, os dados s√£o removidos e o usu√°rio precisar√° se cadastrar novamente.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üóë Deletar Conta",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    label_confirmacao = ctk.CTkLabel(frame_principalmenu, text="ATEN√á√ÉO: Esta a√ß√£o √© irrevers√≠vel!\nDeseja realmente deletar sua conta?",
                                      font=("Arial", 14, "bold"), text_color="red")
    label_confirmacao.pack(pady=20)

    def confirmar_delecao_action():
        global dados_conta, dados_familia, dados_quantidade, dados_pontos, dados_apartamento, dados_codigov, dados_ultimo_quiz
        try:
            with open(r"banco_dados.JSON", "r+", encoding="utf-8") as arquivo:
                data = json.load(arquivo)
                if email in data["senha"]:
                    del data["senha"][email]
                    del data["familia"][email]
                    del data["membros"][email]
                    del data["pontos"][email]
                    del data["apartamento"][email]
                    del data["verificador"][email]
                    if email in data["ultimo_quiz"]: # Remove o registro do quiz tamb√©m
                        del data["ultimo_quiz"][email]


                    # Atualiza os dicion√°rios globais para refletir as mudan√ßas imediatamente
                    dados_conta = data.get("senha", {})
                    dados_familia = data.get("familia", {})
                    dados_quantidade = data.get("membros", {})
                    dados_pontos = data.get("pontos", {})
                    dados_apartamento = data.get("apartamento", {})
                    dados_codigov = data.get("verificador", {})
                    dados_ultimo_quiz = data.get("ultimo_quiz", {})


                    arquivo.seek(0)  # Volta para o in√≠cio do arquivo
                    json.dump(data, arquivo, indent=4, ensure_ascii=False)
                    arquivo.truncate() # Remove o restante do arquivo

                    label_confirmacao.configure(text="Sua conta foi deletada com sucesso.", text_color="green")
                    # Ap√≥s a exclus√£o, desloga e vai para a tela inicial
                    janela.after(1000, lambda: voltar_inicial()) # Atraso para a mensagem ser vis√≠vel
                else:
                    label_confirmacao.configure(text="Erro: Conta n√£o encontrada.", text_color="red")
        except Exception as e:
            label_confirmacao.configure(text=f"Erro ao deletar conta: {e}", text_color="red")


    botao_confirmar_delecao = ctk.CTkButton(frame_principalmenu, text="Confirmar Dele√ß√£o",
                                           fg_color="red", hover_color="#cc0000",
                                           command=confirmar_delecao_action)
    botao_confirmar_delecao.pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def feedback(email, senha, frame_principalmenu, reset_callback):
    """
    ‚úçÔ∏è Fun√ß√£o: Feedback
    Permite ao usu√°rio enviar uma opini√£o com at√© 140 caracteres e uma nota de 0 a 10.
    Serve para avaliar o sistema e coletar sugest√µes de melhoria.
    """
    # Limpa os widgets existentes no frame de conte√∫do principal
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="‚úçÔ∏è Enviar Feedback",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    label_instrucao = ctk.CTkLabel(frame_principalmenu, text="Por favor, deixe sua opini√£o sobre o sistema EcoDrop:",
                                    font=("Arial", 14), text_color="#333333")
    label_instrucao.pack(pady=(0, 10))

    # Campo de Entrada de Texto do Feedback
    label_feedback_texto = ctk.CTkLabel(frame_principalmenu, text="Seu Feedback (at√© 140 caracteres):",
                                         font=("Arial", 12, "bold"), text_color="#5f6368", anchor="w")
    label_feedback_texto.pack(fill="x", padx=50, pady=(10, 0))
    entrada_feedback = ctk.CTkEntry(frame_principalmenu, width=400, height=80)
    entrada_feedback.pack(padx=50, pady=(0, 10))

    # Escala de Avalia√ß√£o
    label_nota = ctk.CTkLabel(frame_principalmenu, text="Sua nota para o sistema (0 a 10):",
                              font=("Arial", 12, "bold"), text_color="#5f6368", anchor="w")
    label_nota.pack(fill="x", padx=50, pady=(10, 0))
    entrada_nota = ctk.CTkEntry(frame_principalmenu, width=100, validate="key",
                                validatecommand=(janela.register(lambda text: text.isdigit() and (len(text) <= 2 and (int(text) >= 0 and int(text) <= 10) if text.strip() else True) or text == ""), "%P"))
    entrada_nota.pack(padx=50, pady=(0, 20), anchor="w")

    # Label para mensagens de valida√ß√£o
    label_mensagem_feedback = ctk.CTkLabel(frame_principalmenu, text="", text_color="red", font=("Arial", 12))
    label_mensagem_feedback.pack(pady=(0, 10))

    def enviar_feedback_acao():
        feedback_text = entrada_feedback.get().strip()
        nota_text = entrada_nota.get().strip()

        if not feedback_text or not nota_text:
            label_mensagem_feedback.configure(text="Por favor, preencha todos os campos.", text_color="red")
            return

        try:
            nota = int(nota_text)
            if not (0 <= nota <= 10):
                label_mensagem_feedback.configure(text="A nota deve ser entre 0 e 10.", text_color="red")
                return
        except ValueError:
            label_mensagem_feedback.configure(text="A nota deve ser um n√∫mero inteiro.", text_color="red")
            return

        if len(feedback_text) > 140:
            label_mensagem_feedback.configure(text="O feedback n√£o pode exceder 140 caracteres.", text_color="red")
            return

        try:
            with open("feedback.csv", "a+", newline="", encoding="utf-8") as f: # Usa "a+" para ler e anexar
                f.seek(0) # Move para o in√≠cio do arquivo para verificar seu tamanho
                is_empty = f.read() == ''
                if is_empty: # Se o arquivo estiver vazio, escreve o cabe√ßalho
                    csv_writer = csv.writer(f)
                    csv_writer.writerow(["Email", "Feedback", "Nota", "Data/Hora"])
                # Escreve os dados
                csv_writer = csv.writer(f) # Re-cria o writer para a posi√ß√£o atual
                csv_writer.writerow([email, feedback_text, nota, time.strftime("%Y-%m-%d %H:%M:%S")])
            label_mensagem_feedback.configure(text="Feedback enviado com sucesso! Agradecemos sua colabora√ß√£o.", text_color="green")
            entrada_feedback.delete(0, ctk.END)
            entrada_nota.delete(0, ctk.END)
        except Exception as e:
            label_mensagem_feedback.configure(text=f"Erro ao salvar feedback: {e}", text_color="red")


    botao_enviar = ctk.CTkButton(frame_principalmenu, text="Enviar Feedback",
                                 fg_color="#1A73E8", text_color="white",
                                 command=enviar_feedback_acao)
    botao_enviar.pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def calculo_pontuacao(email, senha, frame_principalmenu, reset_callback):
    """
    üßÆ Fun√ß√£o: C√°lculo de Pontos
    Calcula pontos com base nos litros economizados, n√∫mero de moradores e consumo m√©dio.
    Os pontos s√£o convertidos em benef√≠cios (ex: vouchers, descontos, milhas).
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üßÆ C√°lculo de Pontos",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    ctk.CTkLabel(frame_principalmenu, text="Informe seu consumo di√°rio (em litros) para calcular pontos:",
                 font=("Arial", 14), text_color="#333333").pack(pady=(0, 10))

    label_consumo = ctk.CTkLabel(frame_principalmenu, text="Consumo Di√°rio (Litros):",
                                  font=("Arial", 12, "bold"), text_color="#5f6368", anchor="w")
    label_consumo.pack(fill="x", padx=50, pady=(10, 0))

    entrada_consumo = ctk.CTkEntry(frame_principalmenu, width=200, validate="key",
                                   validatecommand=(janela.register(validar_numeros), "%P"))
    entrada_consumo.pack(padx=50, pady=(0, 10), anchor="w")

    label_resultado_pontos = ctk.CTkLabel(frame_principalmenu, text="", font=("Arial", 14, "bold"), text_color="green")
    label_resultado_pontos.pack(pady=(10, 0))

    label_mensagem_calculo = ctk.CTkLabel(frame_principalmenu, text="", text_color="red", font=("Arial", 12))
    label_mensagem_calculo.pack(pady=(0, 10))

    def calcular_pontos_acao():
        consumo_str = entrada_consumo.get().strip()
        if not consumo_str:
            label_mensagem_calculo.configure(text="Por favor, insira o consumo di√°rio.", text_color="red")
            return

        try:
            consumo_diario = int(consumo_str)
            if consumo_diario < 0:
                label_mensagem_calculo.configure(text="O consumo n√£o pode ser negativo.", text_color="red")
                return

            global dados_pontos, dados_quantidade # Acessa pontos e quantidade de membros
            membros = dados_quantidade.get(email, 1) # Pega a quantidade de membros, padr√£o 1 se n√£o encontrar

            # L√≥gica de c√°lculo de pontos simplificada:
            # Consumo ideal per capita (ex: 100 litros/dia)
            consumo_ideal_total = 100 * membros
            pontos_ganhos = 0

            if consumo_diario < consumo_ideal_total:
                litros_economizados = consumo_ideal_total - consumo_diario
                pontos_ganhos = int(litros_economizados / 10) # 1 ponto a cada 10 litros economizados

            if pontos_ganhos > 0:
                dados_pontos[email] = dados_pontos.get(email, 0) + pontos_ganhos
                # Atualiza o JSON com os novos pontos
                try:
                    with open(r"banco_dados.JSON", "r+", encoding="utf-8") as f:
                        data = json.load(f)
                        data["pontos"][email] = dados_pontos[email]
                        f.seek(0)
                        json.dump(data, f, indent=4, ensure_ascii=False)
                        f.truncate()
                    label_resultado_pontos.configure(text=f"Parab√©ns! Voc√™ ganhou {pontos_ganhos} pontos. Total: {dados_pontos[email]}", text_color="green")
                    label_mensagem_calculo.configure(text="")
                except Exception as e:
                    label_mensagem_calculo.configure(text=f"Erro ao salvar pontos: {e}", text_color="red")
            else:
                label_resultado_pontos.configure(text="Nenhum ponto ganho desta vez. Continue economizando!", text_color="#5f6368")
                label_mensagem_calculo.configure(text="Seu consumo foi maior ou igual ao ideal. Tente reduzir mais!", text_color="orange")

        except ValueError:
            label_mensagem_calculo.configure(text="Consumo di√°rio deve ser um n√∫mero v√°lido.", text_color="red")

    botao_calcular = ctk.CTkButton(frame_principalmenu, text="Calcular Pontos",
                                   fg_color="#1A73E8", text_color="white",
                                   command=calcular_pontos_acao)
    botao_calcular.pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def resgatar_premio(email, senha, frame_principalmenu, reset_callback):
    """
    üéÅ Fun√ß√£o: Resgatar Pr√™mios
    Permite ao usu√°rio resgatar recompensas usando seus pontos acumulados.
    Verifica se o saldo √© suficiente antes de confirmar o resgate.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üéÅ Resgatar Pr√™mios",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    global dados_pontos # Acessa os pontos globais para mostrar o saldo atual

    pontos_atuais = dados_pontos.get(email, 0)
    label_pontos_saldo = ctk.CTkLabel(frame_principalmenu, text=f"Seus pontos atuais: {pontos_atuais} üåü",
                                       font=("Arial", 16, "bold"), text_color="#28a745")
    label_pontos_saldo.pack(pady=(0, 20))

    label_instrucao = ctk.CTkLabel(frame_principalmenu, text="Escolha um pr√™mio para resgatar:",
                                    font=("Arial", 14), text_color="#333333")
    label_instrucao.pack(pady=(0, 10))

    # Frame para os pr√™mios com scroll
    scroll_frame = ctk.CTkScrollableFrame(frame_principalmenu, width=500, height=300, fg_color="#f8f9fa")
    scroll_frame.pack(pady=10, padx=20, fill="both", expand=True)

    for i, premio in enumerate(premios_disponiveis):
        premio_frame = ctk.CTkFrame(scroll_frame, fg_color="white", corner_radius=10, border_width=1, border_color="#e0e0e0")
        premio_frame.pack(fill="x", pady=5, padx=10)

        label_premio_nome = ctk.CTkLabel(premio_frame, text=premio["nome"], font=("Arial", 14, "bold"), anchor="w", text_color="#1A73E8")
        label_premio_nome.pack(side="left", padx=10, pady=5)

        label_premio_custo = ctk.CTkLabel(premio_frame, text=f"Custo: {premio['custo']} pontos", font=("Arial", 12), text_color="#6c757d")
        label_premio_custo.pack(side="left", padx=10, pady=5)

        # Usamos uma fun√ß√£o lambda com argumentos padr√£o para capturar o valor correto de 'premio'
        botao_resgatar = ctk.CTkButton(premio_frame, text="Resgatar", fg_color="#ffc107", text_color="black",
                                       command=lambda p=premio: realizar_resgate(email, p, label_pontos_saldo, frame_principalmenu, reset_callback))
        botao_resgatar.pack(side="right", padx=10, pady=5)

    label_mensagem_resgate = ctk.CTkLabel(frame_principalmenu, text="", text_color="red", font=("Arial", 12))
    label_mensagem_resgate.pack(pady=(10, 0))

    def realizar_resgate(email_usuario, premio_selecionado, label_saldo, main_frame, reset_cb):
        global dados_pontos

        pontos_disp = dados_pontos.get(email_usuario, 0)
        custo_premio = premio_selecionado["custo"]

        if pontos_disp >= custo_premio:
            dados_pontos[email_usuario] -= custo_premio
            # Atualiza o arquivo JSON
            try:
                with open(r"banco_dados.JSON", "r+", encoding="utf-8") as f:
                    data = json.load(f)
                    data["pontos"][email_usuario] = dados_pontos[email_usuario]
                    f.seek(0)
                    json.dump(data, f, indent=4, ensure_ascii=False)
                    f.truncate()
                label_mensagem_resgate.configure(text=f"Pr√™mio '{premio_selecionado['nome']}' resgatado com sucesso!", text_color="green")
                label_saldo.configure(text=f"Seus pontos atuais: {dados_pontos[email_usuario]} üåü") # Atualiza o saldo na GUI
            except Exception as e:
                label_mensagem_resgate.configure(text=f"Erro ao salvar: {e}", text_color="red")
        else:
            label_mensagem_resgate.configure(text="Pontos insuficientes para resgatar este pr√™mio.", text_color="red")
        
        # Pode adicionar um log de resgate de pr√™mios aqui, se desejar.

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def mostrar_ranking(email, senha, frame_principalmenu, reset_callback):
    """
    üèÜ Fun√ß√£o: Ranking Mensal
    Exibe uma lista com as fam√≠lias que mais economizaram √°gua no m√™s, ordenada por pontos.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üèÜ Ranking Mensal",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    global dados_pontos, dados_familia # Acessa os dados globais

    # Carrega dados atualizados do JSON para garantir consist√™ncia
    try:
        with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
            arquivo_lido = json.load(arquivo)
            dados_pontos = arquivo_lido.get("pontos", {})
            dados_familia = arquivo_lido.get("familia", {})
    except Exception as e:
        ctk.CTkLabel(frame_principalmenu, text=f"Erro ao carregar dados do ranking: {e}", text_color="red").pack()
        botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                     fg_color="gray", text_color="white", command=reset_callback)
        botao_voltar.pack(pady=20)
        return

    # Cria uma lista de dicion√°rios (nome_da_familia, pontos)
    ranking_data = []
    for user_email, pontos in dados_pontos.items():
        nome_familia = dados_familia.get(user_email, "N/A")
        ranking_data.append({"familia": nome_familia, "pontos": pontos})

    # Ordena a lista pelo n√∫mero de pontos em ordem decrescente
    ranking_data.sort(key=lambda x: x["pontos"], reverse=True)

    if not ranking_data:
        ctk.CTkLabel(frame_principalmenu, text="Nenhum dado de ranking dispon√≠vel.",
                     font=("Arial", 14), text_color="#5f6368").pack(pady=10)
    else:
        # Cria um cabe√ßalho para a tabela do ranking
        header_frame = ctk.CTkFrame(frame_principalmenu, fg_color="transparent")
        header_frame.pack(fill="x", padx=50, pady=(10, 5))
        ctk.CTkLabel(header_frame, text="Posi√ß√£o", font=("Arial", 12, "bold"), width=80).pack(side="left", padx=5)
        ctk.CTkLabel(header_frame, text="Fam√≠lia", font=("Arial", 12, "bold"), width=200).pack(side="left", padx=5)
        ctk.CTkLabel(header_frame, text="Pontos", font=("Arial", 12, "bold"), width=100).pack(side="left", padx=5)

        for i, item in enumerate(ranking_data):
            row_frame = ctk.CTkFrame(frame_principalmenu, fg_color="#f9f9f9" if i % 2 == 0 else "#ffffff")
            row_frame.pack(fill="x", padx=50, pady=2)
            ctk.CTkLabel(row_frame, text=f"{i+1}¬∫", width=80).pack(side="left", padx=5)
            ctk.CTkLabel(row_frame, text=item["familia"], width=200).pack(side="left", padx=5)
            ctk.CTkLabel(row_frame, text=item["pontos"], width=100).pack(side="left", padx=5)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def quiz_semanal(email, senha, frame_principalmenu, reset_callback):
    """
    üß† Fun√ß√£o: Quiz Semanal
    Disponibiliza 5 quest√µes toda segunda-feira. Dependendo do desempenho, o usu√°rio recebe pontos.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üß† Quiz Semanal",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    global dados_pontos, dados_questoes_quiz, dados_ultimo_quiz

    # Carrega quest√µes e √∫ltimo quiz do JSON (garante que os dados est√£o atualizados)
    try:
        with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
            arquivo_lido = json.load(arquivo)
            questoes_disponiveis = arquivo_lido.get("questoes_quiz", [])
            dados_ultimo_quiz = arquivo_lido.get("ultimo_quiz", {})
            dados_pontos = arquivo_lido.get("pontos", {}) # Garante que os pontos globais est√£o atualizados
    except Exception as e:
        ctk.CTkLabel(frame_principalmenu, text=f"Erro ao carregar quest√µes do quiz: {e}", text_color="red").pack()
        botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                     fg_color="gray", text_color="white", command=reset_callback)
        botao_voltar.pack(pady=20)
        return

    data_atual = datetime.now().date() # Data atual sem a hora
    data_ultimo_quiz_str = dados_ultimo_quiz.get(email)
    
    pode_fazer_quiz = True
    if data_ultimo_quiz_str:
        data_ultimo_quiz = datetime.strptime(data_ultimo_quiz_str, "%Y-%m-%d").date()
        
        # Calcula a √∫ltima segunda-feira
        hoje_wday = data_atual.weekday() # 0 = segunda, 1 = ter√ßa, ..., 6 = domingo
        dias_para_ultima_segunda = hoje_wday # Se hoje for segunda (0), 0 dias. Se for ter√ßa (1), 1 dia para tr√°s.
        ultima_segunda_feira = data_atual - timedelta(days=dias_para_ultima_segunda)

        # Se o √∫ltimo quiz foi feito ap√≥s a √∫ltima segunda-feira
        if data_ultimo_quiz >= ultima_segunda_feira:
            pode_fazer_quiz = False


    if not questoes_disponiveis or len(questoes_disponiveis) < 5:
        ctk.CTkLabel(frame_principalmenu, text="N√£o h√° quest√µes suficientes para o quiz. Contate o administrador.",
                     font=("Arial", 14), text_color="red").pack(pady=10)
        botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                     fg_color="gray", text_color="white", command=reset_callback)
        botao_voltar.pack(pady=20)
        return

    if not pode_fazer_quiz:
        ctk.CTkLabel(frame_principalmenu, text=f"Voc√™ j√° realizou o quiz esta semana. Volte na pr√≥xima segunda-feira!",
                     font=("Arial", 14), text_color="orange").pack(pady=10)
        botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                     fg_color="gray", text_color="white", command=reset_callback)
        botao_voltar.pack(pady=20)
        return

    # Selecionar 5 quest√µes aleat√≥rias
    questoes_para_quiz = random.sample(questoes_disponiveis, 5)
    respostas_usuario = {}
    
    current_question_index = 0
    
    question_label = ctk.CTkLabel(frame_principalmenu, text="", font=("Arial", 16, "bold"), wraplength=500, justify="left", text_color="#1A73E8")
    question_label.pack(pady=(10, 10))

    options_frame = ctk.CTkFrame(frame_principalmenu, fg_color="transparent")
    options_frame.pack(pady=(0, 20))

    quiz_message_label = ctk.CTkLabel(frame_principalmenu, text="", font=("Arial", 12), text_color="red")
    quiz_message_label.pack(pady=(0, 10))

    radio_var = ctk.StringVar(value="") # Vari√°vel para os radio buttons da quest√£o atual

    def show_question(index):
        nonlocal current_question_index
        current_question_index = index
        
        for widget in options_frame.winfo_children():
            widget.destroy() # Limpa as op√ß√µes anteriores

        radio_var.set("") # Reseta a sele√ß√£o do radio button

        if index < len(questoes_para_quiz):
            question = questoes_para_quiz[index]
            question_label.configure(text=f"Quest√£o {index + 1}: {question['pergunta']}")

            for i, option in enumerate(question['opcoes']):
                radio_button = ctk.CTkRadioButton(options_frame, text=option, variable=radio_var, value=option,
                                                  font=("Arial", 14), text_color="#333333")
                radio_button.pack(anchor="w", pady=5)
            
            # Atualiza o texto do bot√£o "Pr√≥xima" ou "Finalizar"
            if current_question_index == len(questoes_para_quiz) - 1:
                botao_proxima.configure(text="Finalizar Quiz")
            else:
                botao_proxima.configure(text="Pr√≥xima Quest√£o")
        else:
            calculate_score()

    def next_question():
        selected_option = radio_var.get()
        if not selected_option:
            quiz_message_label.configure(text="Por favor, selecione uma op√ß√£o.", text_color="red")
            return
        
        respostas_usuario[current_question_index] = selected_option
        quiz_message_label.configure(text="")
        
        # Move para a pr√≥xima quest√£o ou finaliza
        if current_question_index < len(questoes_para_quiz) - 1:
            show_question(current_question_index + 1)
        else:
            calculate_score()
        
    def calculate_score():
        pontuacao = 0
        for i, question in enumerate(questoes_para_quiz):
            if respostas_usuario.get(i) == question['resposta_correta']:
                pontuacao += 1

        pontos_ganhos = pontuacao * 100 # Exemplo: 100 pontos por resposta correta

        global dados_pontos, dados_ultimo_quiz
        dados_pontos[email] = dados_pontos.get(email, 0) + pontos_ganhos
        dados_ultimo_quiz[email] = data_atual.strftime("%Y-%m-%d") # Registra a data do quiz

        # Atualiza o arquivo JSON com os novos pontos e a data do √∫ltimo quiz
        try:
            with open(r"banco_dados.JSON", "r+", encoding="utf-8") as f:
                data = json.load(f)
                data["pontos"][email] = dados_pontos[email]
                data["ultimo_quiz"][email] = dados_ultimo_quiz[email]
                f.seek(0)
                json.dump(data, f, indent=4, ensure_ascii=False)
                f.truncate()

            # Exibe o resultado do quiz
            for widget in frame_principalmenu.winfo_children():
                widget.destroy()
            ctk.CTkLabel(frame_principalmenu, text="üéâ Quiz Conclu√≠do! üéâ", font=("Arial", 20, "bold"), text_color="#1A73E8").pack(pady=(20, 10))
            ctk.CTkLabel(frame_principalmenu, text=f"Voc√™ acertou {pontuacao} de {len(questoes_para_quiz)} quest√µes.", font=("Arial", 16), text_color="#333333").pack(pady=5)
            ctk.CTkLabel(frame_principalmenu, text=f"Voc√™ ganhou {pontos_ganhos} pontos!", font=("Arial", 16, "bold"), text_color="green").pack(pady=5)
            ctk.CTkLabel(frame_principalmenu, text=f"Seu total de pontos agora √©: {dados_pontos[email]}", font=("Arial", 14), text_color="#28a745").pack(pady=10)
            
            botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                         fg_color="gray", text_color="white", command=reset_callback)
            botao_voltar.pack(pady=20)

        except Exception as e:
            ctk.CTkLabel(frame_principalmenu, text=f"Erro ao salvar resultado do quiz: {e}", text_color="red").pack()
            botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                         fg_color="gray", text_color="white", command=reset_callback)
            botao_voltar.pack(pady=20)


    botao_proxima = ctk.CTkButton(frame_principalmenu, text="Pr√≥xima Quest√£o",
                                   fg_color="#1A73E8", text_color="white",
                                   command=next_question)
    botao_proxima.pack(pady=10)

    # Bot√£o de voltar que estar√° sempre presente durante o quiz
    botao_voltar_quiz = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar_quiz.pack(pady=20)

    show_question(current_question_index) # Inicia exibindo a primeira quest√£o


def area_educativa(email, senha, frame_menu):
    """Fun√ß√£o utilizada para ir para o frame_educativo (usaremos a tela inteira nesta fun√ß√£o, por ser necess√°rio para ter mais conte√∫do.
    Onde haver√° v√°rias op√ß√µes de leitura sobre assuntos de sustentabilidade)."""

    for widget in janela.winfo_children():
        widget.destroy()

    frame_topoeducativo = ctk.CTkFrame(janela, fg_color="#1A73E8", height=80)
    frame_topoeducativo.pack(fill="x")

    titulo_educativo = ctk.CTkLabel(frame_topoeducativo, text="üíß √ÅREA EDUCATIVA",
                                     text_color="#ffffff", font=("Arial", 24, "bold"))
    titulo_educativo.pack(pady=20)

    frame_educativo = ctk.CTkFrame(janela, fg_color="#ffffff")
    frame_educativo.pack(fill="both", expand=True, padx=20, pady=10)

    btn1 = ctk.CTkButton(frame_educativo,
                         text="Europa investe ‚Ç¨15 bilh√µes em preserva√ß√£o de recursos h√≠dricos at√© 2027",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa1(frame_educativo, email, senha, frame_menu))
    btn1.pack(fill="x", pady=10)

    btn2 = ctk.CTkButton(frame_educativo,
                         text="Cientistas desenvolvem tecnologia para extrair √°gua pot√°vel do ar usando res√≠duos alimentares",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa2(frame_educativo, email, senha, frame_menu))
    btn2.pack(fill="x", pady=10)

    btn3 = ctk.CTkButton(frame_educativo,
                         text="Universidade do Texas inicia constru√ß√£o do maior centro universit√°rio de re√∫so de √°gua dos EUA",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa3(frame_educativo, email, senha, frame_menu))
    btn3.pack(fill="x", pady=10)

    btn4 = ctk.CTkButton(frame_educativo,
                         text="Alunos ser√£o instru√≠dos sobre conserva√ß√£o da √°gua e limpeza do rio Ganges na √çndia",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa4(frame_educativo, email, senha, frame_menu))
    btn4.pack(fill="x", pady=10)

    btn5 = ctk.CTkButton(frame_educativo,
                         text="Impacto dos datacenters em √°reas com escassez h√≠drica na Am√©rica Latina",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa5(frame_educativo, email, senha, frame_menu))
    btn5.pack(fill="x", pady=10)

    btn6 = ctk.CTkButton(frame_educativo,
                         text="8 filmes educativos para crian√ßas sobre sustentabilidade",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa6(frame_educativo, email, senha, frame_menu))
    btn6.pack(fill="x", pady=10)

    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue", # Cor alterada para consist√™ncia
                                 text_color="#ffffff", # Cor alterada para consist√™ncia
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: mostrar_menu(email, senha))
    botao_voltar.pack(pady=20)


def area_educativa1(frame_educativo, email, senha, frame_menu):
    """Exibe o conte√∫do da not√≠cia 1 na √°rea educativa."""
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # T√≠tulo
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üåç Investimento de ‚Ç¨15 bilh√µes para combater a crise h√≠drica na Europa",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # Par√°grafo da not√≠cia
    corpo_texto = (
        "A Universidade Europeia e o Banco Europeu de Investimento anunciaram, em 7 de junho, "
        "um aporte de ‚Ç¨15 bilh√µes (‚âàUS$17bi) a projetos voltados √† redu√ß√£o da polui√ß√£o, "
        "preven√ß√£o do desperd√≠cio e fomento √† inova√ß√£o no setor h√≠drico ao longo dos pr√≥ximos tr√™s anos. "
        "A a√ß√£o considera a intensifica√ß√£o das secas e press√µes agr√≠colas e urbanas causadas pelas mudan√ßas clim√°ticas. "
        "Como medida de responsabiliza√ß√£o, o Reino Unido restringiu b√¥nus a executivos de empresas de √°gua que n√£o investem "
        "o suficiente na qualidade dos corpos de √°gua."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Destaque: Por que isso importa?
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Por que isso importa?",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800,
                                      justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "Esse investimento maci√ßo pode impulsionar tecnologias verdes, infraestrutura resiliente e processos de governan√ßa "
        "que garantam √°gua limpa e gest√£o sustent√°vel, uma virada estrat√©gica para enfrentar a escassez h√≠drica em regi√µes vulner√°veis."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Fontes
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))


    lbl = ctk.CTkLabel(frame_educativo,
                            text="‚Ä¢ reuters.com",
                            text_color="#333333",
                            font=("Arial", 13),
                            anchor="w",
                            justify="left")
    lbl.pack()

    # Bot√£o de voltar
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)


def area_educativa2(frame_educativo, email, senha, frame_menu):
    """Exibe o conte√∫do da not√≠cia 2 na √°rea educativa."""
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # T√≠tulo
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üéí Extra√ß√£o de √°gua pot√°vel do ar usando alimentos",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # Par√°grafo da not√≠cia
    corpo_texto = (
        "Pesquisadores da Universidade do Texas em Austin publicaram, em abril, um m√©todo inovador para captar √°gua do ar "
        "usando hidrog√©is feitos com biomassa de res√≠duos alimentares e conchas. Esses materiais absorvem grandes volumes "
        "de umidade e liberam √°gua pura com aquecimento leve. Em campo, foram obtidos 15L de √°gua por kg de gel por dia‚Äî"
        "recuperando 95% do volume captado."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Destaque: Impacto pr√°tico
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Impacto pr√°tico:",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800,
                                      justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "Trata-se de uma solu√ß√£o biodegrad√°vel, modular e de baixo consumo energ√©tico ‚Äî ideal para comunidades rurais, "
        "irriga√ß√£o localizada ou situa√ß√µes emergenciais em √°reas carentes de infraestrutura h√≠drica."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Fontes
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))

    lbl = ctk.CTkLabel(frame_educativo,
                       text="‚Ä¢ foodandwine.com",
                       text_color="#333333",
                       font=("Arial", 13),
                       anchor="w",
                       justify="left")
    lbl.pack()

    # Bot√£o de voltar
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)


def area_educativa3(frame_educativo, email, senha, frame_menu):
    """Exibe o conte√∫do da not√≠cia 3 na √°rea educativa."""
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # T√≠tulo
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üèóÔ∏è UT Austin constr√≥i o maior centro universit√°rio de re√∫so de √°gua nos EUA",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # Par√°grafo da not√≠cia
    corpo_texto = (
        "Em maio, a UT anunciou a constru√ß√£o do WaterHub, instala√ß√£o de 900m¬≤ que vai tratar at√© 1 milh√£o de gal√µes "
        "(‚âà3,8 mil m¬≥) de esgoto por dia. A previs√£o de opera√ß√£o √© para o segundo semestre de 2027. O local servir√° como laborat√≥rio "
        "de pesquisa pr√°tica para estudantes, integrando ensino e teste de tecnologias de re√∫so para aliviar sistemas municipais sobrecarregados."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Destaque: Por que isso importa?
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Por que isso importa?",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800,
                                      justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "Esse centro universit√°rio vai impulsionar a pesquisa e o desenvolvimento de tecnologias inovadoras de re√∫so de √°gua, "
        "contribuindo para a sustentabilidade urbana e forma√ß√£o t√©cnica avan√ßada."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Fontes
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))

    lbl = ctk.CTkLabel(frame_educativo,
                       text="‚Ä¢ axios.com",
                       text_color="#333333",
                       font=("Arial", 13),
                       anchor="w",
                       justify="left")
    lbl.pack()

    # Bot√£o de voltar
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)


def area_educativa4(frame_educativo, email, senha, frame_menu):
    """Exibe o conte√∫do da not√≠cia 4 na √°rea educativa."""
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # T√≠tulo
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üì∞ Educa√ß√£o Ambiental na √çndia: Estudantes de Uttar Pradesh se tornam embaixadores da limpeza",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # Par√°grafo da not√≠cia
    corpo_texto = (
        "Em junho de 2024, o governo do estado de Uttar Pradesh, na √çndia, lan√ßou uma iniciativa educativa para envolver os alunos "
        "das escolas p√∫blicas e privadas na conserva√ß√£o ambiental e limpeza do rio Ganges, um dos maiores e mais sagrados rios da √Åsia. "
        "O programa inclui forma√ß√£o de ‚Äúembaixadores estudantis da limpeza‚Äù, pr√°ticas de higiene e conserva√ß√£o h√≠drica, visitas a locais "
        "polu√≠dos, plantio de √°rvores, reda√ß√µes, campanhas ambientais e integra√ß√£o da comunidade escolar e familiar."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Destaque: Por que isso importa?
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Por que isso importa?",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800,
                                      justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "A iniciativa ajuda a sensibilizar jovens sobre a conserva√ß√£o h√≠drica e atitudes sustent√°veis desde cedo, "
        "envolvendo tamb√©m suas fam√≠lias e escolas, o que pode gerar impacto real na limpeza do Ganges e na forma√ß√£o de cidad√£os conscientes."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Fontes
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))

    lbl = ctk.CTkLabel(frame_educativo,
                       text="‚Ä¢ timesofindia.indiatimes.com",
                       text_color="#333333",
                       font=("Arial", 13),
                       anchor="w",
                       justify="left")
    lbl.pack()

    # Bot√£o de voltar
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)


def area_educativa5(frame_educativo, email, senha, frame_menu):
    """Exibe o conte√∫do da not√≠cia 5 na √°rea educativa."""
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # T√≠tulo
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üì∞ Impacto dos datacenters em √°reas com escassez h√≠drica na Am√©rica Latina",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # Par√°grafo da not√≠cia
    corpo_texto = (
        "Um artigo do The Guardian chama aten√ß√£o para a instala√ß√£o de grandes datacenters em regi√µes "
        "com escassez de √°gua no Brasil e outros pa√≠ses da Am√©rica Latina. Um dos casos citados em Caucaia (CE) "
        "est√° em regi√µes afetadas por seca, e esses centros utilizam at√© 80‚ÄØ% da √°gua retirada para resfriamento, "
        "gerando riscos de esgotamento de recursos h√≠dricos locais. O texto destaca a necessidade de maior transpar√™ncia, "
        "engajamento comunit√°rio e uso de alternativas como dessaliniza√ß√£o e re√∫so."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Destaque: Por que isso importa?
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Por que isso importa?",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800, justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "Educa√ß√£o ambiental sobre impactos tecnol√≥gicos no ciclo da √°gua.\n\n"
        "Inova√ß√£o na busca por solu√ß√µes de resfriamento menos dependentes de √°gua.\n\n"
        "Reflex√£o sobre pol√≠ticas de concess√£o h√≠drica e planejamento sustent√°vel."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Fontes
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))

    lbl = ctk.CTkLabel(frame_educativo,
                       text="‚Ä¢ theguardian.com",
                       text_color="#333333",
                       font=("Arial", 13),
                       anchor="w",
                       justify="left")
    lbl.pack()

    # Bot√£o de voltar
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)

def area_educativa6(frame_educativo, email, senha, frame_menu):
    """Exibe o conte√∫do da not√≠cia 6 (lista de filmes) na √°rea educativa."""
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # T√≠tulo principal menor e com menos espa√ßamento
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üåø 8 Filmes sobre Sustentabilidade para Crian√ßas",
                          text_color="#1A73E8",
                          font=("Arial", 16, "bold"),  # fonte menor
                          wraplength=800,
                          justify="left")
    titulo.pack(pady=(10, 5))  # menos espa√ßamento

    filmes = [
        ("Wall-E (2008)", "Um cl√°ssico da Pixar! Mostra um futuro onde a Terra foi tomada pelo lixo e a humanidade vive no espa√ßo. Wall-E, um rob√¥ solit√°rio, nos ensina sobre consumo, lixo e amor pelo planeta."),
        ("Lorax: Em Busca da Tr√∫fula Perdida (2012)", "Baseado na obra do Dr. Seuss, aborda desmatamento e explora√ß√£o de recursos naturais, com personagens carism√°ticos e m√∫sicas cativantes."),
        ("Happy Feet: O Pinguim (2006)", "Atrav√©s de um pinguim dan√ßarino, o filme aborda temas como mudan√ßa clim√°tica, preserva√ß√£o dos oceanos e o impacto da pesca predat√≥ria."),
        ("Rio (2011)", "Al√©m da aventura, mostra a import√¢ncia da biodiversidade brasileira e os perigos do tr√°fico de animais silvestres."),
        ("Irm√£o Urso (Brother Bear) (2003)", "Aborda o respeito √† natureza, ao ciclo da vida e √† conex√£o espiritual com o meio ambiente, com forte mensagem sobre empatia e equil√≠brio natural."),
        ("A Fuga das Galinhas (Chicken Run) (2000)", "Uma met√°fora inteligente sobre liberdade animal e os impactos da agroind√∫stria ‚Äì adaptado ao humor infantil."),
        ("O Rei Le√£o (1994 / 2019)", "Apesar de n√£o focar diretamente em sustentabilidade, ensina sobre o ‚Äúciclo da vida‚Äù e o equil√≠brio ecol√≥gico da savana africana."),
        ("Meu Amigo Totoro (1988)", "Um cl√°ssico do Studio Ghibli. Exalta a harmonia entre seres humanos e natureza, com um toque m√°gico e po√©tico.")
    ]

    for titulo_filme, descricao in filmes:
        label_filme_titulo = ctk.CTkLabel(frame_educativo,
                                          text=titulo_filme,
                                          text_color="#1A73E8",
                                          font=("Arial", 14, "bold"),  # fonte menor
                                          wraplength=800,
                                          justify="left")
        label_filme_titulo.pack(padx=20, pady=(8, 2), anchor="w")  # menos espa√ßamento

        label_filme_desc = ctk.CTkLabel(frame_educativo,
                                        text=descricao,
                                        text_color="#333333",
                                        font=("Arial", 12),  # fonte menor
                                        wraplength=800,
                                        justify="left")
        label_filme_desc.pack(padx=20, pady=(0, 6), anchor="w")  # menos espa√ßamento

    # Bot√£o de voltar
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=30)


def sair_sitema():
    """Fun√ß√£o utilizada para fechar o sistema."""
    janela.destroy()  # Fecha a janela principal


######################################################################
# Configura√ß√£o da janela principal
janela = ctk.CTk()
janela.title("ECODROP SYSTEM")
janela.geometry("1000x800+400+150")
janela.resizable(False, False)

# Cria um frame apenas para o cabe√ßalho do topo
frame_topo = ctk.CTkFrame(janela, fg_color="#1A73E8", height=80)
frame_topo.pack(fill="x")

titulo = ctk.CTkLabel(frame_topo, text="üíß ECODROP",
                      text_color="#f0f0f0", font=("Arial", 24, "bold"))
titulo.pack(pady=20)

# Divis√£o em colunas principais (menu lateral e conte√∫do)
frame_conteudo = ctk.CTkFrame(janela, fg_color="#f0f0f0")
frame_conteudo.pack(fill="both", expand=True)

# Menu lateral
frame_lateral = ctk.CTkFrame(frame_conteudo, fg_color="#f0f0f0", width=200)
frame_lateral.pack(side="left", fill="y")

# Bot√µes do menu inicial
botao1 = ctk.CTkButton(frame_lateral, text="Login", fg_color="#f0f0f0",
                       text_color="#1A73E8", font=("Arial", 12), anchor="w", command=mostrar_login)
botao1.pack(fill="x", pady=(20, 10), padx=10)

botao2 = ctk.CTkButton(frame_lateral, text="Cadastro usu√°rio", fg_color="#f0f0f0",
                       text_color="#1A73E8", font=("Arial", 12), anchor="w", command=mostrar_cadastro)
botao2.pack(fill="x", pady=10, padx=10)

botao3 = ctk.CTkButton(frame_lateral, text="Modo administrador", fg_color="#f0f0f0",
                       text_color="#1A73E8", font=("Arial", 12), anchor="w", command=modo_adm)
botao3.pack(fill="x", pady=10, padx=10)

botao4 = ctk.CTkButton(frame_lateral, text="Sobre n√≥s", fg_color="#f0f0f0",
                       text_color="#1A73E8", font=("Arial", 12), anchor="w", command=sobre_nos)
botao4.pack(fill="x", pady=10, padx=10)


####################################################
# √Årea principal de conte√∫do
frame_principal = ctk.CTkFrame(frame_conteudo, fg_color="#f0f0f0")
frame_principal.pack(side="left", fill="both", expand=True, padx=30, pady=30)


texto_bem_vindo = ctk.CTkLabel(frame_principal, text="Bem-vindo ao sistema ECODROP",
                               text_color="#202124", font=("Arial", 22, "bold"))
texto_bem_vindo.pack(pady=(0, 20))

texto_instrucao = ctk.CTkLabel(frame_principal, text="Menos consumo, mais consci√™ncia, um planeta mais feliz.",
                               text_color="#5f6368", wraplength=500, justify="left", font=("Arial", 18))
texto_instrucao.pack()

image_initial = Image.open("fotos/mascoteprincipall.png")
ctk_image_initial = ctk.CTkImage(
    light_image=image_initial, dark_image=image_initial, size=(400, 400))

label_initial_image = ctk.CTkLabel(frame_principal, image=ctk_image_initial, text="")
label_initial_image.pack()

############################################################
# Frame do rodap√©
frame_rodape = ctk.CTkFrame(frame_principal, fg_color="#f0f0f0", height=30)
frame_rodape.pack(fill="x", side="bottom")

texto_rodape = ctk.CTkLabel(
    frame_rodape, text="Vers√£o 2.0 ‚Ä¢ Suporte: ecodropsuporte@gmail.com", text_color="#5f6368", font=("Arial", 10))
texto_rodape.pack()

###########################################################
"""Parte do frame de login"""

frame_login = ctk.CTkFrame(janela, fg_color="#ffffff")
label_login = ctk.CTkLabel(frame_login, text="Informe seus dados:",
                           fg_color="#ffffff", text_color="blue", font=("Arial", 20))
label_login.pack(pady=2)
label_avisologin = ctk.CTkLabel(
    frame_login, text=" ", fg_color="#ffffff", text_color="blue", font=("Arial", 20))
label_avisologin.pack(pady=2)

# 1-entrada email
label_emaillogin = ctk.CTkLabel(
    frame_login, text="Digite seu email:", text_color="#000000", anchor="w", width=300)
label_emaillogin.pack(pady=(2, 0))

entrada_emaillogin = ctk.CTkEntry(frame_login, width=300)
entrada_emaillogin.pack(pady=2)

# 2-entrada senha
label_senhalogin = ctk.CTkLabel(
    frame_login, text="Digite sua senha:", text_color="#000000", anchor="w", width=300)
label_senhalogin.pack(pady=(2, 0))

entrada_senhalogin = ctk.CTkEntry(frame_login, width=300, show="*")
entrada_senhalogin.pack(pady=2)

# bot√£o logar
botao_logar = ctk.CTkButton(frame_login, text="Logar", fg_color="blue",
                            text_color="#ffffff", width=300, command=lambda: conferir_logar(entrada_emaillogin, entrada_senhalogin))
botao_logar.pack(pady=2)
# bot√£o voltar
botao_voltarinicial_login = ctk.CTkButton(
    frame_login, text="Voltar", fg_color="blue", text_color="#ffffff", width=300, command=voltar_inicial)
botao_voltarinicial_login.pack()


##############################################
"""Parte do frame de cadastro"""
frame_cadastro = ctk.CTkFrame(janela, fg_color="#ffffff")
label_cadastro = ctk.CTkLabel(frame_cadastro, text="Informe seus dados:",
                              fg_color="#ffffff", text_color="blue", font=("Arial", 20))
label_cadastro.pack(pady=1)


label_aviso = ctk.CTkLabel(frame_cadastro, text=" ",
                           fg_color="#ffffff", text_color="blue", font=("Arial", 20))
label_aviso.pack(pady=1)

# 1-Entrada Email
label_email = ctk.CTkLabel(frame_cadastro, text="Digite seu email:",
                           text_color="#000000", anchor="w", width=300)
label_email.pack(pady=(1, 0))

entrada_email = ctk.CTkEntry(frame_cadastro, width=300)
entrada_email.pack(pady=1)

# 2-entrada nome da fam√≠lia
label_nome = ctk.CTkLabel(frame_cadastro, text="Digite o nome da sua fam√≠lia",
                          text_color="#000000", anchor="w", width=300)
label_nome.pack(pady=(1, 0))

entrada_nome = ctk.CTkEntry(frame_cadastro, width=300, validate="key", validatecommand=(
    janela.register(validar_letras_espacos), "%P"))
entrada_nome.pack(pady=1)

# 3-Entrada Senha
label_senha = ctk.CTkLabel(frame_cadastro, text="Senha (m√≠nimo 4 caracteres):",
                           text_color="#000000", anchor="w", width=300)
label_senha.pack(pady=(1, 0))

entrada_senha = ctk.CTkEntry(frame_cadastro, width=300, show="*")
entrada_senha.pack(pady=1)

# 4. Campo Quantidade de membros
label_qmembros = ctk.CTkLabel(
    frame_cadastro, text="Quantidade de membros na fam√≠lia:", text_color="#000000", anchor="w", width=300)
label_qmembros.pack(pady=(1, 0))
entrada_qmembros = ctk.CTkEntry(frame_cadastro, width=300, validate="key", validatecommand=(
    janela.register(validar_numeros), "%P"))
entrada_qmembros.pack(pady=1)

# 5. N√∫mero do apartamento
label_numeroap = ctk.CTkLabel(
    frame_cadastro, text="Digite o n√∫mero do seu apartamento", text_color="#000000", anchor="w", width=300)
label_numeroap.pack(pady=(1, 0))
entrada_numeroap = ctk.CTkEntry(frame_cadastro, width=300, validate="key", validatecommand=(
    janela.register(validar_numeros), "%P"))
entrada_numeroap.pack(pady=1)

# 6. C√≥digo verificador
label_verificador = ctk.CTkLabel(
    frame_cadastro, text="Digite seu c√≥digo verificador (m√≠nimo 4 caracteres):", text_color="#000000", anchor="w", width=300)
label_verificador.pack(pady=(1, 0))

entrada_verificador = ctk.CTkEntry(frame_cadastro, width=300, show="*", validate="key", validatecommand=(
    janela.register(validar_numeros), "%P"))
entrada_verificador.pack(pady=1)


botao_cadastrar = ctk.CTkButton(frame_cadastro, text="Cadastrar", fg_color="blue",
                                text_color="#ffffff", width=300, command=lambda: conferir_cadastrar(entrada_email, entrada_nome, entrada_senha,
                                                                                                    entrada_qmembros,
                                                                                                    entrada_numeroap, entrada_verificador, label_aviso))
botao_cadastrar.pack(pady=1)

# bot√£o de voltar
botao_voltarinicial_cadastro = ctk.CTkButton(
    frame_cadastro, text="Voltar", fg_color="blue", text_color="#ffffff", width=300, command=voltar_inicial)
botao_voltarinicial_cadastro.pack()


#####################################
"""Parte do frame do modo administrador"""
frame_adm = ctk.CTkFrame(janela, fg_color="#ffffff")
label_adm_title = ctk.CTkLabel(frame_adm, text="Modo Administrador", fg_color="#ffffff", text_color="blue", font=("Arial", 30))
label_adm_title.pack(pady=1)

label_adm_message = ctk.CTkLabel(frame_adm, text=" ", fg_color="#ffffff", text_color="blue", font=("Arial", 25))
label_adm_message.pack(pady=1)

# 1-Entrada do C√≥digo de Administrador
label_codigo = ctk.CTkLabel(frame_adm, text="Digite o c√≥digo de administrador:",
                           text_color="blue", anchor="w", width=300)
label_codigo.pack(pady=(1, 0))

entrada_codigo = ctk.CTkEntry(frame_adm, width=300, show="*") # M√°scara de entrada para o c√≥digo de administrador
entrada_codigo.pack(pady=1)

botao_modoadm = ctk.CTkButton(frame_adm, text="Entrar modo adm", fg_color="blue",
                               text_color="#ffffff", width=300, command=entrar_modoadm)
botao_modoadm.pack(pady=1)
# bot√£o de voltar
botao_voltarinicial_adm = ctk.CTkButton(frame_adm, text="Voltar", fg_color="blue", text_color="#ffffff", width=300, command=voltar_inicial)
botao_voltarinicial_adm.pack()


######################################################
"""Parte do frame "Sobre N√≥s" (Conta a hist√≥ria do EcoDrop)"""
frame_sobrenos = ctk.CTkFrame(janela, fg_color="#ffffff")

# T√≠tulo principal
titulo_sobrenos = ctk.CTkLabel(frame_sobrenos, text="üíß Projeto ECODROP", font=("Arial", 22, "bold"), text_color="#1A73E8")
titulo_sobrenos.pack(pady=(20, 10))

descricao_projeto = ctk.CTkLabel(
    frame_sobrenos,
    text=(
        "Em um mundo marcado pelo crescimento populacional e pelo consumo excessivo de recursos naturais, "
        "a sustentabilidade se tornou um dos pilares fundamentais para garantir a qualidade de vida das gera√ß√µes futuras. "
        "√â essencial que a sociedade adote pr√°ticas conscientes no dia a dia, promovendo o uso equilibrado da √°gua, da energia e demais recursos. "
        "Nesse contexto, a tecnologia tem papel estrat√©gico: aproximar a inova√ß√£o das solu√ß√µes ambientais.\n\n"

        "O ECODROP √© um sistema desenvolvido com o prop√≥sito de promover a sustentabilidade em ambientes residenciais, "
        "especialmente em condom√≠nios. A proposta central √© incentivar e premiar os moradores que conseguem manter um "
        "consumo de √°gua abaixo da m√©dia nacional, promovendo assim economia, consci√™ncia ambiental e um futuro mais respons√°vel.\n\n"

        "Este projeto foi criado por Matheus de Castro e Gabriel Escobar como parte do Projeto Interdisciplinar do curso de "
        "Sistemas de Informa√ß√£o da Universidade Federal Rural de Pernambuco (UFRPE). Para sua constru√ß√£o, foi utilizada a linguagem "
        "de programa√ß√£o Python, aliando tecnologia e responsabilidade ambiental em uma solu√ß√£o acess√≠vel e inteligente para o cotidiano dos moradores."
    ),
    font=("Arial", 14),
    text_color="#202124",
    wraplength=650,
    justify="left"
)
descricao_projeto.pack(pady=(0, 30))
imagem_sobrenos_path = "fotos/fotosobrenos.jpg"
try:
    imagem_sobrenos = Image.open(imagem_sobrenos_path)
    ctk_imagem_sobrenos = ctk.CTkImage(
        light_image=imagem_sobrenos, dark_image=imagem_sobrenos, size=(500, 300))
    label_sobrenos_image = ctk.CTkLabel(frame_sobrenos, image=ctk_imagem_sobrenos, text="")
    label_sobrenos_image.pack()
except FileNotFoundError:
    ctk.CTkLabel(frame_sobrenos, text=f"Imagem '{imagem_sobrenos_path}' n√£o encontrada.", text_color="red").pack()


botao_voltarinicial_sobrenos = ctk.CTkButton(frame_sobrenos, text="Voltar", fg_color="blue", text_color="#ffffff", width=300, command=voltar_inicial)
botao_voltarinicial_sobrenos.pack(pady=30)

#######################################
"""Parte do frame de aviso (Ser√° usado apenas quando o usu√°rio concluir o cadastro com sucesso, oferecendo a op√ß√£o de ir para o login ou sair do sistema)"""
frame_aviso=ctk.CTkFrame(janela,fg_color="#ffffff")
# Label de aviso
label_aviso_success = ctk.CTkLabel(frame_aviso, text="Cadastro realizado com sucesso!", font=("Arial", 20), text_color="green")
label_aviso_success.pack(pady=(40, 20))

# Bot√£o para ir para o login
botao_login_aviso = ctk.CTkButton(frame_aviso, text="Ir para Login", width=200, command=mostrar_login)
botao_login_aviso.pack(pady=(0, 10))

# Bot√£o para sair do sistema
botao_sair_aviso = ctk.CTkButton(frame_aviso, text="Sair do Sistema", width=200, fg_color="red", hover_color="#cc0000", command=sair_sitema)
botao_sair_aviso.pack()


###############################################


class Cadastro:
    """
    Esta classe tem o objetivo de cadastrar os usu√°rios, recebendo os dados b√°sicos como par√¢metros.
    Ela realiza o cadastro de uma conta e verifica o c√≥digo de seguran√ßa fornecido.
    """

    def __init__(self, email, quantidade_pessoas, senha, nome_familia, apartamento, verificador, label_aviso_widget):
        # Dados b√°sicos de cadastro
        self.email = email
        self.quantidade = quantidade_pessoas
        self.senha = senha
        self.nome_familia = nome_familia
        self.pontos = 0  # Pontos come√ßam zerados
        self.apartamento = apartamento
        self.verificador = verificador
        self.label_aviso_widget = label_aviso_widget # Armazena o label para atualizar as mensagens na GUI
        print("Iniciando processo de cadastro...")
        self.email_valido()

    def email_valido(self):
        """Fun√ß√£o utilizada para verificar se o email √© v√°lido ou n√£o."""
        dominios_validos = [
            'gmail.com', 'outlook.com', 'hotmail.com',
            'yahoo.com', 'icloud.com'
        ]

        if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', self.email):
            self.label_aviso_widget.configure(text="FORMATO DE EMAIL INV√ÅLIDO. Utilize um dom√≠nio v√°lido.", text_color="red")
            return

        dominio = self.email.split('@')[1].lower()
        if dominio not in dominios_validos:
            self.label_aviso_widget.configure(text="Dom√≠nio n√£o aceito. Use: Gmail, Outlook, Yahoo, iCloud, etc.", text_color="red")
            return

        self.conferir_email()

    def conferir_email(self):
        """Fun√ß√£o utilizada para verificar se o email j√° est√° cadastrado ou n√£o."""
        global dados_conta # Acessa dados globais

        try:
            with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
                arquivo_lido = json.load(arquivo)
                dados_conta = arquivo_lido.get("senha", {})
        except Exception as e:
            self.label_aviso_widget.configure(text=f"Erro ao carregar dados: {e}", text_color="red")
            return

        if self.email in dados_conta:
            self.label_aviso_widget.configure(text="EMAIL J√Å POSSUI UMA CONTA.", text_color="red")
            return # Interrompe o processo de cadastro
        else:
            self.conferir_ap()

    def conferir_ap(self):
        """Fun√ß√£o utilizada para analisar se o apartamento j√° est√° cadastrado ou n√£o."""
        global dados_apartamento # Acessa dados globais

        try:
            with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
                arquivo_lido = json.load(arquivo)
                dados_apartamento = arquivo_lido.get("apartamento", {})
        except Exception as e:
            self.label_aviso_widget.configure(text=f"Erro ao carregar dados: {e}", text_color="red")
            return

        # Verifica se o n√∫mero do apartamento existe em qualquer valor de dados_apartamento
        if self.apartamento in dados_apartamento.values():
            self.label_aviso_widget.configure(text="APARTAMENTO J√Å CADASTRADO.", text_color="red")
            return # Interrompe o processo de cadastro
        else:
            self.cadastrar_conta()

    def cadastrar_conta(self):
        """Fun√ß√£o utilizada para cadastrar a conta no banco de dados."""
        global dados_conta, dados_familia, dados_quantidade, dados_pontos, dados_apartamento, dados_codigov

        dados_conta[self.email] = self.senha
        dados_familia[self.email] = self.nome_familia
        dados_quantidade[self.email] = self.quantidade
        dados_pontos[self.email] = self.pontos
        dados_apartamento[self.email] = self.apartamento
        dados_codigov[self.email] = self.verificador

        # √â melhor usar "w" para arquivos JSON, pois qualquer erro de formata√ß√£o pode quebrar o sistema
        try:
            with open(r"banco_dados.JSON", "w", encoding="utf-8") as arquivo:
                json.dump({"senha": dados_conta, "familia": dados_familia, "membros": dados_quantidade, "pontos": dados_pontos,
                            "apartamento": dados_apartamento, "verificador": dados_codigov,
                            "questoes_quiz": dados_questoes_quiz, "ultimo_quiz": dados_ultimo_quiz}, # Inclui dados do quiz
                           arquivo, indent=4, ensure_ascii=False)
            self.label_aviso_widget.configure(text="Cadastro realizado com sucesso!", text_color="green")
            aviso_sistema() # Exibe a tela de sucesso
        except Exception as e:
            self.label_aviso_widget.configure(text=f"Erro ao salvar cadastro: {e}", text_color="red")


janela.mainloop()
