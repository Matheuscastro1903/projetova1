import customtkinter as ctk
from PIL import Image
import json
import csv
import time
import re
import random

mensagens_agua = [
    "üíß Cada gota conta. Economize √°gua!",
    "üöø Banhos curtos, planeta mais saud√°vel.",
    "üåç √Ågua √© vida. Preserve cada gota.",
    "üßº Feche a torneira ao escovar os dentes.",
    "üí¶ Pequenas atitudes salvam grandes recursos.",
    "üîß Torneiras pingando desperdi√ßam litros por dia!",
    "üå± Use a √°gua da chuva para regar plantas.",
    "‚ùå √Ågua n√£o √© infinita. Use com consci√™ncia.",
    "ü™£ Reutilize a √°gua sempre que puder.",
    "üê≥ Preserve os rios, lagos e oceanos.",
    "üìâ Menos desperd√≠cio, mais futuro.",
    "üßΩ Economize √°gua ao lavar lou√ßa ou roupa.",
    "üè° Sua casa tamb√©m pode ser sustent√°vel.",
    "üë∂ Ensine as crian√ßas a cuidar da √°gua.",
    "üíô √Ågua limpa √© direito de todos. Preserve!"
]

# Load data from JSON at startup
# Initialize empty data structures in case the file is not found
with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
    
    # quando usa json.load o arquivo json √© transformado em dicion√°rio python
    """
    o objetivo dessa parte do c√≥digo √© abrir o arquivo json e salvar os dicion√°rios em python,facilitando a manipula√ß√£o
    """
    arquivo_lido = json.load(arquivo)
    dados_conta = arquivo_lido["senha"]
    dados_familia = arquivo_lido["familia"]
    dados_quantidade = arquivo_lido["membros"]
    dados_pontos = arquivo_lido["pontos"]
    dados_apartamento = arquivo_lido["apartamento"]
    dados_codigov = arquivo_lido["verificador"]

# Function to only allow numbers
def validar_numeros(novo_texto):  # Add the parameter
    """Function used to let the user type only numbers, improving error handling"""
    return novo_texto.isdigit() or novo_texto == ""

# Function to only allow letters and spaces
def validar_letras_espacos(novo_texto):  # Add the parameter
    """Function used to let the user type only letters and spaces, improving error handling"""
    return all(c.isalpha() or c.isspace() for c in novo_texto) or novo_texto == ""

def aviso_sistema():
    """Function used to show the frame_aviso, which will only appear if the registration is successfully completed"""
    frame_cadastro.pack_forget()
    frame_aviso.pack(fill="both", expand=True)

def voltar_inicial():
    """Function used to return to the initial screen, if the wrong option was entered"""
    # Frames to "forget"
    frame_cadastro.pack_forget()
    frame_login.pack_forget()
    frame_adm.pack_forget()
    frame_sobrenos.pack_forget()
    frame_aviso.pack_forget() # Ensure the warning frame is also hidden if user navigates from it

    # Repack initial frames
    frame_topo.pack(fill="x")
    frame_conteudo.pack(fill="both", expand=True)
    frame_lateral.pack(side="left", fill="y")
    frame_principal.pack(side="right", fill="both", expand=True, padx=30, pady=30)
    frame_rodape.pack(fill="x", side="bottom")


def mostrar_login():
    """Function used to expand the login frame"""
    frame_topo.pack_forget()
    frame_conteudo.pack_forget()
    frame_lateral.pack_forget()
    frame_principal.pack_forget()
    frame_rodape.pack_forget()
    frame_aviso.pack_forget() # Hide aviso frame if navigating from it
    frame_login.pack(fill="both", expand=True)
    label_avisologin.configure(text=" ", text_color="blue") # Clear previous messages
    entrada_emaillogin.delete(0, ctk.END) # Clear email field
    entrada_senhalogin.delete(0, ctk.END) # Clear password field


def conferir_logar(entrada_emaillogin, entrada_senhalogin):
    """Function used to check for blank spaces when pressing the login button"""
    email = entrada_emaillogin.get().strip()
    senha = entrada_senhalogin.get().strip()
    if email == "" or senha == "":
        label_avisologin.configure(text="Preencha todos os campos.", text_color="red")
        return

    login(email, senha, label_avisologin)

def login(email, senha, label_avisologin):
    """Function used to verify if email and password are correct, to then go to the menu"""
    global dados_conta # Ensure global access to updated data

    # Re-read data just in case it was modified externally or by another process
    try:
        with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
            arquivo_lido = json.load(arquivo)
            dados_conta = arquivo_lido.get("senha", {})
    except Exception as e:
        label_avisologin.configure(text=f"Erro ao carregar dados: {e}", text_color="red")
        return

    if email in dados_conta:
        if dados_conta[email] == senha:
            mostrar_menu(email, senha)
            return
        else:
            label_avisologin.configure(text="EMAIL OU SENHA INCORRETO.\nContate o suporte para recuperar sua senha", text_color="red")
            return
    else:
        label_avisologin.configure(text="EMAIL N√ÉO CADASTRADO.\nV√° para a tela de cadastro", text_color="red")
        return

def mostrar_cadastro():
    """Function used to expand the registration frame"""
    # frames to forget
    frame_topo.pack_forget()
    frame_conteudo.pack_forget()
    frame_lateral.pack_forget()
    frame_principal.pack_forget()
    frame_rodape.pack_forget()
    frame_aviso.pack_forget() # Hide aviso frame if navigating from it

    frame_cadastro.pack(fill="both", expand=True)
    label_aviso.configure(text=" ", text_color="blue") # Clear previous messages
    # Clear entry fields
    entrada_email.delete(0, ctk.END)
    entrada_nome.delete(0, ctk.END)
    entrada_senha.delete(0, ctk.END)
    entrada_qmembros.delete(0, ctk.END)
    entrada_numeroap.delete(0, ctk.END)
    entrada_verificador.delete(0, ctk.END)


def conferir_cadastrar(entrada_email, entrada_nome, entrada_senha,
                    entrada_qmembros,entrada_numeroap, entrada_verificador, label_aviso):
    """
    This function will be used to verify if the entries are filled
    correctly and will call the Cadastro class to register the account.
    """
    email = entrada_email.get().strip()
    nome_familia = entrada_nome.get().strip()
    senha = entrada_senha.get().strip()
    quantidade_pessoas = int(entrada_qmembros.get().strip())
    apartamento = int(entrada_numeroap.get().strip())
    verificador = entrada_verificador.get().strip()

    entradas = [email, nome_familia, senha,quantidade_pessoas,apartamento]

    # Verifica√ß√£o: se algum campo de texto estiver vazio
    if any(campo == "" for campo in entradas):
        label_aviso.configure(text="Todos os campos devem ser preenchidos.", text_color="red")
        return

    # Valida√ß√£o da senha
    if len(senha) < 4 or len(senha) > 20:
        label_aviso.configure(text="A senha deve ter entre 4 e 20 caracteres.", text_color="red")
        return
    
    if len(verificador) < 4 or len(verificador) > 20:
        label_aviso.configure(text="A senha deve ter entre 4 e 20 caracteres.", text_color="red")
        return
    

    verificador=int(verificador)
    conta = Cadastro(email,quantidade_pessoas,senha,nome_familia,apartamento,verificador)


def modo_adm():
    """Function used to expand the frame_adm, when the user wants to go to admin mode"""
    frame_topo.pack_forget()
    frame_conteudo.pack_forget()
    frame_lateral.pack_forget()
    frame_principal.pack_forget()
    frame_rodape.pack_forget()
    frame_adm.pack(fill="both", expand=True)


def entrar_modoadm():
    # Placeholder for admin mode entry logic
    print("Entrar modo ADM - Logic to be implemented")
    pass


def sobre_nos():
    """Function used to show the frame_sobrenos (Tells the story of the ecodrop project)"""
    frame_topo.pack_forget()
    frame_conteudo.pack_forget()
    frame_lateral.pack_forget()
    frame_principal.pack_forget()
    frame_rodape.pack_forget()
    frame_sobrenos.pack(fill="both", expand=True)


def mostrar_menu(email, senha):
    """Function used to show the frame_menu, where the available functions of the program will be seen"""
    for widget in janela.winfo_children():
        widget.destroy()

    # Main frame that wraps the menu and content
    frame_menu = ctk.CTkFrame(janela, fg_color="#ffffff")

    # Top of the system with title
    frame_topo_menu = ctk.CTkFrame(frame_menu, fg_color="#1A73E8", height=80)
    frame_topo_menu.pack(fill="x")

    titulo = ctk.CTkLabel(frame_topo_menu, text="EcoDrop", fg_color="#1A73E8", text_color="white",
                              font=("Arial", 24, "bold"))
    titulo.pack(pady=20)

    # Side menu
    frame_lateral_menu = ctk.CTkFrame(frame_menu, fg_color="white", width=200)
    frame_lateral_menu.pack(side="left", fill="y")

    # Content frame
    frame_conteudo_menu = ctk.CTkFrame(frame_menu, fg_color="#f0f2f5")
    frame_conteudo_menu.pack(fill="both", expand=True)

    # Main content frame, where dynamic content will be displayed
    frame_principalmenu = ctk.CTkFrame(frame_conteudo_menu, fg_color="#ffffff")
    frame_principalmenu.pack(fill="both", expand=True, padx=30, pady=30)

    # Helper function to reset the main content area to the default welcome view
    def reset_principal_menu_content():
        for widget in frame_principalmenu.winfo_children():
            widget.destroy()

        texto_bem_vindo = ctk.CTkLabel(frame_principalmenu, text="Bem-vindo ao EcoDrop",
                                         fg_color="#ffffff", text_color="#202124", font=("Arial", 18, "bold"))
        texto_bem_vindo.pack(pady=(0, 20))

        texto_instrucao = ctk.CTkLabel(frame_principalmenu,
                                         text=random.choice(mensagens_agua),
                                         fg_color="#ffffff", text_color="#5f6368",
                                         wraplength=500, justify="left", font=("Arial", 12))
        texto_instrucao.pack()

        imagem_menu = Image.open("fotos/mascoteprincipall.png")
        ctk_imagem_menu = ctk.CTkImage(light_image=imagem_menu, dark_image=imagem_menu, size=(400, 400))

        label_menu_image = ctk.CTkLabel(frame_principalmenu, image=ctk_imagem_menu, text="")
        label_menu_image.pack()


    # ---- Side Menu Buttons ----
    botao1 = ctk.CTkButton(frame_lateral_menu, text="üèÜ Ranking mensal", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: mostrar_ranking(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao1.pack(fill="x", pady=(20, 10), padx=20)

    botao2 = ctk.CTkButton(frame_lateral_menu, text="üéÅ Resgatar pr√™mios", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: resgatar_premio(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao2.pack(fill="x", pady=10, padx=20)

    botao3 = ctk.CTkButton(frame_lateral_menu, text="üßÆ C√°lculo de pontos", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: calculo_pontuacao(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao3.pack(fill="x", pady=10, padx=20)

    botao4 = ctk.CTkButton(frame_lateral_menu, text="üß† Quiz semanal", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: quiz_semanal(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao4.pack(fill="x", pady=10, padx=20)

    botao5 = ctk.CTkButton(frame_lateral_menu, text="üìò √Årea educativa", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: area_educativa(email, senha, frame_menu), cursor="hand2")
    botao5.pack(fill="x", pady=10, padx=20)

    botao6 = ctk.CTkButton(frame_lateral_menu, text="üìä Mostrar dados", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: mostrar_dados(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao6.pack(fill="x", pady=10, padx=20)

    botao7 = ctk.CTkButton(frame_lateral_menu, text="üîÑ Atualizar dados", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: atualizar_dados(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao7.pack(fill="x", pady=10, padx=20)

    botao8 = ctk.CTkButton(frame_lateral_menu, text="üóë Deletar conta", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: deletar_conta(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao8.pack(fill="x", pady=10, padx=20)

    botao9 = ctk.CTkButton(frame_lateral_menu, text="‚úçÔ∏è Enviar feedback", fg_color="white", text_color="#1A73E8",
                            font=("Arial", 12), anchor="w",
                            command=lambda: feedback(email, senha, frame_principalmenu, reset_principal_menu_content), cursor="hand2")
    botao9.pack(fill="x", pady=10, padx=20)

    # Initial content for frame_principalmenu
    reset_principal_menu_content()

    # Footer Frame
    frame_rodape_menu = ctk.CTkFrame(frame_menu, fg_color="#f0f0f0", height=30)
    frame_rodape_menu.pack(fill="x", side="bottom")

    texto_rodape_menu = ctk.CTkLabel( # Renamed to avoid conflict
    frame_rodape_menu, text="Vers√£o 2.0 ‚Ä¢ Suporte: ecodropsuporte@gmail.com", text_color="#5f6368", font=("Arial", 10))
    texto_rodape_menu.pack()

    frame_menu.pack(fill="both", expand=True)


def mostrar_dados(email, senha, frame_principalmenu, reset_callback):
    """
    üìä Function: Show Data
    Displays the user's main account data (excluding password and verifier code for security).
    Used for the user to review their registration information.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üìä Seus Dados",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    global dados_familia, dados_quantidade, dados_pontos, dados_apartamento # Access global data

    user_family = dados_familia.get(email, "N/A")
    user_members = dados_quantidade.get(email, "N/A")
    user_points = dados_pontos.get(email, "N/A")
    user_apartment = dados_apartamento.get(email, "N/A")

    data_text = f"""
    Email: {email}
    Nome da Fam√≠lia: {user_family}
    Membros da Fam√≠lia: {user_members}
    Pontos Acumulados: {user_points}
    N√∫mero do Apartamento: {user_apartment}
    """
    ctk.CTkLabel(frame_principalmenu, text=data_text,
                 font=("Arial", 14), text_color="#333333", justify="left").pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def atualizar_dados(email, senha, frame_principalmenu, reset_callback):
    """
    üîÑ Function: Update Data, where the user will be able to update their data
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üîÑ Atualizar Dados",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    ctk.CTkLabel(frame_principalmenu, text="Funcionalidade de atualiza√ß√£o de dados em desenvolvimento.",
                 font=("Arial", 14), text_color="#5f6368").pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def deletar_conta(email, senha, frame_principalmenu, reset_callback):
    """
    üóë Function: Delete Account
    Allows the user to permanently delete their account from the system.
    After confirmation, the data is removed and they will need to register again.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üóë Deletar Conta",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    label_confirmacao = ctk.CTkLabel(frame_principalmenu, text="ATEN√á√ÉO: Esta a√ß√£o √© irrevers√≠vel!\nDeseja realmente deletar sua conta?",
                                      font=("Arial", 14, "bold"), text_color="red")
    label_confirmacao.pack(pady=20)

    def confirmar_delecao_action():
        global dados_conta, dados_familia, dados_quantidade, dados_pontos, dados_apartamento, dados_codigov
        try:
            with open(r"banco_dados.JSON", "r+", encoding="utf-8") as arquivo:
                data = json.load(arquivo)
                if email in data["senha"]:
                    del data["senha"][email]
                    del data["familia"][email]
                    del data["membros"][email]
                    del data["pontos"][email]
                    del data["apartamento"][email]
                    del data["verificador"][email]

                    # Update global dictionaries to reflect changes immediately
                    dados_conta = data["senha"]
                    dados_familia = data["familia"]
                    dados_quantidade = data["membros"]
                    dados_pontos = data["pontos"]
                    dados_apartamento = data["apartamento"]
                    dados_codigov = data["verificador"]

                    arquivo.seek(0)  # Go to the beginning of the file
                    json.dump(data, arquivo, indent=4, ensure_ascii=False)
                    arquivo.truncate() # Remove remaining part

                    label_confirmacao.configure(text="Sua conta foi deletada com sucesso.", text_color="green")
                    # After deletion, log out and go to initial screen
                    janela.after(1000, lambda: voltar_inicial()) # Delay a bit for message to show
                else:
                    label_confirmacao.configure(text="Erro: Conta n√£o encontrada.", text_color="red")
        except Exception as e:
            label_confirmacao.configure(text=f"Erro ao deletar conta: {e}", text_color="red")


    botao_confirmar_delecao = ctk.CTkButton(frame_principalmenu, text="Confirmar Dele√ß√£o",
                                           fg_color="red", hover_color="#cc0000",
                                           command=confirmar_delecao_action)
    botao_confirmar_delecao.pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def feedback(email, senha, frame_principalmenu, reset_callback):
    """
    ‚úçÔ∏è Function: Feedback
    Allows the user to send an opinion with up to 140 characters and a rating from 0 to 10.
    Used to evaluate the system and collect improvement suggestions.
    """
    # Clear existing widgets in the main content frame
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="‚úçÔ∏è Enviar Feedback",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    label_instrucao = ctk.CTkLabel(frame_principalmenu, text="Por favor, deixe sua opini√£o sobre o sistema EcoDrop:",
                                    font=("Arial", 14), text_color="#333333")
    label_instrucao.pack(pady=(0, 10))

    # Feedback Text Entry
    label_feedback_texto = ctk.CTkLabel(frame_principalmenu, text="Seu Feedback (at√© 140 caracteres):",
                                         font=("Arial", 12, "bold"), text_color="#5f6368", anchor="w")
    label_feedback_texto.pack(fill="x", padx=50, pady=(10, 0))
    entrada_feedback = ctk.CTkEntry(frame_principalmenu, width=400, height=80)
    entrada_feedback.pack(padx=50, pady=(0, 10))

    # Rating Scale
    label_nota = ctk.CTkLabel(frame_principalmenu, text="Sua nota para o sistema (0 a 10):",
                              font=("Arial", 12, "bold"), text_color="#5f6368", anchor="w")
    label_nota.pack(fill="x", padx=50, pady=(10, 0))
    entrada_nota = ctk.CTkEntry(frame_principalmenu, width=100, validate="key",
                                validatecommand=(janela.register(lambda text: text.isdigit() and (len(text) <= 2 and int(text) <= 10 if text.strip() else True) or text == ""), "%P"))
    entrada_nota.pack(padx=50, pady=(0, 20), anchor="w")

    # Message Label for validation
    label_mensagem_feedback = ctk.CTkLabel(frame_principalmenu, text="", text_color="red", font=("Arial", 12))
    label_mensagem_feedback.pack(pady=(0, 10))

    def enviar_feedback_acao():
        feedback_text = entrada_feedback.get().strip()
        nota_text = entrada_nota.get().strip()

        if not feedback_text or not nota_text:
            label_mensagem_feedback.configure(text="Por favor, preencha todos os campos.", text_color="red")
            return

        try:
            nota = int(nota_text)
            if not (0 <= nota <= 10):
                label_mensagem_feedback.configure(text="A nota deve ser entre 0 e 10.", text_color="red")
                return
        except ValueError:
            label_mensagem_feedback.configure(text="A nota deve ser um n√∫mero inteiro.", text_color="red")
            return

        if len(feedback_text) > 140:
            label_mensagem_feedback.configure(text="O feedback n√£o pode exceder 140 caracteres.", text_color="red")
            return

        try:
            with open("feedback.csv", "a+", newline="", encoding="utf-8") as f: # Use "a+" to read and append
                f.seek(0, 2) # Move to the end of the file
                if f.tell() == 0: # Check if file is empty by checking current position
                    # File is empty, write header
                    csv_writer = csv.writer(f)
                    csv_writer.writerow(["Email", "Feedback", "Nota", "Data/Hora"])
                # Now write the data
                csv_writer = csv.writer(f)
                csv_writer.writerow([email, feedback_text, nota, time.strftime("%Y-%m-%d %H:%M:%S")])
            label_mensagem_feedback.configure(text="Feedback enviado com sucesso! Agradecemos sua colabora√ß√£o.", text_color="green")
            entrada_feedback.delete(0, ctk.END)
            entrada_nota.delete(0, ctk.END)
        except Exception as e:
            label_mensagem_feedback.configure(text=f"Erro ao salvar feedback: {e}", text_color="red")


    botao_enviar = ctk.CTkButton(frame_principalmenu, text="Enviar Feedback",
                                 fg_color="#1A73E8", text_color="white",
                                 command=enviar_feedback_acao)
    botao_enviar.pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def calculo_pontuacao(email, senha, frame_principalmenu, reset_callback):
    """
    üßÆ Function: Point Calculation
    Calculates points based on liters saved, number of residents, and average consumption.
    Points are converted into benefits (e.g., vouchers, discounts, miles).
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üßÆ C√°lculo de Pontos",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    ctk.CTkLabel(frame_principalmenu, text="Funcionalidade de c√°lculo de pontos em desenvolvimento.",
                 font=("Arial", 14), text_color="#5f6368").pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def resgatar_premio(email, senha, frame_principalmenu, reset_callback):
    """
    üéÅ Function: Redeem Prizes
    Allows the user to redeem rewards using their accumulated points.
    Checks if the balance is sufficient before confirming the redemption.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üéÅ Resgatar Pr√™mios",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    ctk.CTkLabel(frame_principalmenu, text="Funcionalidade de resgate de pr√™mios em desenvolvimento.",
                 font=("Arial", 14), text_color="#5f6368").pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def mostrar_ranking(email, senha, frame_principalmenu, reset_callback):
    """
    üèÜ Function: Monthly Ranking
    Displays a list of families that saved the most water in the month.
    Uses daily average consumption as a sorting criterion.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üèÜ Ranking Mensal",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    global dados_pontos, dados_familia # Access global data

    # Create a list of (family_name, points) tuples
    ranking_data = []
    # Use a copy of dados_pontos.items() to avoid issues if the dictionary changes during iteration (though unlikely here)
    for user_email, points in list(dados_pontos.items()):
        family_name = dados_familia.get(user_email, "N/A") # Get family name, default to N/A if not found
        ranking_data.append({"familia": family_name, "pontos": points})

    # Sort the ranking data by points in descending order
    ranking_data.sort(key=lambda x: x["pontos"], reverse=True)

    # Display the ranking
    if not ranking_data:
        ctk.CTkLabel(frame_principalmenu, text="Nenhum dado de ranking dispon√≠vel.",
                     font=("Arial", 14), text_color="#5f6368").pack(pady=10)
    else:
        # Create a header for the ranking table
        header_frame = ctk.CTkFrame(frame_principalmenu, fg_color="transparent")
        header_frame.pack(fill="x", padx=50, pady=(10, 5))
        ctk.CTkLabel(header_frame, text="Posi√ß√£o", font=("Arial", 12, "bold"), width=80).pack(side="left", padx=5)
        ctk.CTkLabel(header_frame, text="Fam√≠lia", font=("Arial", 12, "bold"), width=200).pack(side="left", padx=5)
        ctk.CTkLabel(header_frame, text="Pontos", font=("Arial", 12, "bold"), width=100).pack(side="left", padx=5)

        for i, item in enumerate(ranking_data):
            row_frame = ctk.CTkFrame(frame_principalmenu, fg_color="#f9f9f9" if i % 2 == 0 else "#ffffff")
            row_frame.pack(fill="x", padx=50, pady=2)
            ctk.CTkLabel(row_frame, text=f"{i+1}¬∫", width=80).pack(side="left", padx=5)
            ctk.CTkLabel(row_frame, text=item["familia"], width=200).pack(side="left", padx=5)
            ctk.CTkLabel(row_frame, text=item["pontos"], width=100).pack(side="left", padx=5)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def quiz_semanal(email, senha, frame_principalmenu, reset_callback):
    """
    üß† Function: Weekly Quiz
    Here the user can participate in a weekly quiz.
    """
    for widget in frame_principalmenu.winfo_children():
        widget.destroy()

    label_titulo = ctk.CTkLabel(frame_principalmenu, text="üß† Quiz Semanal",
                                 font=("Arial", 20, "bold"), text_color="#1A73E8")
    label_titulo.pack(pady=(20, 10))

    ctk.CTkLabel(frame_principalmenu, text="Funcionalidade de quiz semanal em desenvolvimento.",
                 font=("Arial", 14), text_color="#5f6368").pack(pady=10)

    botao_voltar = ctk.CTkButton(frame_principalmenu, text="‚¨Ö Voltar ao Menu",
                                 fg_color="gray", text_color="white",
                                 command=reset_callback)
    botao_voltar.pack(pady=20)


def area_educativa(email, senha, frame_menu):
    """Function used to go to the frame_educativo (we will use the full screen in this function, as it is necessary to have more content.
    Where there will be several reading options about sustainability topics)"""

    for widget in janela.winfo_children():
        widget.destroy()

    frame_topoeducativo = ctk.CTkFrame(janela, fg_color="#1A73E8", height=80)
    frame_topoeducativo.pack(fill="x")

    titulo_educativo = ctk.CTkLabel(frame_topoeducativo, text="üíß √ÅREA EDUCATIVA",
                                     text_color="#ffffff", font=("Arial", 24, "bold"))
    titulo_educativo.pack(pady=20)

    frame_educativo = ctk.CTkFrame(janela, fg_color="#ffffff")
    frame_educativo.pack(fill="both", expand=True, padx=20, pady=10)

    btn1 = ctk.CTkButton(frame_educativo,
                         text="Europa investe ‚Ç¨15 bilh√µes em preserva√ß√£o de recursos h√≠dricos at√© 2027",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa1(frame_educativo, email, senha, frame_menu))
    btn1.pack(fill="x", pady=10)

    btn2 = ctk.CTkButton(frame_educativo,
                         text="Cientistas desenvolvem tecnologia para extrair √°gua pot√°vel do ar usando res√≠duos alimentares",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa2(frame_educativo, email, senha, frame_menu))
    btn2.pack(fill="x", pady=10)

    btn3 = ctk.CTkButton(frame_educativo,
                         text="Universidade do Texas inicia constru√ß√£o do maior centro universit√°rio de re√∫so de √°gua dos EUA",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa3(frame_educativo, email, senha, frame_menu))
    btn3.pack(fill="x", pady=10)

    btn4 = ctk.CTkButton(frame_educativo,
                         text="Alunos ser√£o instru√≠dos sobre conserva√ß√£o da √°gua e limpeza do rio Ganges na √çndia",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa4(frame_educativo, email, senha, frame_menu))
    btn4.pack(fill="x", pady=10)

    btn5 = ctk.CTkButton(frame_educativo,
                         text="Impacto dos datacenters em √°reas com escassez h√≠drica na Am√©rica Latina",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa5(frame_educativo, email, senha, frame_menu))
    btn5.pack(fill="x", pady=10)

    btn6 = ctk.CTkButton(frame_educativo,
                         text="8 filmes educativos para crian√ßas sobre sustentabilidade",
                         fg_color="white",
                         text_color="#1A73E8",
                         font=("Arial", 12),
                         anchor="w",
                         cursor="hand2",
                         command=lambda: area_educativa6(frame_educativo, email, senha, frame_menu))
    btn6.pack(fill="x", pady=10)

    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue", # Changed color for consistency
                                 text_color="#ffffff", # Changed color for consistency
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: mostrar_menu(email, senha))
    botao_voltar.pack(pady=20)


def area_educativa1(frame_educativo, email, senha, frame_menu):
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # Title
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üåç Investimento de ‚Ç¨15 bilh√µes para combater a crise h√≠drica na Europa",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # News paragraph
    corpo_texto = (
        "A Universidade Europeia e o Banco Europeu de Investimento anunciaram, em 7 de junho, "
        "um aporte de ‚Ç¨15 bilh√µes (‚âàUS$17bi) a projetos voltados √† redu√ß√£o da polui√ß√£o, "
        "preven√ß√£o do desperd√≠cio e fomento √† inova√ß√£o no setor h√≠drico ao longo dos pr√≥ximos tr√™s anos. "
        "A a√ß√£o considera a intensifica√ß√£o das secas e press√µes agr√≠colas e urbanas causadas pelas mudan√ßas clim√°ticas. "
        "Como medida de responsabiliza√ß√£o, o Reino Unido restringiu b√¥nus a executivos de empresas de √°gua que n√£o investem "
        "o suficiente na qualidade dos corpos de √°gua."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Highlight: Why this matters?
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Por que isso importa?",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800,
                                      justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "Esse investimento maci√ßo pode impulsionar tecnologias verdes, infraestrutura resiliente e processos de governan√ßa "
        "que garantam √°gua limpa e gest√£o sustent√°vel, uma virada estrat√©gica para enfrentar a escassez h√≠drica em regi√µes vulner√°veis."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Sources
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))


    lbl = ctk.CTkLabel(frame_educativo,
                            text="‚Ä¢ reuters.com",
                            text_color="#333333",
                            font=("Arial", 13),
                            anchor="w",
                            justify="left")
    lbl.pack()

    # Back button
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)


def area_educativa2(frame_educativo, email, senha, frame_menu):
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # Title
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üéí Extra√ß√£o de √°gua pot√°vel do ar usando alimentos",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # News paragraph
    corpo_texto = (
        "Pesquisadores da Universidade do Texas em Austin publicaram, em abril, um m√©todo inovador para captar √°gua do ar "
        "usando hidrog√©is feitos com biomassa de res√≠duos alimentares e conchas. Esses materiais absorvem grandes volumes "
        "de umidade e liberam √°gua pura com aquecimento leve. Em campo, foram obtidos 15L de √°gua por kg de gel por dia‚Äî"
        "recuperando 95% do volume captado."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Highlight: Practical impact
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Impacto pr√°tico:",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800,
                                      justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "Trata-se de uma solu√ß√£o biodegrad√°vel, modular e de baixo consumo energ√©tico ‚Äî ideal para comunidades rurais, "
        "irriga√ß√£o localizada ou situa√ß√µes emergenciais em √°reas carentes de infraestrutura h√≠drica."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Sources
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))

    lbl = ctk.CTkLabel(frame_educativo,
                       text="‚Ä¢ foodandwine.com",
                       text_color="#333333",
                       font=("Arial", 13),
                       anchor="w",
                       justify="left")
    lbl.pack()

    # Back button
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)


def area_educativa3(frame_educativo, email, senha, frame_menu):
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # Title
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üèóÔ∏è UT Austin constr√≥i o maior centro universit√°rio de re√∫so de √°gua nos EUA",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # News paragraph
    corpo_texto = (
        "Em maio, a UT anunciou a constru√ß√£o do WaterHub, instala√ß√£o de 900m¬≤ que vai tratar at√© 1 milh√£o de gal√µes "
        "(‚âà3,8 mil m¬≥) de esgoto por dia. A previs√£o de opera√ß√£o √© para o segundo semestre de 2027. O local servir√° como laborat√≥rio "
        "de pesquisa pr√°tica para estudantes, integrando ensino e teste de tecnologias de re√∫so para aliviar sistemas municipais sobrecarregados."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Highlight: Why this matters?
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Por que isso importa?",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800,
                                      justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "Esse centro universit√°rio vai impulsionar a pesquisa e o desenvolvimento de tecnologias inovadoras de re√∫so de √°gua, "
        "contribuindo para a sustentabilidade urbana e forma√ß√£o t√©cnica avan√ßada."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Sources
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))

    lbl = ctk.CTkLabel(frame_educativo,
                       text="‚Ä¢ axios.com",
                       text_color="#333333",
                       font=("Arial", 13),
                       anchor="w",
                       justify="left")
    lbl.pack()

    # Back button
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)


def area_educativa4(frame_educativo, email, senha, frame_menu):
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # Title
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üì∞ Educa√ß√£o Ambiental na √çndia: Estudantes de Uttar Pradesh se tornam embaixadores da limpeza",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # News paragraph
    corpo_texto = (
        "Em junho de 2024, o governo do estado de Uttar Pradesh, na √çndia, lan√ßou uma iniciativa educativa para envolver os alunos "
        "das escolas p√∫blicas e privadas na conserva√ß√£o ambiental e limpeza do rio Ganges, um dos maiores e mais sagrados rios da √Åsia. "
        "O programa inclui forma√ß√£o de ‚Äúembaixadores estudantis da limpeza‚Äù, pr√°ticas de higiene e conserva√ß√£o h√≠drica, visitas a locais "
        "polu√≠dos, plantio de √°rvores, reda√ß√µes, campanhas ambientais e integra√ß√£o da comunidade escolar e familiar."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Highlight: Why this matters?
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Por que isso importa?",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800,
                                      justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "A iniciativa ajuda a sensibilizar jovens sobre a conserva√ß√£o h√≠drica e atitudes sustent√°veis desde cedo, "
        "envolvendo tamb√©m suas fam√≠lias e escolas, o que pode gerar impacto real na limpeza do Ganges e na forma√ß√£o de cidad√£os conscientes."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Sources
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))

    lbl = ctk.CTkLabel(frame_educativo,
                       text="‚Ä¢ timesofindia.indiatimes.com",
                       text_color="#333333",
                       font=("Arial", 13),
                       anchor="w",
                       justify="left")
    lbl.pack()

    # Back button
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)


def area_educativa5(frame_educativo, email, senha, frame_menu):
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # Title
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üì∞ Impacto dos datacenters em √°reas com escassez h√≠drica na Am√©rica Latina",
                          text_color="#1A73E8",
                          font=("Arial", 20, "bold"),
                          wraplength=800, justify="left")
    titulo.pack(pady=(20, 10))

    # News paragraph
    corpo_texto = (
        "Um artigo do The Guardian chama aten√ß√£o para a instala√ß√£o de grandes datacenters em regi√µes "
        "com escassez de √°gua no Brasil e outros pa√≠ses da Am√©rica Latina. Um dos casos citados em Caucaia (CE) "
        "est√° em regi√µes afetadas por seca, e esses centros utilizam at√© 80‚ÄØ% da √°gua retirada para resfriamento, "
        "gerando riscos de esgotamento de recursos h√≠dricos locais. O texto destaca a necessidade de maior transpar√™ncia, "
        "engajamento comunit√°rio e uso de alternativas como dessaliniza√ß√£o e re√∫so."
    )

    label_corpo = ctk.CTkLabel(frame_educativo,
                               text=corpo_texto,
                               text_color="#333333",
                               font=("Arial", 14),
                               wraplength=800,
                               justify="left")
    label_corpo.pack(pady=10)

    # Highlight: Why this matters?
    label_importancia = ctk.CTkLabel(frame_educativo,
                                      text="üí° Por que isso importa?",
                                      text_color="#1A73E8",
                                      font=("Arial", 20, "bold"),
                                      wraplength=800, justify="left")
    label_importancia.pack(pady=(20, 5))

    texto_importancia = (
        "Educa√ß√£o ambiental sobre impactos tecnol√≥gicos no ciclo da √°gua.\n\n"
        "Inova√ß√£o na busca por solu√ß√µes de resfriamento menos dependentes de √°gua.\n\n"
        "Reflex√£o sobre pol√≠ticas de concess√£o h√≠drica e planejamento sustent√°vel."
    )

    label_texto_importancia = ctk.CTkLabel(frame_educativo,
                                           text=texto_importancia,
                                           text_color="#000000",
                                           font=("Arial", 14),
                                           wraplength=800,
                                           justify="left")
    label_texto_importancia.pack(pady=5)

    # Sources
    label_fontes = ctk.CTkLabel(frame_educativo,
                                text="üîó Fontes:",
                                text_color="#1A73E8",
                                font=("Arial", 14, "bold"),
                                wraplength=800,
                                justify="left")
    label_fontes.pack(pady=(20, 5))

    lbl = ctk.CTkLabel(frame_educativo,
                       text="‚Ä¢ theguardian.com",
                       text_color="#333333",
                       font=("Arial", 13),
                       anchor="w",
                       justify="left")
    lbl.pack()

    # Back button
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=50)

def area_educativa6(frame_educativo, email, senha, frame_menu):
    for widget in frame_educativo.winfo_children():
        widget.destroy()

    # Smaller main title with less spacing
    titulo = ctk.CTkLabel(frame_educativo,
                          text="üåø 8 Filmes sobre Sustentabilidade para Crian√ßas",
                          text_color="#1A73E8",
                          font=("Arial", 16, "bold"),  # smaller font
                          wraplength=800,
                          justify="left")
    titulo.pack(pady=(10, 5))  # less spacing

    filmes = [
        ("Wall-E (2008)", "Um cl√°ssico da Pixar! Mostra um futuro onde a Terra foi tomada pelo lixo e a humanidade vive no espa√ßo. Wall-E, um rob√¥ solit√°rio, nos ensina sobre consumo, lixo e amor pelo planeta."),
        ("Lorax: Em Busca da Tr√∫fula Perdida (2012)", "Baseado na obra do Dr. Seuss, aborda desmatamento e explora√ß√£o de recursos naturais, com personagens carism√°ticos e m√∫sicas cativantes."),
        ("Happy Feet: O Pinguim (2006)", "Atrav√©s de um pinguim dan√ßarino, o filme aborda temas como mudan√ßa clim√°tica, preserva√ß√£o dos oceanos e o impacto da pesca predat√≥ria."),
        ("Rio (2011)", "Al√©m da aventura, mostra a import√¢ncia da biodiversidade brasileira e os perigos do tr√°fico de animais silvestres."),
        ("Irm√£o Urso (Brother Bear) (2003)", "Aborda o respeito √† natureza, ao ciclo da vida e √† conex√£o espiritual com o meio ambiente, com forte mensagem sobre empatia e equil√≠brio natural."),
        ("A Fuga das Galinhas (Chicken Run) (2000)", "Uma met√°fora inteligente sobre liberdade animal e os impactos da agroind√∫stria ‚Äì adaptado ao humor infantil."),
        ("O Rei Le√£o (1994 / 2019)", "Apesar de n√£o focar diretamente em sustentabilidade, ensina sobre o ‚Äúciclo da vida‚Äù e o equil√≠brio ecol√≥gico da savana africana."),
        ("Meu Amigo Totoro (1988)", "Um cl√°ssico do Studio Ghibli. Exalta a harmonia entre seres humanos e natureza, com um toque m√°gico e po√©tico.")
    ]

    for titulo_filme, descricao in filmes:
        label_filme_titulo = ctk.CTkLabel(frame_educativo,
                                          text=titulo_filme,
                                          text_color="#1A73E8",
                                          font=("Arial", 14, "bold"),  # smaller font
                                          wraplength=800,
                                          justify="left")
        label_filme_titulo.pack(padx=20, pady=(8, 2), anchor="w")  # less spacing

        label_filme_desc = ctk.CTkLabel(frame_educativo,
                                        text=descricao,
                                        text_color="#333333",
                                        font=("Arial", 12),  # smaller font
                                        wraplength=800,
                                        justify="left")
        label_filme_desc.pack(padx=20, pady=(0, 6), anchor="w")  # less spacing

    # Back button
    botao_voltar = ctk.CTkButton(frame_educativo,
                                 text="‚¨Ö Voltar",
                                 fg_color="blue",
                                 text_color="#ffffff",
                                 font=("Arial", 12),
                                 cursor="hand2",
                                 command=lambda: area_educativa(email, senha, frame_menu))
    botao_voltar.pack(pady=30)


def sair_sitema():
    """Function used to close the system"""
    janela.destroy()  # Closes the main window


######################################################################
# Main window configuration
janela = ctk.CTk()
janela.title("ECODROP SYSTEM")
janela.geometry("1000x800+400+150")
janela.resizable(False, False)

# Create a frame just for the header at the top
frame_topo = ctk.CTkFrame(janela, fg_color="#1A73E8", height=80)
frame_topo.pack(fill="x")

titulo = ctk.CTkLabel(frame_topo, text="üíß ECODROP",
                      text_color="#f0f0f0", font=("Arial", 24, "bold"))
titulo.pack(pady=20)

# Main content division (side menu and content)
frame_conteudo = ctk.CTkFrame(janela, fg_color="#f0f0f0")
frame_conteudo.pack(fill="both", expand=True)

# Side menu
frame_lateral = ctk.CTkFrame(frame_conteudo, fg_color="#f0f0f0", width=200)
frame_lateral.pack(side="left", fill="y")

# Menu buttons
botao1 = ctk.CTkButton(frame_lateral, text="Login", fg_color="#f0f0f0",
                       text_color="#1A73E8", font=("Arial", 12), anchor="w", command=mostrar_login)
botao1.pack(fill="x", pady=(20, 10), padx=10)

botao2 = ctk.CTkButton(frame_lateral, text="Cadastro usu√°rio", fg_color="#f0f0f0",
                       text_color="#1A73E8", font=("Arial", 12), anchor="w", command=mostrar_cadastro)
botao2.pack(fill="x", pady=10, padx=10)

botao3 = ctk.CTkButton(frame_lateral, text="Modo administrador", fg_color="#f0f0f0",
                       text_color="#1A73E8", font=("Arial", 12), anchor="w", command=modo_adm)
botao3.pack(fill="x", pady=10, padx=10)

botao4 = ctk.CTkButton(frame_lateral, text="Sobre n√≥s", fg_color="#f0f0f0",
                       text_color="#1A73E8", font=("Arial", 12), anchor="w", command=sobre_nos)
botao4.pack(fill="x", pady=10, padx=10)


####################################################
# Main content area
frame_principal = ctk.CTkFrame(frame_conteudo, fg_color="#f0f0f0")
frame_principal.pack(side="left", fill="both", expand=True, padx=30, pady=30)


texto_bem_vindo = ctk.CTkLabel(frame_principal, text="Bem-vindo ao sistema ECODROP",
                               text_color="#202124", font=("Arial", 22, "bold"))
texto_bem_vindo.pack(pady=(0, 20))

texto_instrucao = ctk.CTkLabel(frame_principal, text="Menos consumo, mais consci√™ncia, um planeta mais feliz.",
                               text_color="#5f6368", wraplength=500, justify="left", font=("Arial", 18))
texto_instrucao.pack()

image_initial = Image.open("fotos/mascoteprincipall.png") # Renamed to avoid global conflict
ctk_image_initial = ctk.CTkImage(
    light_image=image_initial, dark_image=image_initial, size=(400, 400))

label_initial_image = ctk.CTkLabel(frame_principal, image=ctk_image_initial, text="") # Renamed
label_initial_image.pack()

############################################################
# Footer Frame
frame_rodape = ctk.CTkFrame(frame_principal, fg_color="#f0f0f0", height=30)
frame_rodape.pack(fill="x", side="bottom")

texto_rodape = ctk.CTkLabel(
    frame_rodape, text="Vers√£o 2.0 ‚Ä¢ Suporte: ecodropsuporte@gmail.com", text_color="#5f6368", font=("Arial", 10))
texto_rodape.pack()

###########################################################
"""Part of the login frame"""

frame_login = ctk.CTkFrame(janela, fg_color="#ffffff")
label_login = ctk.CTkLabel(frame_login, text="Informe seus dados:",
                           fg_color="#ffffff", text_color="blue", font=("Arial", 20))
label_login.pack(pady=2)
label_avisologin = ctk.CTkLabel(
    frame_login, text=" ", fg_color="#ffffff", text_color="blue", font=("Arial", 20))
label_avisologin.pack(pady=2)

# 1-email entry
label_emaillogin = ctk.CTkLabel(
    frame_login, text="Digite seu email:", text_color="#000000", anchor="w", width=300)
label_emaillogin.pack(pady=(2, 0))

entrada_emaillogin = ctk.CTkEntry(frame_login, width=300)
entrada_emaillogin.pack(pady=2)

# 2-password entry
label_senhalogin = ctk.CTkLabel(
    frame_login, text="Digite sua senha:", text_color="#000000", anchor="w", width=300)
label_senhalogin.pack(pady=(2, 0))

entrada_senhalogin = ctk.CTkEntry(frame_login, width=300, show="*")
entrada_senhalogin.pack(pady=2)

# login button
botao_logar = ctk.CTkButton(frame_login, text="Logar", fg_color="blue",
                            text_color="#ffffff", width=300, command=lambda: conferir_logar(entrada_emaillogin, entrada_senhalogin))
botao_logar.pack(pady=2)
# back button
botao_voltarinicial_login = ctk.CTkButton( # Renamed
    frame_login, text="Voltar", fg_color="blue", text_color="#ffffff", width=300, command=voltar_inicial)
botao_voltarinicial_login.pack()


##############################################
"""Part of the registration frame"""
frame_cadastro = ctk.CTkFrame(janela, fg_color="#ffffff")
label_cadastro = ctk.CTkLabel(frame_cadastro, text="Informe seus dados:",
                              fg_color="#ffffff", text_color="blue", font=("Arial", 20))
label_cadastro.pack(pady=1)


label_aviso = ctk.CTkLabel(frame_cadastro, text=" ",
                           fg_color="#ffffff", text_color="blue", font=("Arial", 20))
label_aviso.pack(pady=1)

# 1-Email Entry
label_email = ctk.CTkLabel(frame_cadastro, text="Digite seu email:",
                           text_color="#000000", anchor="w", width=300)
label_email.pack(pady=(1, 0))

entrada_email = ctk.CTkEntry(frame_cadastro, width=300)
entrada_email.pack(pady=1)

# 2-Family Name Entry
label_nome = ctk.CTkLabel(frame_cadastro, text="Digite o nome da sua fam√≠lia",
                          text_color="#000000", anchor="w", width=300)
label_nome.pack(pady=(1, 0))

entrada_nome = ctk.CTkEntry(frame_cadastro, width=300, validate="key", validatecommand=(
    janela.register(validar_letras_espacos), "%P"))
entrada_nome.pack(pady=1)

# 3-Password Entry
label_senha = ctk.CTkLabel(frame_cadastro, text="Senha (m√≠nimo 4 caracteres):",
                           text_color="#000000", anchor="w", width=300)
label_senha.pack(pady=(1, 0))

entrada_senha = ctk.CTkEntry(frame_cadastro, width=300, show="*")
entrada_senha.pack(pady=1)

# 4. Number of Members Field
label_qmembros = ctk.CTkLabel(
    frame_cadastro, text="Quantidade de membros na fam√≠lia:", text_color="#000000", anchor="w", width=300)
label_qmembros.pack(pady=(1, 0))
entrada_qmembros = ctk.CTkEntry(frame_cadastro, width=300, validate="key", validatecommand=(
    janela.register(validar_numeros), "%P"))
entrada_qmembros.pack(pady=1)

# 5. Apartment Number
label_numeroap = ctk.CTkLabel(
    frame_cadastro, text="Digite o n√∫mero do seu apartamento", text_color="#000000", anchor="w", width=300)
label_numeroap.pack(pady=(1, 0))
entrada_numeroap = ctk.CTkEntry(frame_cadastro, width=300, validate="key", validatecommand=(
    janela.register(validar_numeros), "%P"))
entrada_numeroap.pack(pady=1)

# 6. Verifier Code
label_verificador = ctk.CTkLabel(
    frame_cadastro, text="Digite seu c√≥digo verificador (m√≠nimo 4 caracteres):", text_color="#000000", anchor="w", width=300)
label_verificador.pack(pady=(1, 0))

entrada_verificador = ctk.CTkEntry(frame_cadastro, width=300, show="*", validate="key", validatecommand=(
    janela.register(validar_numeros), "%P")) # Added validation for verifier code
entrada_verificador.pack(pady=1)


botao_cadastrar = ctk.CTkButton(frame_cadastro, text="Cadastrar", fg_color="blue",
                                text_color="#ffffff", width=300, command=lambda: conferir_cadastrar(entrada_email, entrada_nome, entrada_senha,
                                                                                                    entrada_qmembros,
                                                                                                    entrada_numeroap, entrada_verificador, label_aviso))
botao_cadastrar.pack(pady=1)

# back button
botao_voltarinicial_cadastro = ctk.CTkButton( # Renamed
    frame_cadastro, text="Voltar", fg_color="blue", text_color="#ffffff", width=300, command=voltar_inicial)
botao_voltarinicial_cadastro.pack()


#####################################
"""Part of the admin frame (administrator mode)"""
frame_adm = ctk.CTkFrame(janela, fg_color="#ffffff")
label_adm_title = ctk.CTkLabel(frame_adm, text="Modo Administrador", fg_color="#ffffff", text_color="blue", font=("Arial", 30))
label_adm_title.pack(pady=1)

label_adm_message = ctk.CTkLabel(frame_adm, text=" ", fg_color="#ffffff", text_color="blue", font=("Arial", 25))
label_adm_message.pack(pady=1)

# 1-Admin Code Entry
label_codigo = ctk.CTkLabel(frame_adm, text="Digite o c√≥digo de administrador:",
                           text_color="blue", anchor="w", width=300)
label_codigo.pack(pady=(1, 0))

entrada_codigo = ctk.CTkEntry(frame_adm, width=300, show="*") # Mask input for admin code
entrada_codigo.pack(pady=1)

botao_modoadm = ctk.CTkButton(frame_adm, text="Entrar modo adm", fg_color="blue",
                               text_color="#ffffff", width=300, command=entrar_modoadm)
botao_modoadm.pack(pady=1)
# back button
botao_voltarinicial_adm = ctk.CTkButton(frame_adm, text="Voltar", fg_color="blue", text_color="#ffffff", width=300, command=voltar_inicial) # Renamed
botao_voltarinicial_adm.pack()


######################################################
"""Part of the about us frame (Tells the story of ecodrop)"""
frame_sobrenos = ctk.CTkFrame(janela, fg_color="#ffffff")

# Main title
titulo_sobrenos = ctk.CTkLabel(frame_sobrenos, text="üíß Projeto ECODROP", font=("Arial", 22, "bold"), text_color="#1A73E8")
titulo_sobrenos.pack(pady=(20, 10))

descricao_projeto = ctk.CTkLabel(
    frame_sobrenos,
    text=(
        "Em um mundo marcado pelo crescimento populacional e pelo consumo excessivo de recursos naturais, "
        "a sustentabilidade se tornou um dos pilares fundamentais para garantir a qualidade de vida das gera√ß√µes futuras. "
        "√â essencial que a sociedade adote pr√°ticas conscientes no dia a dia, promovendo o uso equilibrado da √°gua, da energia e demais recursos. "
        "Nesse contexto, a tecnologia tem papel estrat√©gico: aproximar a inova√ß√£o das solu√ß√µes ambientais.\n\n"

        "O ECODROP √© um sistema desenvolvido com o prop√≥sito de promover a sustentabilidade em ambientes residenciais, "
        "especialmente em condom√≠nios. A proposta central √© incentivar e premiar os moradores que conseguem manter um "
        "consumo de √°gua abaixo da m√©dia nacional, promovendo assim economia, consci√™ncia ambiental e um futuro mais respons√°vel.\n\n"

        "Este projeto foi criado por Matheus de Castro e Gabriel Escobar como parte do Projeto Interdisciplinar do curso de "
        "Sistemas de Informa√ß√£o da Universidade Federal Rural de Pernambuco (UFRPE). Para sua constru√ß√£o, foi utilizada a linguagem "
        "de programa√ß√£o Python, aliando tecnologia e responsabilidade ambiental em uma solu√ß√£o acess√≠vel e inteligente para o cotidiano dos moradores."
    ),
    font=("Arial", 14),
    text_color="#202124",
    wraplength=650,
    justify="left"
)
descricao_projeto.pack(pady=(0, 30))
imagem_sobrenos_path = "fotos/fotosobrenos.jpg"
try:
    imagem_sobrenos = Image.open(imagem_sobrenos_path)
    ctk_imagem_sobrenos = ctk.CTkImage(
        light_image=imagem_sobrenos, dark_image=imagem_sobrenos, size=(500, 300))
    label_sobrenos_image = ctk.CTkLabel(frame_sobrenos, image=ctk_imagem_sobrenos, text="")
    label_sobrenos_image.pack()
except FileNotFoundError:
    ctk.CTkLabel(frame_sobrenos, text=f"Imagem '{imagem_sobrenos_path}' n√£o encontrada.", text_color="red").pack()


botao_voltarinicial_sobrenos = ctk.CTkButton(frame_sobrenos, text="Voltar", fg_color="blue", text_color="#ffffff", width=300, command=voltar_inicial)
botao_voltarinicial_sobrenos.pack(pady=30)

#######################################
"""Part of the warning frame (only used when the user correctly completes the registration, with the option to go to login or exit the system)"""
frame_aviso=ctk.CTkFrame(janela,fg_color="#ffffff")
# Warning label
label_aviso_success = ctk.CTkLabel(frame_aviso, text="Cadastro realizado com sucesso!", font=("Arial", 20), text_color="green")
label_aviso_success.pack(pady=(40, 20))

# Button to go to login
botao_login_aviso = ctk.CTkButton(frame_aviso, text="Ir para Login", width=200, command=mostrar_login)
botao_login_aviso.pack(pady=(0, 10))

# Button to exit the system
botao_sair_aviso = ctk.CTkButton(frame_aviso, text="Sair do Sistema", width=200, fg_color="red", hover_color="#cc0000", command=sair_sitema)
botao_sair_aviso.pack()


###############################################

class Cadastro:
    """
    Essa Classe tem o objetivo de cadastrar os usu√°rios, recebendo os dados b√°sicos como par√¢metros.
    Ela realiza o cadastro de uma conta e verifica o c√≥digo de seguran√ßa fornecido.
    """

    def __init__(self, email, quantidade_pessoas, senha, nome_familia, apartamento, verificador):
        # Dados b√°sicos de cadastro
        self.email = email
        self.quantidade = quantidade_pessoas
        self.senha = senha
        self.nome_familia = nome_familia
        self.pontos = 0  # Pontos come√ßam zerados
        self.apartamento = apartamento
        self.verificador = verificador
        print("entrei cadastro")
        self.email_valido()

        # Chamada para verificar o c√≥digo de seguran√ßa
        


    def email_valido(self):
        
        #FUN√á√ÉO UTILIZADA PARA CONFERIR SE O EMAIL √â V√ÅLIDO OU N√ÉO
        dominios_validos = [
            'gmail.com', 'outlook.com', 'hotmail.com',
            'yahoo.com', 'icloud.com'
        ]

        
            # VERIFICA SE O FORMATO DO EMAIL EST√Å ESCRITO CORRETAMENTE
        if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', self.email):
            #label_aviso √© uma vari√°vel global,n√£o necessitando importar para edita-la
            label_aviso.configure(text="Formato inv√°lido", text_color="red")
            return
            

                  # volta pro in√≠cio do while para validar de novo,caso esteja correto,ir√° passar pelo verificador

            # VERIFICA APENAS O DOM√çNIO,SEPARA TODO O RESTO E PEGA APENAS A PARTE DO DOM√çNIO
        dominio = self.email.split('@')[1].lower()
        if dominio not in dominios_validos:
            label_aviso.configure(text="Dom√≠nio n√£o aceito", text_color="red")
            return

                # continuar o loop sem parar
                

        # Se chegou aqui, formato e dom√≠nio est√£o corretos
            

        
        self.conferir_email()

    
    def conferir_email(self):
        
        #FUN√á√ÉO UTILIZADA PARA CONFERIR SE O EMAIL J√Å EST√Å CADASTRADO OU N√ÉO
        
        with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
            arquivo_lido = json.load(arquivo)
            dados_conta = arquivo_lido["senha"]
            dados_familia = arquivo_lido["familia"]
            dados_quantidade = arquivo_lido["membros"]
            dados_pontos = arquivo_lido["pontos"]
            dados_apartamento = arquivo_lido["apartamento"]
            dados_codigov = arquivo_lido["verificador"]

            if self.email.strip() in dados_conta:#dessa forma verificar√° se o email est√° j√° cadastrado ou n√£o
                label_aviso.configure(text="Email j√° cadastrado.",text_color="red")
                return
            
            else:
                self.conferir_ap()  # Continua o processo normalmente

    def conferir_ap(self):
        
       #FUN√á√ÉO UTILIZADA PARA ANALISAR SE O APARTAMENTO J√Å EST√Å CADASTRADO OU N√ÉO
        if self.apartamento in dados_apartamento.values():
            label_aviso.configure(text="APARTAMENTO J√Å CADASTRADO.TENTE NOVAMENTE")
        else:
            self.cadastrar_conta()

    def cadastrar_conta(self):
        
        ##FUN√á√ÉO UTILIZADA PARA CADASTRAR CONTA NO BANCO DE DADOS

        dados_conta[self.email] = self.senha
        dados_familia[self.email] = self.nome_familia
        dados_quantidade[self.email] = self.quantidade
        dados_pontos[self.email] = self.pontos
        dados_apartamento[self.email] = self.apartamento
        dados_codigov[self.email] = self.verificador

        # PARA ARQUIVO TIPO JSON √â MELHOR USAR "w" pois qualquer errinho de formata√ß√£o pode quebrar o sistema
        with open(r"banco_dados.JSON", "w", encoding="utf-8") as arquivo:
            # Aqui, estamos criando um dicion√°rio com duas chaves:
            json.dump({"senha": dados_conta, "familia": dados_familia, "membros": dados_quantidade, "pontos": dados_pontos,
                       "apartamento": dados_apartamento, "verificador": dados_codigov}, arquivo, indent=4, ensure_ascii=False)
            aviso_sistema()



janela.mainloop()
