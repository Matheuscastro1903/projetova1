
import customtkinter as ctk
from customtkinter import CTkImage, CTkLabel

from PIL import Image
import json
import csv
import time
import re
import random
import pandas as pd
import matplotlib as plt
from collections import Counter
from io import BytesIO
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from validar import validar_letras_espacos,validar_numeros

# Carregamento dos dados globais
with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
    arquivo_lido = json.load(arquivo)
    dados_conta = arquivo_lido["senha"]
    dados_familia = arquivo_lido["familia"]
    dados_quantidade = arquivo_lido["membros"]
    dados_pontos = arquivo_lido["pontos"]
    dados_apartamento = arquivo_lido["apartamento"]
    dados_codigov = arquivo_lido["verificador"]
    dados_ultimo_quiz = arquivo_lido.get("ultimo_quiz", {})
    dados_questoes_quiz = arquivo_lido.get("questoes_quiz", [])

with open(r"dados_usuarios.json", "r", encoding="utf-8") as arquivo:
    dados_lidos = json.load(arquivo)
    dados_consumo = dados_lidos["consumo"]

# Pr√™mios dispon√≠veis para resgate
premios_disponiveis = [
    {"nome": "Voucher de R$ 10", "custo": 100},
    {"nome": "Desconto de 5% na conta de √°gua", "custo": 200},
    {"nome": "Kit de produtos sustent√°veis", "custo": 300},
    {"nome": "Voucher de R$ 25", "custo": 500},
    {"nome": "Desconto de 10% na conta de √°gua", "custo": 800},
    {"nome": "Voucher de R$ 50", "custo": 1000}
]

mensagens_agua = [
    "üíß Cada gota conta. Economize √°gua!",
    "üöø Banhos curtos, planeta mais saud√°vel.",
    "üåç √Ågua √© vida. Preserve cada gota.",
    "üßº Feche a torneira ao escovar os dentes.",
    "üí¶ Pequenas atitudes salvam grandes recursos.",
    "üîß Torneiras pingando desperdi√ßam litros por dia!",
    "üå± Use a √°gua da chuva para regar plantas.",
    "‚ùå √Ågua n√£o √© infinita. Use com consci√™ncia.",
    "ü™£ Reutilize a √°gua sempre que puder.",
    "üê≥ Preserve os rios, lagos e oceanos.",
    "üìâ Menos desperd√≠cio, mais futuro.",
    "üßΩ Economize √°gua ao lavar lou√ßa ou roupa.",
    "üè° Sua casa tamb√©m pode ser sustent√°vel.",
    "üë∂ Ensine as crian√ßas a cuidar da √°gua.",
    "üíô √Ågua limpa √© direito de todos. Preserve!"
]


class Cadastro(ctk.CTkFrame):

    # Atributos de classe,servir√£o para todos os casos e evitar√° ter que criar uma lista toda vez que for verificar o email,melhorando

    DOMINIOS_VALIDOS = {"gmail.com", "outlook.com",
                        "hotmail.com", "yahoo.com", "icloud.com"}
    REGEX_EMAIL = re.compile(
        r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')

    def __init__(self, master, voltar_inicial, mostrar_login):
        super().__init__(master)

        self.mostrar_login = mostrar_login

        self.frame_cadastro = ctk.CTkFrame(self, fg_color="#ffffff")
        self.frame_cadastro.pack(fill="both", expand=True)

        label_cadastro = ctk.CTkLabel(self.frame_cadastro, text="Informe seus dados:",
                                      fg_color="#ffffff", text_color="blue", font=("Arial", 20))
        label_cadastro.pack(pady=1)

        self.label_aviso = ctk.CTkLabel(self.frame_cadastro, text=" ",
                                        fg_color="#ffffff", text_color="blue", font=("Arial", 20))
        self.label_aviso.pack(pady=1)

        # 1 - Entrada email
        label_email = ctk.CTkLabel(self.frame_cadastro, text="Digite seu email:",
                                   text_color="#000000", anchor="w", width=300)
        label_email.pack(pady=(1, 0))

        self.entrada_email = ctk.CTkEntry(self.frame_cadastro, width=300)
        self.entrada_email.pack(pady=1)

        # 2 - Nome da fam√≠lia
        label_nome = ctk.CTkLabel(self.frame_cadastro, text="Digite o nome da sua fam√≠lia",
                                  text_color="#000000", anchor="w", width=300)
        label_nome.pack(pady=(1, 0))

        self.entrada_nome = ctk.CTkEntry(self.frame_cadastro, width=300,
                                         validate="key",
                                         validatecommand=(self.register(validar_letras_espacos), "%P"))
        self.entrada_nome.pack(pady=1)

        # 3 - Senha
        label_senha = ctk.CTkLabel(self.frame_cadastro, text="Senha (m√≠nimo 4 caracteres):",
                                   text_color="#000000", anchor="w", width=300)
        label_senha.pack(pady=(1, 0))

        self.entrada_senha = ctk.CTkEntry(
            self.frame_cadastro, width=300, show="*")
        self.entrada_senha.pack(pady=1)

        # 4 - Quantidade de membros
        label_qmembros = ctk.CTkLabel(self.frame_cadastro, text="Quantidade de membros na fam√≠lia:",
                                      text_color="#000000", anchor="w", width=300)
        label_qmembros.pack(pady=(1, 0))

        self.entrada_qmembros = ctk.CTkEntry(self.frame_cadastro, width=300,
                                             validate="key",
                                             validatecommand=(self.register(validar_numeros), "%P"))
        self.entrada_qmembros.pack(pady=1)

        # 5 - N√∫mero do apartamento
        label_numeroap = ctk.CTkLabel(self.frame_cadastro, text="Digite o n√∫mero do seu apartamento",
                                      text_color="#000000", anchor="w", width=300)
        label_numeroap.pack(pady=(1, 0))

        self.entrada_numeroap = ctk.CTkEntry(self.frame_cadastro, width=300,
                                             validate="key",
                                             validatecommand=(self.register(validar_numeros), "%P"))
        self.entrada_numeroap.pack(pady=1)

        # 6 - C√≥digo verificador
        label_verificador = ctk.CTkLabel(self.frame_cadastro, text="Digite seu c√≥digo verificador\n(M√çNIMO 4 CARACTERES E APENAS N√öMEROS):",
                                         text_color="#000000", anchor="w", width=300)
        label_verificador.pack(pady=(1, 0))

        self.entrada_verificador = ctk.CTkEntry(self.frame_cadastro, width=300,
                                                validate="key", show="*",
                                                validatecommand=(self.register(validar_numeros), "%P"))
        self.entrada_verificador.pack(pady=1)

        # Bot√£o cadastrar
        botao_cadastrar = ctk.CTkButton(self.frame_cadastro, text="Cadastrar",
                                        fg_color="blue", text_color="#ffffff", width=300,
                                        command=self.conferir_cadastrar)

        botao_cadastrar.pack(pady=10)

        # Bot√£o voltar
        botao_voltar = ctk.CTkButton(self.frame_cadastro, text="Voltar",
                                     fg_color="blue", text_color="#ffffff", width=300,
                                     command=voltar_inicial)
        botao_voltar.pack()

    def conferir_cadastrar(self):
        email = self.entrada_email.get().strip()
        nome_familia = self.entrada_nome.get().strip()
        senha = self.entrada_senha.get().strip()
        quantidade_pessoas = self.entrada_qmembros.get().strip()
        apartamento = self.entrada_numeroap.get().strip()
        verificador = self.entrada_verificador.get().strip()

        entradas = [email, nome_familia, senha,
                    quantidade_pessoas, apartamento]
    # Verifica√ß√£o: se algum campo de texto estiver vazio
        if any(campo == "" for campo in entradas):
            self.label_aviso.configure(
                text="Todos os campos devem ser preenchidos.", text_color="red")
            return

    # Valida√ß√£o da senha
        if len(senha) < 4 or len(senha) > 20:
            self.label_aviso.configure(
                text="A senha deve ter entre 4 e 20 caracteres.", text_color="red")
            return

        if len(verificador) < 4 or len(verificador) > 20:
            self.label_aviso.configure(
                text="O c√≥digo verificador deve ter entre 4 e 20 caracteres.", text_color="red")
            return
        
        #ESSES VERIFICADORES SERVIR√ÉO PARA DIZER SE O ANDAR E O APARTAMENTO √â V√ÅLIDO OU N√ÉO
        possiveis_andares=["10","20","30","40","50","60","70","80","90"]
        possiveis_apartamentos=["01","02","03","04","05"]

        andar_valido = False
        apto_valido = False
        numero_valido=False
        
        
        if len(apartamento)==4:
            numero_valido=True

        for andar in possiveis_andares:
            #S√ì VALIDAR√Å SE APARTAMENTO INICIAR COM O INTER√ÅVEL DA LISTA ANDAR
            if apartamento.startswith(andar):
                andar_valido = True
                #BREAK IR√Å QUEBRAR O LOOP FOR,ACABANDO A INTERA√á√ÉO
                break

        for apto in possiveis_apartamentos:
             #S√ì VALIDAR√Å SE APARTAMENTO INICIAR COM O INTER√ÅVEL DA LISTA APARTAMENTO
            if apartamento.endswith(apto):
                apto_valido = True
                #BREAK IR√Å QUEBRAR O LOOP FOR,ACABANDO COM A INTERA√á√ÉO
                break

        if not (andar_valido and apto_valido and numero_valido): #VERIFICA SE AMBOS S√ÉO V√ÅLIDOS(TRUE)
            self.label_aviso.configure(text="Apartamento inv√°lido", text_color="red")
            #return ir√° parar a fun√ß√£o caso o aviso apare√ßa
            return

        quantidade_pessoas = int(quantidade_pessoas)
        verificador = int(verificador)

        # NECESS√ÅRIO FAZER DESSA FORMA PARA EVITAR M√öLTIPLAS CHAMADAS DA FUN√á√ÉO GET,QUE PEGA VALORES DAS ENTRADAS
        self.email = email
        self.senha = senha
        self.nome_familia = nome_familia
        self.quantidade = quantidade_pessoas
        self.pontos = 0
        self.apartamento = int(apartamento)
        self.verificador = int(verificador)

        self.email_valido()

    def email_valido(self):

        # FUN√á√ÉO UTILIZADA PARA CONFERIR SE O EMAIL √â V√ÅLIDO OU N√ÉO
        # VERIFICA SE O FORMATO DO EMAIL EST√Å ESCRITO CORRETAMENTE
        # atributo de classe definido antes do init
        if not self.REGEX_EMAIL.match(self.email):
            self.label_aviso.configure(
                text="Formato inv√°lido", text_color="red")
            return

            # volta pro in√≠cio do while para validar de novo,caso esteja correto,ir√° passar pelo verificador

            # VERIFICA APENAS O DOM√çNIO,SEPARA TODO O RESTO E PEGA APENAS A PARTE DO DOM√çNIO
        dominio = self.email.split('@')[1].lower()
        if dominio not in self.DOMINIOS_VALIDOS:  # atributo de classe definido antes do init
            self.label_aviso.configure(
                text="Dom√≠nio n√£o aceito", text_color="red")
            return

            # continuar o loop sem parar

        # Se chegou aqui, formato e dom√≠nio est√£o corretos

        self.conferir_email()

    def conferir_email(self):
        # FUN√á√ÉO UTILIZADA PARA CONFERIR SE O EMAIL J√Å EST√Å CADASTRADO OU N√ÉO
        with open(r"banco_dados.JSON", "r", encoding="utf-8") as arquivo:
            arquivo_lido = json.load(arquivo)
            dados_conta = arquivo_lido["senha"]

            if self.email.strip() in dados_conta:  # dessa forma verificar√° se o email est√° j√° cadastrado ou n√£o
                self.label_aviso.configure(
                    text="Email j√° cadastrado.", text_color="red")
                return

            else:
                self.conferir_ap()  # Continua o processo normalmente

    def conferir_ap(self):

       # FUN√á√ÉO UTILIZADA PARA ANALISAR SE O APARTAMENTO J√Å EST√Å CADASTRADO OU N√ÉO
        if self.apartamento in dados_apartamento.values():
            self.label_aviso.configure(
                text="APARTAMENTO J√Å CADASTRADO.TENTE NOVAMENTE", text_color="red")
        else:
            self.cadastrar_conta()

    def cadastrar_conta(self):

        # FUN√á√ÉO UTILIZADA PARA CADASTRAR CONTA NO BANCO DE DADOS

        try:
            dados_conta[self.email] = self.senha
            dados_familia[self.email] = self.nome_familia
            dados_quantidade[self.email] = self.quantidade
            dados_pontos[self.email] = self.pontos
            dados_apartamento[self.email] = self.apartamento
            dados_codigov[self.email] = self.verificador

        # PARA ARQUIVO TIPO JSON √â MELHOR USAR "w" pois qualquer errinho de formata√ß√£o pode quebrar o sistema
            with open(r"banco_dados.JSON", "w", encoding="utf-8") as arquivo:
                # Aqui, estamos criando um dicion√°rio com duas chaves:
                json.dump({"senha": dados_conta, "familia": dados_familia, "membros": dados_quantidade, "pontos": dados_pontos,
                           "apartamento": dados_apartamento, "verificador": dados_codigov}, arquivo, indent=4, ensure_ascii=False)
                self.mostrar_frame_aviso()
        except:
            self.label_aviso.configure(
                text="Banco de dados n√£o est√° funcionando,tente mais tarde.")

    def mostrar_frame_aviso(self):
        """Parte do frame aviso(s√≥ ser√° usada quando o usu√°rio finalizar corretamente o cadastro,tendo a op√ß√£o de ir para login ou sair do sistema"""
        for widget in self.frame_cadastro.winfo_children():
            widget.destroy()

        # Label de aviso
        label = ctk.CTkLabel(self.frame_cadastro, text="Cadastro realizado com sucesso!", font=(
            "Arial", 20), text_color="green")
        label.pack(pady=(40, 20))

        # Bot√£o para ir para login
        botao_login = ctk.CTkButton(
            self.frame_cadastro, text="Ir para Login", width=200, command=self.mostrar_login)
        botao_login.pack(pady=(0, 10))

    # Bot√£o para sair do sistema
        botao_sair = ctk.CTkButton(self.frame_cadastro, text="Sair do Sistema",
                                   width=200, fg_color="red", hover_color="#cc0000", command=self.sair_sitema)
        botao_sair.pack()

    def sair_sitema(self):
        """Fun√ß√£o utilizada para fechar sistema """
        # Fechando dessa forma ir√° "destruir" a janela que foi definida no master
        self.master.destroy()  # Fecha a janela principal

